"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[9815],{473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>J,contentTitle:()=>K,default:()=>$,frontMatter:()=>H,metadata:()=>F,toc:()=>W});var a=t(8168),o=(t(6540),t(5680)),r=t(4472);const i={toc:[]},s="wrapper";function l(e){let{components:n,...t}=e;return(0,o.yg)(s,(0,a.A)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Create a new folder for your project, navigate to it in the command line,\nand initialize a new Node.js project:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npm init -y\n")),(0,o.yg)("p",null,"Next, install all the Node.js dependencies we're going to use. In this case it will be ",(0,o.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/dotenv"},"dotenv"),"\n(utility for initializing environment variables from a file), ",(0,o.yg)("a",{parentName:"p",href:"https://expressjs.com"},"Express.js")," (web framework),\nand ",(0,o.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/cookie-session"},"cookie-session")," for handling cookie-based sessions, and finally the necessary APS SDK including:"),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"At the writing of this documentation, the tutorial sample is using the specified version next to the package name.")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/autodesk-sdkmanager/v/1.0.0?activeTab=versions"},"@aps_sdk/autodesk-sdkmanager v1.0.0")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/authentication/v/1.0.0?activeTab=versions"},"@aps_sdk/authentication v1.0.0 ")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/data-management/v/1.0.2?activeTab=versions"},"@aps_sdk/data-management v1.0.2")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/construction-account-admin/v/1.1.0?activeTab=versions"},"@aps_sdk/construction-account-admin v1.1.0")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/construction-issues/v/1.1.0?activeTab=versions"},"@aps_sdk/construction-issues v1.1.0"))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npm install --save dotenv express cookie-session \nnpm install --save @aps_sdk/autodesk-sdkmanage  @aps_sdk/authentication  @aps_sdk/data-management  @aps_sdk/construction-account-admin  @aps_sdk/construction-issues \n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},'"dependencies"')," in your ",(0,o.yg)("inlineCode",{parentName:"p"},"package.json")," file should now look something like this\n(potentially with slightly different version numbers):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'// ...\n   "dependencies": {\n    "@aps_sdk/authentication": "^1.0.0",\n    "@aps_sdk/autodesk-sdkmanager": "^1.0.0",\n    "@aps_sdk/construction-account-admin": "^1.1.0",\n    "@aps_sdk/construction-issues": "^1.1.0",\n    "@aps_sdk/data-management": "^1.0.2",\n    "cookie-session": "^2.1.0",\n    "dotenv": "^16.4.5",\n    "express": "^5.1.0"\n  }\n// ...\n')),(0,o.yg)("p",null,"Finally, let's create a couple more subfolders in your project folder that we're going to need later:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"wwwroot")," - this is where we're going to put all the client side assets (HTML, CSS, JavaScript, images, etc.)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"routes")," - this is where we're going to implement all the server endpoints"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"services")," - here we're going to keep all the server-side logic that can be shared by different endpoints")))}l.isMDXComponent=!0;const p={toc:[]},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(c,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Create a ",(0,o.yg)("inlineCode",{parentName:"p"},"config.js")," file in the root of your project folder, and add the following code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="config.js"',title:'"config.js"'},"const { Scopes } = require('@aps_sdk/authentication');\nrequire('dotenv').config();\n\nlet { APS_CLIENT_ID, APS_CLIENT_SECRET, APS_CALLBACK_URL, SERVER_SESSION_SECRET, PORT } = process.env;\nif (!APS_CLIENT_ID || !APS_CLIENT_SECRET || !APS_CALLBACK_URL || !SERVER_SESSION_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\nconst INTERNAL_TOKEN_SCOPES = [Scopes.DataRead, Scopes.DataWrite,Scopes.AccountRead,Scopes.ViewablesRead];\nconst PUBLIC_TOKEN_SCOPES = [Scopes.ViewablesRead];\nPORT = PORT || 8080;\n\nmodule.exports = {\n    APS_CLIENT_ID,\n    APS_CLIENT_SECRET,\n    APS_CALLBACK_URL,\n    SERVER_SESSION_SECRET,\n    INTERNAL_TOKEN_SCOPES,\n    PUBLIC_TOKEN_SCOPES,\n    PORT\n};\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"dotenv")," library initializes environment variables from a local ",(0,o.yg)("em",{parentName:"p"},".env")," file (if there's one).\nWe then simply read the environment variables from ",(0,o.yg)("inlineCode",{parentName:"p"},"process.env"),", and exit the application\nimmediately if any of the required properties are missing."),(0,o.yg)("p",null,"Next, let's create the ",(0,o.yg)("em",{parentName:"p"},".env")," file in the project folder, and populate it with the required\nenvironment variables (replacing ",(0,o.yg)("inlineCode",{parentName:"p"},"<client-id>")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"<client-secret>")," with your APS Client ID\nand Client Secret, and ",(0,o.yg)("inlineCode",{parentName:"p"},"<secret-phrase>")," with an arbitrary string):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:'language-title=".env"'},'APS_CLIENT_ID="<client-id>"\nAPS_CLIENT_SECRET="<client-secret>"\nAPS_CALLBACK_URL="http://localhost:8080/api/auth/callback" # URL your users will be redirected to after logging in with their Autodesk account\nSERVER_SESSION_SECRET="<secret-phrase>" # secret phrase used to encrypt/decrypt server session cookies\n')),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"Since the ",(0,o.yg)("inlineCode",{parentName:"p"},".env")," file contains sensitive information, make sure that it is ",(0,o.yg)("strong",{parentName:"p"},"not")," included in git!\nThis can be ensured by adding the ",(0,o.yg)("inlineCode",{parentName:"p"},".env")," line to the ",(0,o.yg)("a",{parentName:"p",href:"https://git-scm.com/docs/gitignore"},".gitignore")," file.")),(0,o.yg)("p",null,"Now, in order to be able to run and debug our application from Visual Studio Code, we need to create\na ",(0,o.yg)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/debugging#_launch-configurations"},"launch configuration"),".\nUse ",(0,o.yg)("em",{parentName:"p"},"Run > Add Configuration")," in the menu to create a new configuration, and when prompted\nfor the specific environment, choose ",(0,o.yg)("em",{parentName:"p"},"Node.js"),". This will create a new ",(0,o.yg)("em",{parentName:"p"},".vscode"),"\nsubfolder in your project with a ",(0,o.yg)("em",{parentName:"p"},"launch.json")," file where you can define different\nlaunch configurations. Replace the content of the file with the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:'title=".vscode/launch.json"',title:'".vscode/launch.json"'},'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "type": "node",\n            "request": "launch",\n            "name": "Launch Server",\n            "runtimeExecutable": "npm",\n            "runtimeArgs": [\n                "start"\n            ],\n            "skipFiles": [\n                "<node_internals>/**/*.js"\n            ]\n        }\n    ]\n}\n')),(0,o.yg)("p",null,"We are defining a single launch configuration called ",(0,o.yg)("em",{parentName:"p"},"Launch Server")," that will simply\nstart our application using the ",(0,o.yg)("inlineCode",{parentName:"p"},"npm start")," command."))}u.isMDXComponent=!0;const g={toc:[]},d="wrapper";function m(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Create a ",(0,o.yg)("inlineCode",{parentName:"p"},"server.js")," file in the root of your project folder with the following code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst session = require('cookie-session');\nconst { PORT, SERVER_SESSION_SECRET } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\napp.use(session({ secret: SERVER_SESSION_SECRET, maxAge: 24 * 60 * 60 * 1000 }));\napp.listen(PORT, () => console.log(`Server listening on port ${PORT}...`));\n")),(0,o.yg)("p",null,"For now the server isn't doing much, just serving client side assets from the ",(0,o.yg)("inlineCode",{parentName:"p"},"wwwroot")," subfolder,\nand accessing session data stored in cookies. The cookies will be encrypted using a secret phrase\nthat we will need to pass to the application via the environment variable ",(0,o.yg)("inlineCode",{parentName:"p"},"SERVER_SESSION_SECRET"),"."),(0,o.yg)("p",null,"Next, let's add a ",(0,o.yg)("inlineCode",{parentName:"p"},'"start": "node server.js"')," script to the ",(0,o.yg)("inlineCode",{parentName:"p"},"package.json")," file so that we can\neasily run our application later:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'// ...\n"scripts": {\n    "start": "node server.js"\n}\n// ...\n')))}m.isMDXComponent=!0;const h={toc:[]},y="wrapper";function f(e){let{components:n,...t}=e;return(0,o.yg)(y,(0,a.A)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Start the application from Visual Studio Code (for example, via the ",(0,o.yg)("em",{parentName:"p"},"Run > Start Debugging"),"\nmenu, or by pressing ",(0,o.yg)("inlineCode",{parentName:"p"},"F5"),"), and navigate to ",(0,o.yg)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080"),"\nin the browser. The server should respond with ",(0,o.yg)("inlineCode",{parentName:"p"},"Cannot GET /")," because we haven't added any\nlogic to it yet. That's going to be the topic of the next step."))}f.isMDXComponent=!0;const N={toc:[]},w="wrapper";function v(e){let{components:n,...t}=e;return(0,o.yg)(w,(0,a.A)({},N,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Create a ",(0,o.yg)("inlineCode",{parentName:"p"},"Startup.cs")," file in the root folder of your project with the following content:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup.cs"',title:'"Startup.cs"'},'using System;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    // This method gets called by the runtime. Use this method to add services to the container.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddControllers();\n        var clientID = Configuration["APS_CLIENT_ID"];\n        var clientSecret = Configuration["APS_CLIENT_SECRET"];\n        var callbackURL = Configuration["APS_CALLBACK_URL"];\n        if (string.IsNullOrEmpty(clientID) || string.IsNullOrEmpty(clientSecret) || string.IsNullOrEmpty(callbackURL))\n        {\n            throw new ApplicationException("Missing required environment variables APS_CLIENT_ID, APS_CLIENT_SECRET, or APS_CALLBACK_URL.");\n        }\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseDefaultFiles();\n        app.UseStaticFiles();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n')),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"Startup"),' class is responsible for configuring our server and its "middleware" (for example,\nserving of static files), and for retrieving the configuration intpus from environment variables\n(or from other ',(0,o.yg)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0#configuration-providers"},"configuration providers"),")\nfor later use."),(0,o.yg)("p",null,"Now, to pass actual configuration values to our application for debugging purposes,\nwe will modify the ",(0,o.yg)("em",{parentName:"p"},"appsettings.Development.json")," file in our project folder\n(or create one of it does not exist) with the following content, replacing\n",(0,o.yg)("inlineCode",{parentName:"p"},"<client-id>")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"<client-secret>")," with your APS Client ID and Client Secret:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "Logging": {\n    "LogLevel": {\n      "Default": "Information",\n      "Microsoft.AspNetCore": "Warning"\n    }\n  },\n  "APS_CLIENT_ID": "<client-id>",\n  "APS_CLIENT_SECRET": "<client-secret>",\n  "APS_CALLBACK_URL": "http://localhost:8080/api/auth/callback"\n}\n')),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"Since the ",(0,o.yg)("em",{parentName:"p"},"appsettings.Development.json")," file contains sensitive information, make sure that it is ",(0,o.yg)("strong",{parentName:"p"},"not")," included in git!\nThis can be ensured by adding the ",(0,o.yg)("inlineCode",{parentName:"p"},"appsettings.Development.json")," line to the ",(0,o.yg)("a",{parentName:"p",href:"https://git-scm.com/docs/gitignore"},".gitignore")," file.")))}v.isMDXComponent=!0;const b={toc:[]},C="wrapper";function S(e){let{components:n,...t}=e;return(0,o.yg)(C,(0,a.A)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Replace the content of ",(0,o.yg)("inlineCode",{parentName:"p"},"Program.cs")," with the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},"using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n\n    public static IHostBuilder CreateHostBuilder(string[] args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =>\n            {\n                webBuilder.UseStartup<Startup>();\n            });\n}\n")),(0,o.yg)("p",null,"This code will make sure that the .NET application creates a web server with our\nnew ",(0,o.yg)("inlineCode",{parentName:"p"},"Startup")," class."),(0,o.yg)("p",null,"And finally, let's update the ",(0,o.yg)("inlineCode",{parentName:"p"},"launchSettings.json")," file under the ",(0,o.yg)("inlineCode",{parentName:"p"},"Properties")," folder to make\nsure that our server app is using the default protocol (HTTP) and port (8080) that we\nwill use throughout this tutorial. Update the ",(0,o.yg)("inlineCode",{parentName:"p"},"applicationUrl")," property of the default\nlaunch profile to ",(0,o.yg)("inlineCode",{parentName:"p"},"http://localhost:8080"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "iisSettings": {\n    "windowsAuthentication": false,\n    "anonymousAuthentication": true,\n    "iisExpress": {\n      "applicationUrl": "http://localhost:38524",\n      "sslPort": 44323\n    }\n  },\n  "profiles": {\n    "my_aps_app": {\n      "commandName": "Project",\n      "dotnetRunMessages": true,\n      "launchBrowser": true,\n      // highlight-start\n      "applicationUrl": "http://localhost:8080",\n      // highlight-end\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development"\n      }\n    },\n    "IIS Express": {\n      "commandName": "IISExpress",\n      "launchBrowser": true,\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development"\n      }\n    }\n  }\n}\n')))}S.isMDXComponent=!0;const A={toc:[]},E="wrapper";function T(e){let{components:n,...t}=e;return(0,o.yg)(E,(0,a.A)({},A,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Replace the content of ",(0,o.yg)("inlineCode",{parentName:"p"},"Program.cs")," with the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},"using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n\n    public static IHostBuilder CreateHostBuilder(string[] args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =>\n            {\n                webBuilder.UseStartup<Startup>();\n            });\n}\n")),(0,o.yg)("p",null,"This code will make sure that the .NET application creates a web server with our\nnew ",(0,o.yg)("inlineCode",{parentName:"p"},"Startup")," class."),(0,o.yg)("p",null,"And finally, let's update the ",(0,o.yg)("inlineCode",{parentName:"p"},"launchSettings.json")," file under the ",(0,o.yg)("inlineCode",{parentName:"p"},"Properties")," folder to make\nsure that our server app is using the default protocol (HTTP) and port (8080) that we\nwill use throughout this tutorial. Update the ",(0,o.yg)("inlineCode",{parentName:"p"},"applicationUrl")," property of the default\nlaunch profile to ",(0,o.yg)("inlineCode",{parentName:"p"},"http://localhost:8080"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "iisSettings": {\n    "windowsAuthentication": false,\n    "anonymousAuthentication": true,\n    "iisExpress": {\n      "applicationUrl": "http://localhost:38524",\n      "sslPort": 44323\n    }\n  },\n  "profiles": {\n    "MyApsApp": {\n      "commandName": "Project",\n      "dotnetRunMessages": true,\n      "launchBrowser": true,\n      // highlight-start\n      "applicationUrl": "http://localhost:8080",\n      // highlight-end\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development"\n      }\n    },\n    "IIS Express": {\n      "commandName": "IISExpress",\n      "launchBrowser": true,\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development"\n      }\n    }\n  }\n}\n')))}T.isMDXComponent=!0;const k={toc:[]},_="wrapper";function I(e){let{components:n,...t}=e;return(0,o.yg)(_,(0,a.A)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Create a new folder for your project, navigate to it in the command line, and initialize a new\nASP.NET Core project:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"dotnet new web\n")),(0,o.yg)("p",null,"Next we will need to install the dependencies. In this case it will be the required APS SDK packages:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"dotnet add package Autodesk.Authentication\ndotnet add package Autodesk.DataManagement\ndotnet add package Adsk.Platform.ACC.AccountAdmin\ndotnet add package Autodesk.Construction.Issues \n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"*.csproj")," file in your project should now look similar to this (possibly with\nslightly different version numbers, and additional .NET settings):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-xml"},'<Project Sdk="Microsoft.NET.Sdk.Web">\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <RootNamespace>aps_acc_issues_dotnet_vscode</RootNamespace>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include="Adsk.Platform.ACC.AccountAdmin" Version="0.1.4" />\n    <PackageReference Include="Autodesk.Authentication" Version="2.0.0" />\n    <PackageReference Include="Autodesk.Construction.Issues" Version="2.1.2" />\n    <PackageReference Include="Autodesk.DataManagement" Version="2.0.1" />\n  </ItemGroup>\n</Project>\n\n')),(0,o.yg)("p",null,"Finally, let's create a couple more subfolders in your project folder that we're going to need later:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"Controllers")," - this is where we're going to implement all the server endpoints"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"Models")," - here we're going to keep all the server-side logic that can be shared by different endpoints"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"wwwroot")," - this is where we're going to put all the client side assets (HTML, CSS, JavaScript, images, etc.)")),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"If the ",(0,o.yg)("inlineCode",{parentName:"p"},".vscode")," folder is not created automatically, you can create it via the Run & Debug sidepanel")),(0,o.yg)("p",null,"To create the ",(0,o.yg)("inlineCode",{parentName:"p"},".vscode")," folder click on the ",(0,o.yg)("em",{parentName:"p"},"Run and Debug tool on the left sidepanel > create a launch.json file > Select .NET & .NET Core"),"."))}I.isMDXComponent=!0;const j={toc:[]},D="wrapper";function P(e){let{components:n,...t}=e;return(0,o.yg)(D,(0,a.A)({},j,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Start the application from Visual Studio Code (for example, via the ",(0,o.yg)("em",{parentName:"p"},"Run > Start Debugging"),"\nmenu, or by pressing ",(0,o.yg)("inlineCode",{parentName:"p"},"F5"),"), and navigate to ",(0,o.yg)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080"),"\nin the browser. The server should respond with a 404 error because we haven't added any\nlogic to it just yet. That's going to be the topic of the next step."))}P.isMDXComponent=!0;var x=t(4572);const R={toc:[]},L="wrapper";function M(e){let{components:n,...r}=e;return(0,o.yg)(L,(0,a.A)({},R,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Next we will need to install the dependencies. In this case it will be a couple of modules\nof the official APS SDK. In the ",(0,o.yg)("em",{parentName:"p"},"Solution Explorer"),",\nright-click on ",(0,o.yg)("em",{parentName:"p"},"Dependencies"),", and then click on ",(0,o.yg)("em",{parentName:"p"},"Manage NuGet Packages..."),":"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Manage NuGet dependencies",src:t(1167).A,width:"1107",height:"700"})),(0,o.yg)("p",null,"In the ",(0,o.yg)("em",{parentName:"p"},"NuGet Package Manager"),", switch to the ",(0,o.yg)("em",{parentName:"p"},"Browse")," tab, and search for and install\nthe following packages:"),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"At the writing of this documentation, the tutorial sample is using the specified version next to the package name.")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.nuget.org/packages/Autodesk.Authentication/2.0.0"},"Autodesk.Authentication v2.0.0")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.nuget.org/packages/Autodesk.DataManagement/2.0.2"},"Autodesk.DataManagement v2.0.2")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.nuget.org/packages/Autodesk.Construction.Issues/2.1.2"},"Autodesk.Construction.Issues v2.1.2")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.nuget.org/packages/Autodesk.Construction.AccountAdmin/2.1.0"},"Autodesk.Construction.AccountAdmin v2.0.1")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.NewtonsoftJson/6.0.2"},"Microsoft.AspNetCore.Mvc.NewtonsoftJson v6.0.2"))))}M.isMDXComponent=!0;const O={toc:[]},V="wrapper";function U(e){let{components:n,...t}=e;return(0,o.yg)(V,(0,a.A)({},O,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)(x.Ay,{mdxType:"SetupVS2022"}),(0,o.yg)(M,{mdxType:"AddDependencies"}))}U.isMDXComponent=!0;const B={toc:[]},X="wrapper";function q(e){let{components:n,...t}=e;return(0,o.yg)(X,(0,a.A)({},B,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Start the application from Visual Studio (for example, via the ",(0,o.yg)("em",{parentName:"p"},"Debug > Start Debugging"),"\nmenu, or by pressing ",(0,o.yg)("inlineCode",{parentName:"p"},"F5"),"), and it will automatically open ",(0,o.yg)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080"),"\nin your browser. You should get a 404 response because we haven't implemented any server logic yet.\nThat's going to be the goal of the next step."))}q.isMDXComponent=!0;const H={},K="Application Setup",F={unversionedId:"tutorials/acc-issues/setup",id:"tutorials/acc-issues/setup",title:"Application Setup",description:"Let's start by creating a new project, installing required dependencies, and setting up",source:"@site/docs/03-tutorials/06-acc-issues/01-setup.mdx",sourceDirName:"03-tutorials/06-acc-issues",slug:"/tutorials/acc-issues/setup",permalink:"/tutorials/acc-issues/setup",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/06-acc-issues/01-setup.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ACC Issues (beta)",permalink:"/tutorials/acc-issues/"},next:{title:"Authentication",permalink:"/tutorials/acc-issues/auth"}},J={},W=[{value:"Create project",id:"create-project",level:2},{value:"Application config",id:"application-config",level:2},{value:"Create basic server",id:"create-basic-server",level:2},{value:"Try it out",id:"try-it-out",level:2}],G={toc:W},z="wrapper";function $(e){let{components:n,...t}=e;return(0,o.yg)(z,(0,a.A)({},G,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"application-setup"},"Application Setup"),(0,o.yg)("p",null,"Let's start by creating a new project, installing required dependencies, and setting up\na basic server application."),(0,o.yg)("h2",{id:"create-project"},"Create project"),(0,o.yg)(r.A,{NodeJsVsCode:l,DotNetVsCode:I,DotNetVs2022:U,mdxType:"EnvTabs"}),(0,o.yg)("h2",{id:"application-config"},"Application config"),(0,o.yg)("p",null,"Our application will require a couple of configuration parameters to run properly, for example,\nthe credentials of APS app for communicating with Autodesk Platform Services, the callback URL\nwhere the end users will be redirected to login to authorize the application to access their data of ACC\uff0c i.e.",(0,o.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/oauth/v2/tutorials/get-3-legged-token/"},"3-legged authentication workflow"),".\nThese parameters (as environment variables) will be loaded to application runtime environment."),(0,o.yg)(r.A,{NodeJsVsCode:u,DotNetVsCode:v,DotNetVs2022:v,mdxType:"EnvTabs"}),(0,o.yg)("h2",{id:"create-basic-server"},"Create basic server"),(0,o.yg)(r.A,{NodeJsVsCode:m,DotNetVsCode:S,DotNetVs2022:T,mdxType:"EnvTabs"}),(0,o.yg)("h2",{id:"try-it-out"},"Try it out"),(0,o.yg)(r.A,{NodeJsVsCode:f,DotNetVsCode:P,DotNetVs2022:q,mdxType:"EnvTabs"}))}$.isMDXComponent=!0},1167:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/manage-nugets-1eab7cd026f7d73439c9063264b9b7e4.webp"},2512:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/configure-project-b48d3053b5ea342d552d7694d51e47ca.webp"},4336:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/create-project-3eac278d9a7b3b12327e8ef2caf2136e.webp"},4472:(e,n,t)=>{t.d(n,{A:()=>i});var a=t(6540),o=t(9489),r=t(7227);function i(e){let{NodeJsVsCode:n,DotNetVsCode:t,DotNetVs2022:i}=e;return a.createElement(o.A,{groupId:"development-environment"},a.createElement(r.A,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},a.createElement(n,null)),a.createElement(r.A,{value:"dotnet-vscode",label:".NET & VSCode"},a.createElement(t,null)),a.createElement(r.A,{value:"dotnet-vs2022",label:".NET & VS2022"},a.createElement(i,null)))}},4572:(e,n,t)=>{t.d(n,{Ay:()=>s});var a=t(8168),o=(t(6540),t(5680));const r={toc:[]},i="wrapper";function s(e){let{components:n,...s}=e;return(0,o.yg)(i,(0,a.A)({},r,s,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Create a new project in Visual Studio:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Create a new project",src:t(4336).A,width:"1014",height:"675"})),(0,o.yg)("p",null,"Choose the ",(0,o.yg)("em",{parentName:"p"},"ASP.NET Core Empty")," template:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Choose a template",src:t(9098).A,width:"1014",height:"675"})),(0,o.yg)("p",null,"Name the project any way you want:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Configure project",src:t(2512).A,width:"1014",height:"675"})),(0,o.yg)("p",null,"Choose the ",(0,o.yg)("em",{parentName:"p"},".NET 8.0 (Long-term support)")," framework, and disable HTTPS as we don't need it for now:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Additional information",src:t(7132).A,width:"2141",height:"1640"})),(0,o.yg)("p",null,"Once the project is ready, create the following subfolders in your project folder:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"Controllers")," - this is where we're going to implement all the server endpoints"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"Models")," - here we're going to keep all the server-side logic that can be shared by different endpoints"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"wwwroot")," - this is where we're going to put all the client side assets (HTML, CSS, JavaScript, images, etc.)")))}s.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var a=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,m=u["".concat(l,".").concat(d)]||u[d]||g[d]||r;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7132:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/additional-info-83e06d36b6ac1e39ff09a587307a3326.webp"},7227:(e,n,t)=>{t.d(n,{A:()=>i});var a=t(6540),o=t(53);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.A)(r.tabItem,i),hidden:t},n)}},9098:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/choose-template-0eaf8f177132a1714c44dc3d5409762a.webp"},9489:(e,n,t)=>{t.d(n,{A:()=>b});var a=t(8168),o=t(6540),r=t(53),i=t(4245),s=t(6347),l=t(2814),p=t(5167),c=t(1269);function u(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:o}}=e;return{value:n,label:t,attributes:a,default:o}}))}function g(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,p.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(r),(0,o.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=g(e),[i,s]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[l,p]=m({queryString:t,groupId:a}),[u,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,c.Dv)(t);return[a,(0,o.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),y=(()=>{const e=l??u;return d({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),h(e)}),[p,h,r]),tabValues:r}}var y=t(1062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.a_)(),g=e=>{const n=e.currentTarget,t=c.indexOf(n),a=p[t].value;a!==s&&(u(n),l(a))},d=e=>{let n=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:i}=e;return o.createElement("li",(0,a.A)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:g},i,{className:(0,r.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":s===n})}),t??n)})))}function w(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function v(e){const n=h(e);return o.createElement("div",{className:(0,r.A)("tabs-container",f.tabList)},o.createElement(N,(0,a.A)({},e,n)),o.createElement(w,(0,a.A)({},e,n)))}function b(e){const n=(0,y.A)();return o.createElement(v,(0,a.A)({key:String(n)},e))}}}]);