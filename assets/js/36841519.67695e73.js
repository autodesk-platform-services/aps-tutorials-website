"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[8],{4472:(e,t,s)=>{s.d(t,{A:()=>a});var n=s(6540),r=s(9489),o=s(7227);function a(e){let{NodeJsVsCode:t,DotNetVsCode:s,DotNetVs2022:a}=e;return n.createElement(r.A,{groupId:"development-environment"},n.createElement(o.A,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},n.createElement(t,null)),n.createElement(o.A,{value:"dotnet-vscode",label:".NET & VSCode"},n.createElement(s,null)),n.createElement(o.A,{value:"dotnet-vs2022",label:".NET & VS2022"},n.createElement(a,null)))}},5680:(e,t,s)=>{s.d(t,{xA:()=>c,yg:()=>y});var n=s(6540);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function o(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function a(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?o(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function i(e,t){if(null==e)return{};var s,n,r=function(e,t){if(null==e)return{};var s,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)s=o[n],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)s=o[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var u=n.createContext({}),l=function(e){var t=n.useContext(u),s=t;return e&&(s="function"==typeof e?e(t):a(a({},t),e)),s},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var s=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(s),f=r,y=p["".concat(u,".").concat(f)]||p[f]||d[f]||o;return s?n.createElement(y,a(a({ref:t},c),{},{components:s})):n.createElement(y,a({ref:t},c))}));function y(e,t){var s=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=s.length,a=new Array(o);a[0]=f;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:r,a[1]=i;for(var l=2;l<o;l++)a[l]=s[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,s)}f.displayName="MDXCreateElement"},7227:(e,t,s)=>{s.d(t,{A:()=>a});var n=s(6540),r=s(53);const o={tabItem:"tabItem_Ymn6"};function a(e){let{children:t,hidden:s,className:a}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,a),hidden:s},t)}},7681:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/issue-subtypes-2e19d721e6300637f45b8513d1fc752d.webp"},8231:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>C,contentTitle:()=>I,default:()=>A,frontMatter:()=>h,metadata:()=>v,toc:()=>w});var n=s(8168),r=(s(6540),s(5680)),o=s(4472);const a={toc:[]},i="wrapper";function u(e){let{components:t,...s}=e;return(0,r.yg)(i,(0,n.A)({},a,s,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"We will start by importing the issue settings helper functions defined in ",(0,r.yg)("inlineCode",{parentName:"p"},"services/aps.js")," file. Add the following content to ",(0,r.yg)("inlineCode",{parentName:"p"},"routes/issues.js")," file."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/issues.js"',title:'"routes/issues.js"'},"const { authRefreshMiddleware,\n        getIssues,\n        createOrModifyIssues \n        // highlight-start\n        getIssueSubtypes,\n        getIssueRootcauses,\n        getIssueCustomAttributesDefs,\n        getIssueUserProfile\n        // highlight-end\n        } = require('../services/aps.js');\n\nrouter.get('/api/issues/subtypes', async function(req, res, next){\n    try {\n        const subTypes = await getIssueSubtypes(req.query.projectId,req.internalOAuthToken.access_token);\n        res.json(subTypes);\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.get('/api/issues/rootcauses', async function(req, res, next){\n    try {\n        const rootcauses = await getIssueRootcauses(req.query.projectId,req.internalOAuthToken.access_token);\n        res.json(rootcauses);\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.get('/api/issues/customAttDefs', async function(req, res, next){\n    try {\n        const customAttributes = await getIssueCustomAttributesDefs(req.query.projectId,req.internalOAuthToken.access_token);\n        res.json(customAttributes);\n    } catch (err) {\n        next(err);\n    }\n});\n\n\nrouter.get('/api/issues/issueUserProfile', async function(req, res, next){\n    try {\n        const issueUserProfile = await getIssueUserProfile(req.query.projectId,req.internalOAuthToken.access_token);\n        res.json([issueUserProfile]);\n    } catch (err) {\n        next(err);\n    }\n});\n")))}u.isMDXComponent=!0;const l={toc:[]},c="wrapper";function p(e){let{components:t,...s}=e;return(0,r.yg)(c,(0,n.A)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"We will append a couple of helper functions below to the end of the ",(0,r.yg)("inlineCode",{parentName:"p"},"services/aps.js")," file, for fetching related issue settings."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'}," // Issue Settings\n\n//get issue sub types setting\nservice.getIssueSubtypes = async (projectId, token) => {\n    let allSubtypes = [];\n    let offset = 0;\n    let totalResults = 0;\n    do{\n    \n        const resp = await issuesClient.getIssuesTypes(projectId, {accessToken:token,include:'subtypes',offset:offset});\n        let eachPage = resp.results.flatMap(item => item.subtypes);\n        allSubtypes = allSubtypes.concat(eachPage);\n        offset += resp.pagination.limit;\n        totalResults = resp.pagination.totalResults;\n    }while (offset < totalResults) \n    return allSubtypes;\n};\n\n//get issue root causes setting\nservice.getIssueRootcauses = async (projectId, token) => {\n    let allRootcauses = [];\n    let offset = 0;\n    let totalResults = 0;\n    do{\n    \n        const resp = await issuesClient.getRootCauseCategories(projectId, {accessToken:token,include:'rootcauses',offset:offset});\n        let eachPage = resp.results.flatMap(item => item.rootCauses);\n        allRootcauses = allRootcauses.concat(eachPage);\n        offset += resp.pagination.limit;\n        totalResults = resp.pagination.totalResults;\n    }while (offset < totalResults) \n    return allRootcauses;\n};\n\n//get custom attributes definitions\nservice.getIssueCustomAttributesDefs = async (projectId, token) => {\n    let allCustomAttributesDefs = [];\n    let offset = 0;\n    let totalResults = 0;\n    do{\n    \n        const resp = await issuesClient.getAttributeDefinitions(projectId, {accessToken:token,offset:offset});\n        allCustomAttributesDefs = allCustomAttributesDefs.concat( resp.results);\n        offset += resp.pagination.limit;\n        totalResults = resp.pagination.totalResults;\n    }while (offset < totalResults) \n    return allCustomAttributesDefs;\n}; \n\n//get issue permissions of the user\nservice.getIssueUserProfile= async (projectId, token) => {\n    \n    const resp = await issuesClient.getUserProfile(projectId, {accessToken:token});\n    return resp\n}; \n")))}p.isMDXComponent=!0;const d={toc:[]},f="wrapper";function y(e){let{components:t,...s}=e;return(0,r.yg)(f,(0,n.A)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Append the following endpoints on ",(0,r.yg)("inlineCode",{parentName:"p"},"IssuesController.cs")," file, under ",(0,r.yg)("inlineCode",{parentName:"p"},"Controllers")," folder"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="Controllers/IssuesController"',title:'"Controllers/IssuesController"'},'   [HttpGet("subtypes")]\n   public async Task<ActionResult<string>> ListIssuesSubTypes( string projectId)\n   {\n       var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n       if (tokens == null)\n       {\n           return Unauthorized();\n       }\n\n       var subtypes = await _aps.GetIssueSubTypes(Request.Query["projectId"], tokens);\n       return JsonConvert.SerializeObject(subtypes);\n   }\n\n   [HttpGet("rootcauses")]\n   public async Task<ActionResult<string>> ListRootCauses( string projectId)\n   {\n       var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n       if (tokens == null)\n       {\n           return Unauthorized();\n       }\n\n       var rootcauses = await _aps.GetIssueRootcauses(Request.Query["projectId"], tokens);\n       return JsonConvert.SerializeObject(rootcauses);\n   }\n\n   [HttpGet("customAttDefs")]\n   public async Task<ActionResult<string>> ListCustomAttDefs( string projectId)\n   {\n       var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n       if (tokens == null)\n       {\n           return Unauthorized();\n       }\n\n       var attdefs = await _aps.GetIssueCustomAttDefs(Request.Query["projectId"], tokens);\n       return JsonConvert.SerializeObject(attdefs);\n   } \n\n    [HttpGet("issueUserProfile")]\n    public async Task<ActionResult<string>> IssueUserProfile(string projectId)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n        var list = new List<Autodesk.Construction.Issues.Model.User>(); //to feed the table view of client side. build a dummy json array.\n        var userInfo = await _aps.GetIssueUserProfile(Request.Query["projectId"], tokens);\n        list.Add(userInfo);\n        return JsonConvert.SerializeObject(list, settings); ;\n    }\n\n')))}y.isMDXComponent=!0;const g={toc:[]},m="wrapper";function b(e){let{components:t,...s}=e;return(0,r.yg)(m,(0,n.A)({},g,s,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Add the following content on ",(0,r.yg)("inlineCode",{parentName:"p"},"APS.Issues.cs")," file under ",(0,r.yg)("inlineCode",{parentName:"p"},"Models")," folder"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="Models/APS.Issues.cs"',title:'"Models/APS.Issues.cs"'},' // Issue Settings\n\n//get issue sub types setting\npublic async Task<IEnumerable<dynamic>> GetIssueSubTypes(string projectId, Tokens tokens)\n{\n    IssuesClient issueClient = new IssuesClient(_SDKManager);\n    var allSubIssueTypes = new List<IssueTypeResultsSubtypes>();\n    var offset = 0;\n    var totalResult = 0;\n    do\n    {\n        var issueTypes = await issueClient.GetIssuesTypesAsync(projectId, accessToken: tokens.InternalToken, include: "subtypes", offset: offset);\n        List<IssueTypeResultsSubtypes> eachPage = issueTypes.Results\n        .Where(type => type.Subtypes != null && type.Subtypes.Any()) // Skip type with empty subtypes\n        .SelectMany(type => type.Subtypes)  // Flatten the non-empty subtypes lists\n        .ToList();\n\n        allSubIssueTypes.AddRange(eachPage);\n        offset += (int)issueTypes.Pagination.Limit;\n        totalResult = (int)issueTypes.Pagination.TotalResults;\n    } while (offset < totalResult);\n    return allSubIssueTypes;\n}\n\n//get issue root causes setting\npublic async Task<IEnumerable<dynamic>> GetIssueRootcauses(string projectId, Tokens tokens)\n{\n    IssuesClient issueClient = new IssuesClient(_SDKManager);\n    var allRootcauses = new List<IssueRootCauseResultsRootCauses>();\n    var offset = 0;\n    var totalResult = 0;\n    do\n    {\n        var categories = await issueClient.GetRootCauseCategoriesAsync(projectId, accessToken: tokens.InternalToken, include: "rootcauses", offset: offset);\n        List<IssueRootCauseResultsRootCauses> eachPage = categories.Results\n        .Where(type => type.RootCauses != null && type.RootCauses.Any()) // Skip categories with empty rootcasues lists\n        .SelectMany(type => type.RootCauses)  // Flatten the non-empty rootcasues lists\n        .ToList();\n\n        allRootcauses.AddRange(eachPage);\n        offset += (int)categories.Pagination.Limit;\n        totalResult = (int)categories.Pagination.TotalResults;\n    } while (offset < totalResult);\n    return allRootcauses;\n}\n\n//get custom attributes definitions\npublic async Task<IEnumerable<dynamic>> GetIssueCustomAttDefs(string projectId, Tokens tokens)\n{\n    IssuesClient issueClient = new IssuesClient(_SDKManager);\n    var allCustomAttDefs = new List<AttrDefinitionResults>();\n    var offset = 0;\n    var totalResult = 0;\n    do\n    {\n        var attdefs = await issueClient.GetAttributeDefinitionsAsync(projectId, accessToken: tokens.InternalToken, offset: offset);\n\n        allCustomAttDefs.AddRange(attdefs.Results);\n        offset += (int)attdefs.Pagination.Limit;\n        totalResult = (int)attdefs.Pagination.TotalResults;\n    } while (offset < totalResult);\n    return allCustomAttDefs;\n}\n\n//get user permission in Issue\npublic async Task<Autodesk.Construction.Issues.Model.User> GetIssueUserProfile(string projectId, Tokens tokens)\n{\n    IssuesClient issueClient = new IssuesClient(_SDKManager);\n    var userInfo = await issueClient.GetUserProfileAsync(projectId, accessToken: tokens.InternalToken);\n    return userInfo;\n}\n')))}b.isMDXComponent=!0;const h={},I="Issue Settings",v={unversionedId:"tutorials/acc-issues/settings",id:"tutorials/acc-issues/settings",title:"Issue Settings",description:"In the previous step, we extracted raw issue data. Some fields contain specific IDs like Issue Sub Type and Root Cause,",source:"@site/docs/03-tutorials/06-acc-issues/05-settings.mdx",sourceDirName:"03-tutorials/06-acc-issues",slug:"/tutorials/acc-issues/settings",permalink:"/tutorials/acc-issues/settings",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/06-acc-issues/05-settings.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Project Issues",permalink:"/tutorials/acc-issues/issues"},next:{title:"Project Admin",permalink:"/tutorials/acc-issues/admin"}},C={},w=[{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],T={toc:w},k="wrapper";function A(e){let{components:t,...a}=e;return(0,r.yg)(k,(0,n.A)({},T,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"issue-settings"},"Issue Settings"),(0,r.yg)("p",null,"In the previous step, we extracted raw issue data. Some fields contain specific IDs like ",(0,r.yg)("inlineCode",{parentName:"p"},"Issue Sub Type")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Root Cause"),",\nwhile ",(0,r.yg)("inlineCode",{parentName:"p"},"Custom Attributes")," follow an id-value pair pattern. These are all part of the Issue Settings. To retrieve their full details, we'll need to make additional API calls to the Issues endpoints."),(0,r.yg)("p",null,"In addition, the APIs permissions follows the user permission setting of the logged user, who authorizes this sample to manipulate the issues. We will also add one more help function to get the user permissions."),(0,r.yg)(o.A,{NodeJsVsCode:p,DotNetVsCode:b,DotNetVs2022:b,mdxType:"EnvTabs"}),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("strong",{parentName:"p"},"Issue Sub Type")," is a child of ",(0,r.yg)("strong",{parentName:"p"},"Issue Type")," . This sample iterates each type,\nextracts its sub types to build the collection. Similarly, ",(0,r.yg)("strong",{parentName:"p"},"Issue Root Cause")," is a child of ",(0,r.yg)("strong",{parentName:"p"},"Issue Root Cause Caregory"),".\nThis sample iterates each category , extracts its root causes to build the collection. The corresponding APIs also return types or categories in ",(0,r.yg)("strong",{parentName:"p"},"pagination"),"."),(0,r.yg)("p",{parentName:"admonition"},"No API yet to get ",(0,r.yg)("a",{parentName:"p",href:"https://help.autodesk.com/view/BUILD/ENU/?guid=Issues_Permissions"},"Issues Permission")," table like ACC UI does. Current API supports to fetch the logged user permission only.")),(0,r.yg)("h2",{id:"server-endpoints"},"Server endpoints"),(0,r.yg)("p",null,"Next, let's expose the routes to retrieve issue settings to the client-side code through another\nset of endpoints. "),(0,r.yg)(o.A,{NodeJsVsCode:u,DotNetVsCode:y,DotNetVs2022:y,mdxType:"EnvTabs"}),(0,r.yg)("h2",{id:"try-it-out"},"Try it out"),(0,r.yg)("p",null,"And that's it for the server side. Time to try it out!"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Use same project ID in previous step (remove b.) and try to call the endpoint:\n",(0,r.yg)("a",{parentName:"li",href:"http://localhost:8080/api/issues/subtypes?projectId=%7Byour-project-id%7D"},"http://localhost:8080/api/issues/subtypes?projectId={your-project-id}"),", the server application should\nrespond with a JSON list of all the issue sub types from this project. ")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Issues Response",src:s(7681).A,width:"3432",height:"1290"})))}A.isMDXComponent=!0},9489:(e,t,s)=>{s.d(t,{A:()=>C});var n=s(8168),r=s(6540),o=s(53),a=s(4245),i=s(6347),u=s(2814),l=s(5167),c=s(1269);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:s,attributes:n,default:r}}=e;return{value:t,label:s,attributes:n,default:r}}))}function d(e){const{values:t,children:s}=e;return(0,r.useMemo)((()=>{const e=t??p(s);return function(e){const t=(0,l.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,s])}function f(e){let{value:t,tabValues:s}=e;return s.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:s}=e;const n=(0,i.W6)(),o=function(e){let{queryString:t=!1,groupId:s}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:t,groupId:s});return[(0,u.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function g(e){const{defaultValue:t,queryString:s=!1,groupId:n}=e,o=d(e),[a,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=s.find((e=>e.default))??s[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[u,l]=y({queryString:s,groupId:n}),[p,g]=function(e){let{groupId:t}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,c.Dv)(s);return[n,(0,r.useCallback)((e=>{s&&o.set(e)}),[s,o])]}({groupId:n}),m=(()=>{const e=u??p;return f({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{m&&i(m)}),[m]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!f({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),l(e),g(e)}),[l,g,o]),tabValues:o}}var m=s(1062);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:s,selectedValue:i,selectValue:u,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,a.a_)(),d=e=>{const t=e.currentTarget,s=c.indexOf(t),n=l[s].value;n!==i&&(p(t),u(n))},f=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;t=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;t=c[s]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":s},t)},l.map((e=>{let{value:t,label:s,attributes:a}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:f,onClick:d},a,{className:(0,o.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":i===t})}),s??t)})))}function I(e){let{lazy:t,children:s,selectedValue:n}=e;const o=(Array.isArray(s)?s:[s]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=g(e);return r.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},r.createElement(h,(0,n.A)({},e,t)),r.createElement(I,(0,n.A)({},e,t)))}function C(e){const t=(0,m.A)();return r.createElement(v,(0,n.A)({key:String(t)},e))}}}]);