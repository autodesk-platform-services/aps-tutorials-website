"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[436],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>k,default:()=>w,frontMatter:()=>m,metadata:()=>h,toc:()=>f});var a=n(7462),r=(n(7294),n(4137));const i={toc:[]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create a new folder for your project, navigate to it in the command line,\nand initialize a new Node.js project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\n")),(0,r.kt)("p",null,"Next, install all the Node.js dependencies we're going to use. In this case it will be ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/dotenv"},"dotenv"),"\n(utility for initializing environment variables from a file), ",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com"},"Express.js")," (web framework),\nand ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cookie-session"},"cookie-session")," for handling cookie-based sessions, and finally the necessary APS SDK including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/autodesk-sdkmanager"},"@aps_sdk/autodesk-sdkmanager")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/authentication"},"@aps_sdk/authentication")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/data-management"},"@aps_sdk/data-management")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@aps_sdk/construction-account-admin"},"@aps_sdk/construction-account-admin"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save dotenv express cookie-session \nnpm install --save @aps_sdk/autodesk-sdkmanager @aps_sdk/authentication @aps_sdk/data-management @aps_sdk/construction-account-admin\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},'"dependencies"')," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file should now look something like this\n(potentially with slightly different version numbers):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// ...\n  "dependencies": {\n    "@aps_sdk/authentication": "^1.0.0",\n    "@aps_sdk/autodesk-sdkmanager": "^1.0.0",\n    "@aps_sdk/data-management": "^1.0.0",\n    "@aps_sdk/construction-account-admin": "^1.0.0",\n    "cookie-session": "^2.1.0",\n    "dotenv": "^16.4.5",\n    "express": "^4.19.2"\n  },\n// ...\n')),(0,r.kt)("p",null,"Finally, let's create a couple more subfolders in your project folder that we're going to need later:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wwwroot")," - this is where we're going to put all the client side assets (HTML, CSS, JavaScript, images, etc.)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routes")," - this is where we're going to implement all the server endpoints"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"services")," - here we're going to keep all the server-side logic that can be shared by different endpoints")))}o.isMDXComponent=!0;const s={toc:[]};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"config.js")," file in the root of your project folder, and add the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="config.js"',title:'"config.js"'},"require('dotenv').config();\n\nlet { APS_CLIENT_ID, APS_CLIENT_SECRET, APS_CALLBACK_URL, SERVER_SESSION_SECRET, PORT } = process.env;\nif (!APS_CLIENT_ID || !APS_CLIENT_SECRET || !APS_CALLBACK_URL || !SERVER_SESSION_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\nPORT = PORT || 8080;\n\nmodule.exports = {\n    APS_CLIENT_ID,\n    APS_CLIENT_SECRET,\n    APS_CALLBACK_URL,\n    SERVER_SESSION_SECRET,\n    PORT\n};\n\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"dotenv")," library initializes environment variables from a local ",(0,r.kt)("em",{parentName:"p"},".env")," file (if there's one).\nWe then simply read the environment variables from ",(0,r.kt)("inlineCode",{parentName:"p"},"process.env"),", and exit the application\nimmediately if any of the required properties are missing."),(0,r.kt)("p",null,"Next, let's create the ",(0,r.kt)("em",{parentName:"p"},".env")," file in the project folder, and populate it with the required\nenvironment variables (replacing ",(0,r.kt)("inlineCode",{parentName:"p"},"<client-id>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"<client-secret>")," with your APS Client ID\nand Client Secret, and ",(0,r.kt)("inlineCode",{parentName:"p"},"<secret-phrase>")," with an arbitrary string):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:'language-title=".env"'},'APS_CLIENT_ID="<client-id>"\nAPS_CLIENT_SECRET="<client-secret>"\nAPS_CALLBACK_URL="http://localhost:8080/api/auth/callback" # URL your users will be redirected to after logging in with their Autodesk account\nSERVER_SESSION_SECRET="<secret-phrase>" # secret phrase used to encrypt/decrypt server session cookies\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Since the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file contains sensitive information, make sure that it is ",(0,r.kt)("strong",{parentName:"p"},"not")," included in git!\nThis can be ensured by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," line to the ",(0,r.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitignore"},".gitignore")," file.")),(0,r.kt)("p",null,"Now, in order to be able to run and debug our application from Visual Studio Code, we need to create\na ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/debugging#_launch-configurations"},"launch configuration"),".\nUse ",(0,r.kt)("em",{parentName:"p"},"Run > Add Configuration")," in the menu to create a new configuration, and when prompted\nfor the specific environment, choose ",(0,r.kt)("em",{parentName:"p"},"Node.js"),". This will create a new ",(0,r.kt)("em",{parentName:"p"},".vscode"),"\nsubfolder in your project with a ",(0,r.kt)("em",{parentName:"p"},"launch.json")," file where you can define different\nlaunch configurations. Replace the content of the file with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title=".vscode/launch.json"',title:'".vscode/launch.json"'},'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "type": "node",\n            "request": "launch",\n            "name": "Launch Server",\n            "runtimeExecutable": "npm",\n            "runtimeArgs": [\n                "start"\n            ],\n            "skipFiles": [\n                "<node_internals>/**/*.js"\n            ]\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"We are defining a single launch configuration called ",(0,r.kt)("em",{parentName:"p"},"Launch Server")," that will simply\nstart our application using the ",(0,r.kt)("inlineCode",{parentName:"p"},"npm start")," command."))}p.isMDXComponent=!0;const l={toc:[]};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"server.js")," file in the root of your project folder with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst session = require('cookie-session');\nconst { PORT, SERVER_SESSION_SECRET } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\napp.use(session({ secret: SERVER_SESSION_SECRET, maxAge: 24 * 60 * 60 * 1000 }));\napp.listen(PORT, () => console.log(`Server listening on port ${PORT}...`));\n")),(0,r.kt)("p",null,"For now the server isn't doing much, just serving client side assets from the ",(0,r.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder,\nand accessing session data stored in cookies. The cookies will be encrypted using a secret phrase\nthat we will need to pass to the application via the environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"SERVER_SESSION_SECRET"),"."),(0,r.kt)("p",null,"Next, let's add a ",(0,r.kt)("inlineCode",{parentName:"p"},'"start": "node server.js"')," script to the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file so that we can\neasily run our application later:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// ...\n"scripts": {\n    "start": "node server.js"\n}\n// ...\n')))}c.isMDXComponent=!0;const u={toc:[]};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Start the application from Visual Studio Code (for example, via the ",(0,r.kt)("em",{parentName:"p"},"Run > Start Debugging"),"\nmenu, or by pressing ",(0,r.kt)("inlineCode",{parentName:"p"},"F5"),"), and navigate to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080"),"\nin the browser. The server should respond with ",(0,r.kt)("inlineCode",{parentName:"p"},"Cannot GET /")," because we haven't added any\nlogic to it just yet. That's going to be the topic of the next step."))}d.isMDXComponent=!0;const m={},k="Application Setup",h={unversionedId:"tutorials/acc-admin/setup",id:"tutorials/acc-admin/setup",title:"Application Setup",description:"Let's start by creating a new project, installing required dependencies, and setting up",source:"@site/docs/03-tutorials/05-acc-admin/01-setup.mdx",sourceDirName:"03-tutorials/05-acc-admin",slug:"/tutorials/acc-admin/setup",permalink:"/tutorials/acc-admin/setup",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/05-acc-admin/01-setup.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ACC Administrator",permalink:"/tutorials/acc-admin/"},next:{title:"Authentication",permalink:"/tutorials/acc-admin/auth"}},g={},f=[{value:"Create project",id:"create-project",level:2},{value:"Application config",id:"application-config",level:2},{value:"Create basic server",id:"create-basic-server",level:2},{value:"Try it out",id:"try-it-out",level:2}],v={toc:f};function w(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"application-setup"},"Application Setup"),(0,r.kt)("p",null,"Let's start by creating a new project, installing required dependencies, and setting up\na basic server application."),(0,r.kt)("h2",{id:"create-project"},"Create project"),(0,r.kt)(o,{mdxType:"NodeJsVsCodeProject"}),(0,r.kt)("h2",{id:"application-config"},"Application config"),(0,r.kt)("p",null,"Our application will need a couple of configuration parameters to run properly, for example,\nthe credentials of our APS app for communicating with Autodesk Platform Services, or the callback URL\nwhere our users will be redirected to during the ",(0,r.kt)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/oauth/v2/tutorials/get-3-legged-token/"},"3-legged authentication workflow"),".\nWe will pass these parameters to the server app using environment variables."),(0,r.kt)(p,{mdxType:"NodeJsVsCodeConfig"}),(0,r.kt)("h2",{id:"create-basic-server"},"Create basic server"),(0,r.kt)("p",null,"Next we'll setup a basic server application."),(0,r.kt)(c,{mdxType:"NodeJsVsCodeServer"}),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)(d,{mdxType:"NodeJsVsCodeTest"}))}w.isMDXComponent=!0}}]);