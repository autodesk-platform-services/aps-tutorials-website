"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[5404],{4472:(e,t,n)=>{n.d(t,{A:()=>s});var i=n(6540),a=n(9489),r=n(7227);function s(e){let{NodeJsVsCode:t,DotNetVsCode:n,DotNetVs2022:s}=e;return i.createElement(a.A,{groupId:"development-environment"},i.createElement(r.A,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},i.createElement(t,null)),i.createElement(r.A,{value:"dotnet-vscode",label:".NET & VSCode"},i.createElement(n,null)),i.createElement(r.A,{value:"dotnet-vs2022",label:".NET & VS2022"},i.createElement(s,null)))}},5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>f});var i=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?i.createElement(f,s(s({ref:t},u),{},{components:n})):i.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>y,default:()=>w,frontMatter:()=>f,metadata:()=>g,toc:()=>h});var i=n(8168),a=(n(6540),n(5680)),r=n(9589);const s=n.p+"assets/medias/define-activity-f57d18783180be635e9a68642214f7bf.mp4",o={toc:[]},l="wrapper";function c(e){let{components:t,...n}=e;return(0,a.yg)(l,(0,i.A)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"The following methods should be added to the ",(0,a.yg)("inlineCode",{parentName:"p"},"DesignAutomationController")," class."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"EngineAttributes")),(0,a.yg)("p",null,"To define the activity we'll need the executable and the default file extension. This helper function provides it (from the engine name)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Helps identify the engine\n/// </summary>\nprivate dynamic EngineAttributes(string engine)\n{\n    if (engine.Contains("3dsMax")) return new { commandLine = "$(engine.path)\\\\3dsmaxbatch.exe -sceneFile \\"$(args[inputFile].path)\\" $(settings[script].path)", extension = "max", script = "da = dotNetClass(\\"Autodesk.Forge.Sample.DesignAutomation.Max.RuntimeExecute\\")\\nda.ModifyWindowWidthHeight()\\n" };\n    if (engine.Contains("AutoCAD")) return new { commandLine = "$(engine.path)\\\\accoreconsole.exe /i \\"$(args[inputFile].path)\\" /al \\"$(appbundles[{0}].path)\\" /s $(settings[script].path)", extension = "dwg", script = "UpdateParam\\n" };\n    if (engine.Contains("Inventor")) return new { commandLine = "$(engine.path)\\\\inventorcoreconsole.exe /i \\"$(args[inputFile].path)\\" /al \\"$(appbundles[{0}].path)\\"", extension = "ipt", script = string.Empty };\n    if (engine.Contains("Revit")) return new { commandLine = "$(engine.path)\\\\revitcoreconsole.exe /i \\"$(args[inputFile].path)\\" /al \\"$(appbundles[{0}].path)\\"", extension = "rvt", script = string.Empty };\n    throw new Exception("Invalid engine");\n}\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"CreateActivity")),(0,a.yg)("p",null,"Define a new activity with an input file, input data (JSON) and an output file."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Define a new activity\n/// </summary>\n[HttpPost]\n[Route("api/aps/designautomation/activities")]\npublic async Task<IActionResult> CreateActivity([FromBody]JObject activitySpecs)\n{\n    // basic input validation\n    string zipFileName = activitySpecs["zipFileName"].Value<string>();\n    string engineName = activitySpecs["engine"].Value<string>();\n\n    // standard name for this sample\n    string appBundleName = zipFileName + "AppBundle";\n    string activityName = zipFileName + "Activity";\n\n    //\n    Page<string> activities = await _designAutomation.GetActivitiesAsync();\n    string qualifiedActivityId = string.Format("{0}.{1}+{2}", NickName, activityName, Alias);\n    if (!activities.Data.Contains(qualifiedActivityId))\n    {\n        // define the activity\n        // ToDo: parametrize for different engines...\n        dynamic engineAttributes = EngineAttributes(engineName);\n        string commandLine = string.Format(engineAttributes.commandLine, appBundleName);\n        Activity activitySpec = new Activity()\n        {\n            Id = activityName,\n            Appbundles = new List<string>() { string.Format("{0}.{1}+{2}", NickName, appBundleName, Alias) },\n            CommandLine = new List<string>() { commandLine },\n            Engine = engineName,\n            Parameters = new Dictionary<string, Parameter>()\n            {\n                { "inputFile", new Parameter() { Description = "input file", LocalName = "$(inputFile)", Ondemand = false, Required = true, Verb = Verb.Get, Zip = false } },\n                { "inputJson", new Parameter() { Description = "input json", LocalName = "params.json", Ondemand = false, Required = false, Verb = Verb.Get, Zip = false } },\n                { "outputFile", new Parameter() { Description = "output file", LocalName = "outputFile." + engineAttributes.extension, Ondemand = false, Required = true, Verb = Verb.Put, Zip = false } }\n            },\n            Settings = new Dictionary<string, ISetting>()\n            {\n                { "script", new StringSetting(){ Value = engineAttributes.script } }\n            }\n        };\n        Activity newActivity = await _designAutomation.CreateActivityAsync(activitySpec);\n\n        // specify the alias for this Activity\n        Alias aliasSpec = new Alias() { Id = Alias, Version = 1 };\n        Alias newAlias = await _designAutomation.CreateActivityAliasAsync(activityName, aliasSpec);\n\n        return Ok(new { Activity = qualifiedActivityId });\n    }\n\n    // as this activity points to a AppBundle "dev" alias (which points to the last version of the bundle),\n    // there is no need to update it (for this sample), but this may be extended for different contexts\n    return Ok(new { Activity = "Activity already defined" });\n}\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"GetDefinedActivities")),(0,a.yg)("p",null,"We'll also need a method to return all defined activities. Note that returns only those defined by you (we use the APS Client Id as nick name, which then appears as a prefix)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Get all Activities defined for this account\n/// </summary>\n[HttpGet]\n[Route("api/aps/designautomation/activities")]\npublic async Task<List<string>> GetDefinedActivities()\n{\n    // filter list of\n    Page<string> activities = await _designAutomation.GetActivitiesAsync();\n    List<string> definedActivities = new List<string>();\n    foreach (string activity in activities.Data)\n        if (activity.StartsWith(NickName) && activity.IndexOf("$LATEST") == -1)\n            definedActivities.Add(activity.Replace(NickName + ".", String.Empty));\n\n    return definedActivities;\n}\n')))}c.isMDXComponent=!0;const u={toc:[]},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,i.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Activity")),(0,a.yg)("p",null,"Now we will write endpoints for creating new activity and getting the existing activities, copy the following code into ",(0,a.yg)("inlineCode",{parentName:"p"},"DesignAutomation.js")," file before the last line ",(0,a.yg)("inlineCode",{parentName:"p"},"module.exports = router;")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js",metastring:"title=routes/DesignAutomation.js",title:"routes/DesignAutomation.js"},'/// <summary>\n/// CreateActivity a new Activity\n/// </summary>\nrouter.post(\n  "/aps/designautomation/activities",\n  async (/*CreateActivity*/ req, res) => {\n    const activitySpecs = req.body;\n\n    // basic input validation\n    const zipFileName = activitySpecs.zipFileName;\n    const engineName = activitySpecs.engine;\n\n    // standard name for this sample\n    const appBundleName = zipFileName + "AppBundle";\n    const activityName = zipFileName + "Activity";\n\n    // get defined activities\n    const api = await Utils.dav3API(req.oauth_token);\n    let activities = null;\n    try {\n      activities = await api.getActivities();\n    } catch (ex) {\n      console.error(ex);\n      return res.status(500).json({\n        diagnostic: "Failed to get activity list",\n      });\n    }\n    const qualifiedActivityId = `${Utils.NickName}.${activityName}+${Utils.Alias}`;\n    if (!activities.data.includes(qualifiedActivityId)) {\n      // define the activity\n      // ToDo: parametrize for different engines...\n      const engineAttributes = Utils.EngineAttributes(engineName);\n      const commandLine = engineAttributes.commandLine.replace(\n        "{0}",\n        appBundleName\n      );\n      const activitySpec = {\n        id: activityName,\n        appbundles: [`${Utils.NickName}.${appBundleName}+${Utils.Alias}`],\n        commandLine: [commandLine],\n        engine: engineName,\n        parameters: {\n          inputFile: {\n            description: "input file",\n            localName: "$(inputFile)",\n            ondemand: false,\n            required: true,\n            verb: dav3.Verb.get,\n            zip: false,\n          },\n          inputJson: {\n            description: "input json",\n            localName: "params.json",\n            ondemand: false,\n            required: false,\n            verb: dav3.Verb.get,\n            zip: false,\n          },\n          outputFile: {\n            description: "output file",\n            localName: "outputFile." + engineAttributes.extension,\n            ondemand: false,\n            required: true,\n            verb: dav3.Verb.put,\n            zip: false,\n          },\n        },\n        settings: {\n          script: {\n            value: engineAttributes.script,\n          },\n        },\n      };\n      try {\n        const newActivity = await api.createActivity(activitySpec);\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Failed to create new activity",\n        });\n      }\n      // specify the alias for this Activity\n      const aliasSpec = {\n        id: Utils.Alias,\n        version: 1,\n      };\n      try {\n        const newAlias = await api.createActivityAlias(activityName, aliasSpec);\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Failed to create new alias for activity",\n        });\n      }\n      res.status(200).json({\n        activity: qualifiedActivityId,\n      });\n      return;\n    }\n\n    // as this activity points to a AppBundle "dev" alias (which points to the last version of the bundle),\n    // there is no need to update it (for this sample), but this may be extended for different contexts\n    res.status(200).json({\n      activity: "Activity already defined",\n    });\n  }\n);\n\n/// <summary>\n/// Get all Activities defined for this account\n/// </summary>\nrouter.get(\n  "/aps/designautomation/activities",\n  async (/*GetDefinedActivities*/ req, res) => {\n    const api = await Utils.dav3API(req.oauth_token);\n    // filter list of\n    let activities = null;\n    try {\n      activities = await api.getActivities();\n    } catch (ex) {\n      console.error(ex);\n      return res.status(500).json({\n        diagnostic: "Failed to get activity list",\n      });\n    }\n    let definedActivities = [];\n    for (let i = 0; i < activities.data.length; i++) {\n      let activity = activities.data[i];\n      if (\n        activity.startsWith(Utils.NickName) &&\n        activity.indexOf("$LATEST") === -1\n      )\n        definedActivities.push(activity.replace(Utils.NickName + ".", ""));\n    }\n\n    res.status(200).json(definedActivities);\n  }\n);\n')))}d.isMDXComponent=!0;var m=n(4472);const f={},y="Define Activity",g={unversionedId:"tutorials/design-automation/define-activity",id:"tutorials/design-automation/define-activity",title:"Define Activity",description:"Activity is the specification of an action that can be executed using a specified engine. It specifies the number of input and output files, and the AppBundle and entry-point to use.",source:"@site/docs/03-tutorials/04-design-automation/03-define-activity.mdx",sourceDirName:"03-tutorials/04-design-automation",slug:"/tutorials/design-automation/define-activity",permalink:"/tutorials/design-automation/define-activity",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/04-design-automation/03-define-activity.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create Plugin",permalink:"/tutorials/design-automation/prepare-plugin"},next:{title:"Execute Workitem",permalink:"/tutorials/design-automation/execute-workitem"}},v={},h=[],b={toc:h},A="wrapper";function w(e){let{components:t,...n}=e;return(0,a.yg)(A,(0,i.A)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"define-activity"},"Define Activity"),(0,a.yg)("p",null,"Activity is the specification of an action that can be executed using a specified engine. It specifies the number of input and output files, and the AppBundle and entry-point to use."),(0,a.yg)("p",null,"In this tutorial sample, the activity has 2 inputs (file & JSON data) and 1 output (file)."),(0,a.yg)(m.A,{NodeJsVsCode:d,DotNetVsCode:c,DotNetVs2022:c,mdxType:"EnvTabs"}),(0,a.yg)("p",null,"Now you can click on Configure (top-right), select the AppBundle, select the Engine\nand click on Define Activity, which should define and upload the appbundle and define\nthe activity. The results panel (left-side) shows the respective ids. All other buttons\ndo not work yet... let's move forward."),(0,a.yg)(r.A,{src:s,mdxType:"ResponsiveVideo"}))}w.isMDXComponent=!0},7227:(e,t,n)=>{n.d(t,{A:()=>s});var i=n(6540),a=n(53);const r={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,s),hidden:n},t)}},9489:(e,t,n)=>{n.d(t,{A:()=>w});var i=n(8168),a=n(6540),r=n(53),s=n(4245),o=n(6347),l=n(2814),c=n(5167),u=n(1269);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:i,default:a}}=e;return{value:t,label:n,attributes:i,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const i=(0,o.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(i.location.search);t.set(r,e),i.replace({...i.location,search:t.toString()})}),[r,i])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,r=d(e),[s,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:r}))),[l,c]=f({queryString:n,groupId:i}),[p,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,r]=(0,u.Dv)(n);return[i,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:i}),g=(()=>{const e=l??p;return m({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),y(e)}),[c,y,r]),tabValues:r}}var g=n(1062);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.a_)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),i=c[n].value;i!==o&&(p(t),l(i))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,i.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},s,{className:(0,r.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:i}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==i}))))}function A(e){const t=y(e);return a.createElement("div",{className:(0,r.A)("tabs-container",v.tabList)},a.createElement(h,(0,i.A)({},e,t)),a.createElement(b,(0,i.A)({},e,t)))}function w(e){const t=(0,g.A)();return a.createElement(A,(0,i.A)({key:String(t)},e))}},9589:(e,t,n)=>{n.d(t,{A:()=>o});var i=n(6540),a=n(3554),r=n.n(a);const s={wrapper:"wrapper_emgM",player:"player_m1gG"};function o(e){let{src:t}=e;return i.createElement("div",{className:s.wrapper},i.createElement(r(),{className:s.player,url:t,playing:!0,loop:!0,width:"100%",height:"100%"}))}}}]);