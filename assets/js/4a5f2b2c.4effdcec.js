"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[3070],{2417:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/bundle_folders-5bf11d65269f3485ba88938354f568d3.png"},3622:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/new_project-1d9f467db68bac64c1888ccbca7bd1f5.gif"},4472:(e,n,t)=>{t.d(n,{A:()=>r});var a=t(6540),o=t(9489),i=t(7227);function r(e){let{NodeJsVsCode:n,DotNetVsCode:t,DotNetVs2022:r}=e;return a.createElement(o.A,{groupId:"development-environment"},a.createElement(i.A,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},a.createElement(n,null)),a.createElement(i.A,{value:"dotnet-vscode",label:".NET & VSCode"},a.createElement(t,null)),a.createElement(i.A,{value:"dotnet-vs2022",label:".NET & VS2022"},a.createElement(r,null)))}},4618:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/build_output-10a18ff1b3a1541fe9b605c395d829de.png"},4683:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/build_output-8de45776d215b42ba0e40ac2726bd7df.png"},4715:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/post_build-070bf4c2d852047c6150096ee7ffa88d.png"},5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var a=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5785:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/post_build-a012eca48cd7e44080637645cddf84ad.png"},7047:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/bundle_folders-1efac7014e397b3ca1bce82d8ae49ed7.png"},7227:(e,n,t)=>{t.d(n,{A:()=>r});var a=t(6540),o=t(53);const i={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.A)(i.tabItem,r),hidden:t},n)}},7471:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/new_project-771d367c45c5925c918a5527d52e9f66.gif"},7500:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/project_files-cb15f945a431aaf66d1c53762dc89290.png"},7677:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/da4inventor_template-14afc275e0650d02493c9e5bfba2a8b0.png"},8241:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/new_project-cb082861bc173a90a68ea2cb274c34ba.gif"},8633:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/build_output-ce05b3d8c88cc7affc86a1147d020dd5.png"},8688:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/post_build-7dafce9f0bdcc4dbb35cc5f5b051bdfa.png"},9106:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/post_build-a9eadc1ec0a019f8d98dd73be3e2269f.png"},9293:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>j,contentTitle:()=>E,default:()=>_,frontMatter:()=>x,metadata:()=>F,toc:()=>B});var a=t(8168),o=t(6540),i=t(5680);const r=t.p+"assets/images/activity-bundle-configure-dd57a05087d020eded3e465ec6e5e564.webp",s=t.p+"assets/images/vscode_nodejsfs-87a933e2faf50a6b17322b823727eaee.webp",l={toc:[]},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,a.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Under ",(0,i.yg)("inlineCode",{parentName:"p"},"Controllers")," folder create a ",(0,i.yg)("inlineCode",{parentName:"p"},"DesignAutomationController.cs")," with the following content. This is just the class, we'll define the endpoints later, but note the DesignAutomationHub at the end, which allow us push notifications to the client via ",(0,i.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-6.0"},"SignalR"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs",metastring:"title=DesignAutomationController",title:"DesignAutomationController"},'using Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.DesignAutomation;\nusing Autodesk.Forge.DesignAutomation.Model;\nusing Autodesk.Forge.Model;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.SignalR;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing RestSharp;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Activity = Autodesk.Forge.DesignAutomation.Model.Activity;\nusing Alias = Autodesk.Forge.DesignAutomation.Model.Alias;\nusing AppBundle = Autodesk.Forge.DesignAutomation.Model.AppBundle;\nusing Parameter = Autodesk.Forge.DesignAutomation.Model.Parameter;\nusing WorkItem = Autodesk.Forge.DesignAutomation.Model.WorkItem;\nusing WorkItemStatus = Autodesk.Forge.DesignAutomation.Model.WorkItemStatus;\n\n\nnamespace designAutomationSample.Controllers\n{\n    [ApiController]\n    public class DesignAutomationController : ControllerBase\n    {\n        // Used to access the application folder (temp location for files & bundles)\n        private IWebHostEnvironment _env;\n        // used to access the SignalR Hub\n        private IHubContext<DesignAutomationHub> _hubContext;\n        // used to store the s3 upload payload;\n        private static PostCompleteS3UploadPayload _postCompleteS3UploadPayload;\n        // Local folder for bundles\n        public string LocalBundlesFolder { get { return Path.Combine(_env.WebRootPath, "bundles"); } }\n        /// Prefix for AppBundles and Activities\n        public static string NickName { get { return OAuthController.GetAppSetting("APS_CLIENT_ID"); } }\n        /// Alias for the app (e.g. DEV, STG, PROD). This value may come from an environment variable\n        public static string Alias { get { return "dev"; } }\n        //This property manager S3 Upload Payload\n        public static PostCompleteS3UploadPayload S3UploadPayload\n        {\n            get { return _postCompleteS3UploadPayload; }\n            set { _postCompleteS3UploadPayload = value; }\n        }\n        // Design Automation v3 API\n        DesignAutomationClient _designAutomation;\n\n        // Constructor, where env and hubContext are specified\n        public DesignAutomationController(IWebHostEnvironment env, IHubContext<DesignAutomationHub> hubContext, DesignAutomationClient api)\n        {\n            _designAutomation = api;\n            _env = env;\n            _hubContext = hubContext;\n        }\n\n        // **********************************\n        //\n        // Next we will add the methods here\n        //\n        // **********************************\n    }\n\n    /// <summary>\n    /// Class uses for SignalR\n    /// </summary>\n    public class DesignAutomationHub : Microsoft.AspNetCore.SignalR.Hub\n    {\n        public string GetConnectionId() { return Context.ConnectionId; }\n    }\n\n}\n')),(0,i.yg)("p",null,"Now let's add a few endpoints to this class. The following methods must be copied inside the ",(0,i.yg)("inlineCode",{parentName:"p"},"DesignAutomationController")," class."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"GetLocalBundles")),(0,i.yg)("p",null,"Look at the ",(0,i.yg)("inlineCode",{parentName:"p"},"bundles")," folder and return a list of .ZIP files."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Names of app bundles on this project\n/// </summary>\n[HttpGet]\n[Route("api/appbundles")]\npublic string[] GetLocalBundles()\n{\n    // this folder is placed under the public folder, which may expose the bundles\n    // but it was defined this way so it be published on most hosts easily\n    return Directory.GetFiles(LocalBundlesFolder, "*.zip").Select(Path.GetFileNameWithoutExtension).ToArray();\n}\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"GetAvailableEngines")),(0,i.yg)("p",null,"To define a bundle we also need the engine, so this endpoint return a list of all available engines."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Return a list of available engines\n/// </summary>\n[HttpGet]\n[Route("api/aps/designautomation/engines")]\npublic async Task<List<string>> GetAvailableEngines()\n{\n    dynamic oauth = await OAuthController.GetInternalAsync();\n    List<string> allEngines = new List<string>();\n    // define Engines API\n    string paginationToken = null;\n    while (true)\n    {\n        Page<string> engines = await _designAutomation.GetEnginesAsync(paginationToken);\n        allEngines.AddRange(engines.Data);\n        if (engines.PaginationToken == null)\n            break;\n        paginationToken = engines.PaginationToken;\n    }\n    allEngines.Sort();\n    return allEngines; // return list of engines\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"CreateAppBundle")),(0,i.yg)("p",null,"That's where we actually define a new AppBundle:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Define a new appbundle\n/// </summary>\n[HttpPost]\n[Route("api/aps/designautomation/appbundles")]\npublic async Task<IActionResult> CreateAppBundle([FromBody]JObject appBundleSpecs)\n{\n    // basic input validation\n    string zipFileName = appBundleSpecs["zipFileName"].Value<string>();\n    string engineName = appBundleSpecs["engine"].Value<string>();\n\n    // standard name for this sample\n    string appBundleName = zipFileName + "AppBundle";\n\n    // check if ZIP with bundle is here\n    string packageZipPath = Path.Combine(LocalBundlesFolder, zipFileName + ".zip");\n    if (!System.IO.File.Exists(packageZipPath)) throw new Exception("Appbundle not found at " + packageZipPath);\n\n    // get defined app bundles\n    Page<string> appBundles = await _designAutomation.GetAppBundlesAsync();\n\n    // check if app bundle is already define\n    dynamic newAppVersion;\n    string qualifiedAppBundleId = string.Format("{0}.{1}+{2}", NickName, appBundleName, Alias);\n    if (!appBundles.Data.Contains(qualifiedAppBundleId))\n    {\n        // create an appbundle (version 1)\n        AppBundle appBundleSpec = new AppBundle()\n        {\n            Package = appBundleName,\n            Engine = engineName,\n            Id = appBundleName,\n            Description = string.Format("Description for {0}", appBundleName),\n\n        };\n        newAppVersion = await _designAutomation.CreateAppBundleAsync(appBundleSpec);\n        if (newAppVersion == null) throw new Exception("Cannot create new app");\n\n        // create alias pointing to v1\n        Alias aliasSpec = new Alias() { Id = Alias, Version = 1 };\n        Alias newAlias = await _designAutomation.CreateAppBundleAliasAsync(appBundleName, aliasSpec);\n    }\n    else\n    {\n        // create new version\n        AppBundle appBundleSpec = new AppBundle()\n        {\n            Engine = engineName,\n            Description = appBundleName\n        };\n        newAppVersion = await _designAutomation.CreateAppBundleVersionAsync(appBundleName, appBundleSpec);\n        if (newAppVersion == null) throw new Exception("Cannot create new version");\n\n        // update alias pointing to v+1\n        AliasPatch aliasSpec = new AliasPatch()\n        {\n            Version = newAppVersion.Version\n        };\n        Alias newAlias = await _designAutomation.ModifyAppBundleAliasAsync(appBundleName, Alias, aliasSpec);\n    }\n\n    // upload the zip with .bundle\n    using (var client = new HttpClient())\n    {\n        using (var formData = new MultipartFormDataContent())\n        {\n            foreach (var kv in newAppVersion.UploadParameters.FormData)\n            {\n                if (kv.Value != null)\n                {\n                    formData.Add(new StringContent(kv.Value), kv.Key);\n                }\n            }\n            using (var content = new StreamContent(new FileStream(packageZipPath, FileMode.Open)))\n            {\n                formData.Add(content, "file");\n                using (var request = new HttpRequestMessage(HttpMethod.Post, newAppVersion.UploadParameters.EndpointURL) { Content = formData })\n                {\n                    var response = await client.SendAsync(request);\n                    response.EnsureSuccessStatusCode();\n                }\n            }\n        }\n    }\n\n    return Ok(new { AppBundle = qualifiedAppBundleId, Version = newAppVersion.Version });\n}\n\n')),(0,i.yg)("p",null,"As the ",(0,i.yg)("inlineCode",{parentName:"p"},"DesignAutomationHub")," class is now defined (inside this controller), open the Startup.cs and, inside Configure method, add the following line"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs"},'app.UseRouting();\napp.UseEndpoints(routes =>\n{\n    routes.MapHub<Controllers.DesignAutomationHub>("/api/signalr/designautomation");\n});\n\n')))}u.isMDXComponent=!0;const d={toc:[]},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.yg)(c,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Inside ",(0,i.yg)("inlineCode",{parentName:"p"},"routes/")," folder create ",(0,i.yg)("inlineCode",{parentName:"p"},"DesignAutomation.js")," file. "),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"In this file we will write all the endpoints, we will add Utils class consisting of all the utility functions like creating design automation SDK instance, uploading file and few more helpfull functions which are used in this sample.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js",metastring:"title=routes/DesignAutomation.js",title:"routes/DesignAutomation.js"},'const _path = require("path");\nconst _fs = require("fs");\nconst _url = require("url");\nconst express = require("express");\nconst http = require("https");\nconst formdata = require("form-data");\nconst bodyParser = require("body-parser");\nconst multer = require("multer");\nconst router = express.Router();\nconst { getClient } = require("./common/oauth");\nconst config = require("../config");\nconst dav3 = require("autodesk.forge.designautomation");\nconst ForgeAPI = require("forge-apis");\n\nrouter.use(bodyParser.json());\n\n// Middleware for obtaining a token for each request.\nrouter.use(async (req, res, next) => {\n  req.oauth_client = await getClient(/*config.scopes.internal*/);\n  req.oauth_token = req.oauth_client.getCredentials();\n  next();\n});\n\n// Static instance of the DA API\nlet dav3Instance = null;\n\nclass Utils {\n  static async Instance() {\n    if (dav3Instance === null) {\n      // Here it is ok to not await since we awaited in the call router.use()\n      dav3Instance = new dav3.AutodeskForgeDesignAutomationClient(\n        config.client\n      );\n      let FetchRefresh = async (data) => {\n        // data is undefined in a fetch, but contains the old credentials in a refresh\n        let client = await getClient();\n        let credentials = client.getCredentials();\n        // The line below is for testing\n        //credentials.expires_in = 30; credentials.expires_at = new Date(Date.now() + credentials.expires_in * 1000);\n        return credentials;\n      };\n      dav3Instance.authManager.authentications["2-legged"].fetchToken =\n        FetchRefresh;\n      dav3Instance.authManager.authentications["2-legged"].refreshToken =\n        FetchRefresh;\n    }\n    return dav3Instance;\n  }\n\n  /// <summary>\n  /// Returns the directory where bindles are stored on the local machine.\n  /// </summary>\n  static get LocalBundlesFolder() {\n    return _path.resolve(_path.join(__dirname, "../", "bundles"));\n  }\n\n  /// <summary>\n  /// Prefix for AppBundles and Activities\n  /// </summary>\n  static get NickName() {\n    return config.credentials.client_id;\n  }\n\n  /// <summary>\n  /// Alias for the app (e.g. DEV, STG, PROD). This value may come from an environment variable\n  /// </summary>\n  static get Alias() {\n    return "dev";\n  }\n\n  /// <summary>\n  /// Search files in a folder and filter them.\n  /// </summary>\n  static async findFiles(dir, filter) {\n    return new Promise((fulfill, reject) => {\n      _fs.readdir(dir, (err, files) => {\n        if (err) return reject(err);\n        if (filter !== undefined && typeof filter === "string")\n          files = files.filter((file) => {\n            return _path.extname(file) === filter;\n          });\n        else if (filter !== undefined && typeof filter === "object")\n          files = files.filter((file) => {\n            return filter.test(file);\n          });\n        fulfill(files);\n      });\n    });\n  }\n\n  /// <summary>\n  /// Create a new DAv3 client/API with default settings\n  /// </summary>\n  static async dav3API(oauth2) {\n    // There is 2 alternatives to setup an API instance, providing the access_token directly\n    // let apiClient2 = new dav3.AutodeskForgeDesignAutomationClient(/*config.client*/);\n    // apiClient2.authManager.authentications[\'2-legged\'].accessToken = oauth2.access_token;\n    //return (new dav3.AutodeskForgeDesignAutomationApi(apiClient));\n\n    // Or use the Auto-Refresh feature\n    let apiClient = await Utils.Instance();\n    return new dav3.AutodeskForgeDesignAutomationApi(apiClient);\n  }\n\n  /// <summary>\n  /// Helps identify the engine\n  /// </summary>\n  static EngineAttributes(engine) {\n    if (engine.includes("3dsMax"))\n      return {\n        commandLine:\n          \'$(engine.path)\\\\3dsmaxbatch.exe -sceneFile "$(args[inputFile].path)" "$(settings[script].path)"\',\n        extension: "max",\n        script:\n          "da = dotNetClass(\'Autodesk.Forge.Sample.DesignAutomation.Max.RuntimeExecute\')\\nda.ModifyWindowWidthHeight()\\n",\n      };\n    if (engine.includes("AutoCAD"))\n      return {\n        commandLine:\n          \'$(engine.path)\\\\accoreconsole.exe /i "$(args[inputFile].path)" /al "$(appbundles[{0}].path)" /s "$(settings[script].path)"\',\n        extension: "dwg",\n        script: "UpdateParam\\n",\n      };\n    if (engine.includes("Inventor"))\n      return {\n        commandLine:\n          \'$(engine.path)\\\\InventorCoreConsole.exe /i "$(args[inputFile].path)" /al "$(appbundles[{0}].path)"\',\n        extension: "ipt",\n        script: "",\n      };\n    if (engine.includes("Revit"))\n      return {\n        commandLine:\n          \'$(engine.path)\\\\revitcoreconsole.exe /i "$(args[inputFile].path)" /al "$(appbundles[{0}].path)"\',\n        extension: "rvt",\n        script: "",\n      };\n\n    throw new Error("Invalid engine");\n  }\n\n  static FormDataLength(form) {\n    return new Promise((fulfill, reject) => {\n      form.getLength((err, length) => {\n        if (err) return reject(err);\n        fulfill(length);\n      });\n    });\n  }\n\n  /// <summary>\n  /// Upload a file\n  /// </summary>\n  static uploadFormDataWithFile(filepath, endpoint, params = null) {\n    return new Promise(async (fulfill, reject) => {\n      const fileStream = _fs.createReadStream(filepath);\n\n      const form = new formdata();\n      if (params) {\n        const keys = Object.keys(params);\n        for (let i = 0; i < keys.length; i++)\n          form.append(keys[i], params[keys[i]]);\n      }\n      form.append("file", fileStream);\n\n      let headers = form.getHeaders();\n      headers["Cache-Control"] = "no-cache";\n      headers["Content-Length"] = await Utils.FormDataLength(form);\n\n      const urlinfo = _url.parse(endpoint);\n      const postReq = http.request(\n        {\n          host: urlinfo.host,\n          port: urlinfo.port || (urlinfo.protocol === "https:" ? 443 : 80),\n          path: urlinfo.pathname,\n          method: "POST",\n          headers: headers,\n        },\n        (response) => {\n          fulfill(response.statusCode);\n        },\n        (err) => {\n          reject(err);\n        }\n      );\n\n      form.pipe(postReq);\n    });\n  }\n}\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"App Bundle"),(0,i.yg)("p",{parentName:"li"},"Before creating activity, we need to define app bundle with plugin and selecting the appropriate engine. Copy & paste the following endpoints after the utils class."))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'/// <summary>\n/// Names of app bundles on this project\n/// </summary>\nrouter.get("/appbundles", async (/*GetLocalBundles*/ req, res) => {\n  // this folder is placed under the public folder, which may expose the bundles\n  // but it was defined this way so it be published on most hosts easily\n  let bundles = await Utils.findFiles(Utils.LocalBundlesFolder, ".zip");\n  bundles = bundles.map((fn) => _path.basename(fn, ".zip"));\n  res.json(bundles);\n});\n\n/// <summary>\n/// Return a list of available engines\n/// </summary>\nrouter.get(\n  "/aps/designautomation/engines",\n  async (/*GetAvailableEngines*/ req, res) => {\n    let that = this;\n    let Allengines = [];\n    let paginationToken = null;\n    try {\n      const api = await Utils.dav3API(req.oauth_token);\n      while (true) {\n        let engines = await api.getEngines({ page: paginationToken });\n        Allengines = Allengines.concat(engines.data);\n        if (engines.paginationToken == null) break;\n        paginationToken = engines.paginationToken;\n      }\n      res.json(Allengines.sort()); // return list of engines\n    } catch (ex) {\n      console.error(ex);\n      res.json([]);\n    }\n  }\n);\n\n/// <summary>\n/// Define a new appbundle\n/// </summary>\nrouter.post(\n  "/aps/designautomation/appbundles",\n  async (/*CreateAppBundle*/ req, res) => {\n    const appBundleSpecs = req.body;\n\n    // basic input validation\n    const zipFileName = appBundleSpecs.zipFileName;\n    const engineName = appBundleSpecs.engine;\n\n    // standard name for this sample\n    const appBundleName = zipFileName + "AppBundle";\n\n    // check if ZIP with bundle is here\n    const packageZipPath = _path.join(\n      Utils.LocalBundlesFolder,\n      zipFileName + ".zip"\n    );\n\n    // get defined app bundles\n    const api = await Utils.dav3API(req.oauth_token);\n    let appBundles = null;\n    try {\n      appBundles = await api.getAppBundles();\n    } catch (ex) {\n      console.error(ex);\n      return res.status(500).json({\n        diagnostic: "Failed to get the Bundle list",\n      });\n    }\n    // check if app bundle is already define\n    let newAppVersion = null;\n    const qualifiedAppBundleId = `${Utils.NickName}.${appBundleName}+${Utils.Alias}`;\n    if (!appBundles.data.includes(qualifiedAppBundleId)) {\n      // create an appbundle (version 1)\n      // const appBundleSpec = {\n      //         package: appBundleName,\n      //         engine: engineName,\n      //         id: appBundleName,\n      //         description: `Description for ${appBundleName}`\n      //     };\n      const appBundleSpec = dav3.AppBundle.constructFromObject({\n        package: appBundleName,\n        engine: engineName,\n        id: appBundleName,\n        description: `Description for ${appBundleName}`,\n      });\n      try {\n        newAppVersion = await api.createAppBundle(appBundleSpec);\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Cannot create new app",\n        });\n      }\n\n      // create alias pointing to v1\n      const aliasSpec =\n        //dav3.Alias.constructFromObject({\n        {\n          id: Utils.Alias,\n          version: 1,\n        };\n      try {\n        const newAlias = await api.createAppBundleAlias(\n          appBundleName,\n          aliasSpec\n        );\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Failed to create an alias",\n        });\n      }\n    } else {\n      // create new version\n      const appBundleSpec =\n        //dav3.AppBundle.constructFromObject({\n        {\n          engine: engineName,\n          description: appBundleName,\n        };\n      try {\n        newAppVersion = await api.createAppBundleVersion(\n          appBundleName,\n          appBundleSpec\n        );\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Cannot create new version",\n        });\n      }\n\n      // update alias pointing to v+1\n      const aliasSpec =\n        //dav3.AliasPatch.constructFromObject({\n        {\n          version: newAppVersion.version,\n        };\n      try {\n        const newAlias = await api.modifyAppBundleAlias(\n          appBundleName,\n          Utils.Alias,\n          aliasSpec\n        );\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Failed to create an alias",\n        });\n      }\n    }\n\n    // upload the zip with .bundle\n    try {\n      // curl https://bucketname.s3.amazonaws.com/\n      // -F key = apps/myApp/myfile.zip\n      // -F content-type = application/octet-stream\n      // -F policy = eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\n      // -F x-amz-signature = 800e52d73579387757e1c1cd88762...(trimmed)\n      // -F x-amz-credential = AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\n      // -F x-amz-algorithm = AWS4-HMAC-SHA256\n      // -F x-amz-date = 20180621T091656Z\n      // -F file=@E:myfile.zip\n      //\n      // The \u2018file\u2019 field must be at the end, all fields after \u2018file\u2019 will be ignored.\n      await Utils.uploadFormDataWithFile(\n        packageZipPath,\n        newAppVersion.uploadParameters.endpointURL,\n        newAppVersion.uploadParameters.formData\n      );\n    } catch (ex) {\n      console.error(ex);\n      return res.status(500).json({\n        diagnostic: "Failed to upload bundle on s3",\n      });\n    }\n\n    res.status(200).json({\n      appBundle: qualifiedAppBundleId,\n      version: newAppVersion.version,\n    });\n  }\n);\n\nmodule.exports = router;\n')),(0,i.yg)("p",null,'Now let\'s "mount" the router to our server application by modifying the server.js:'),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js",metastring:"title=server.js",title:"server.js"},'const _path = require("path");\nconst express = require("express");\nconst cookieSession = require("cookie-session");\nconst config = require("./config");\nif (!config.credentials.client_id || !config.credentials.client_secret)\n  return console.error(\n    "Missing APS_CLIENT_ID or APS_CLIENT_SECRET env variables."\n  );\n\nlet app = express();\napp.use(express.static(_path.join(__dirname, "./wwwroot")));\napp.use(\n  cookieSession({\n    name: "aps_session",\n    keys: ["aps_secure_key"],\n    maxAge: 60 * 60 * 1000, // 1 hour, same as the 2 legged lifespan token\n  })\n);\napp.use(\n  express.json({\n    limit: "50mb",\n  })\n);\n\n// highlight-start\napp.use("/api", require("./routes/DesignAutomation"));\n// highlight-end\napp.set("port", process.env.PORT || 8080);\n\nmodule.exports = app;\n')))}m.isMDXComponent=!0;const g={toc:[{value:"Create a new project",id:"create-a-new-project",level:3},{value:"Post-build event",id:"post-build-event",level:2}]},h="wrapper";function y(e){let{components:n,...o}=e;return(0,i.yg)(h,(0,a.A)({},g,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This step will help you create a basic AutoCAD plugin for Design Automation. For more information, please visit ",(0,i.yg)("a",{parentName:"p",href:"https://knowledge.autodesk.com/support/autocad/learn-explore/caas/simplecontent/content/my-first-autocad-plug-overview.html"},"My First AutoCAD Plugin")," tutorial."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"You may ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/autodesk-platform-services/aps-design-automation-dotnet/blob/master/designAutomationSample/wwwroot/bundles/UpdateDWGParam.zip"},"download the Bundle ZIP")," into the ",(0,i.yg)("inlineCode",{parentName:"p"},"bundles/")," (Node.js) or ",(0,i.yg)("inlineCode",{parentName:"p"},"/designAutomationSample/wwwroot/bundles")," (.NET 6) folder and ",(0,i.yg)("a",{parentName:"p",href:"#upload-plugin-bundle"},"skip to ",(0,i.yg)("strong",{parentName:"a"},"Upload Plugin Bundle")," section"),".")),(0,i.yg)("h3",{id:"create-a-new-project"},"Create a new project"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Right-click on the solution, the ",(0,i.yg)("strong",{parentName:"li"},"Add")," >> ",(0,i.yg)("strong",{parentName:"li"},"New Project"),"."),(0,i.yg)("li",{parentName:"ul"},"Select ",(0,i.yg)("strong",{parentName:"li"},"Windows Desktop"),", then ",(0,i.yg)("strong",{parentName:"li"},"Class Library")," and, finally, name it ",(0,i.yg)("inlineCode",{parentName:"li"},"UpdateDWGParam"),"."),(0,i.yg)("li",{parentName:"ul"},"Then right-click on the project, go to ",(0,i.yg)("strong",{parentName:"li"},"Manage NuGet Packages..."),", under ",(0,i.yg)("strong",{parentName:"li"},"Browser")," you can search for ",(0,i.yg)("strong",{parentName:"li"},"AutoCAD.NET")," and install ",(0,i.yg)("inlineCode",{parentName:"li"},"AutoCAD.NET.Core")," (which also installs ",(0,i.yg)("inlineCode",{parentName:"li"},"AutoCAD.NET.Model"),")."),(0,i.yg)("li",{parentName:"ul"},"Then search and install ",(0,i.yg)("inlineCode",{parentName:"li"},"Newtonsoft.Json")," (which is used to parse input data in JSON format).")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Please select .NET Framework 4.8. If not listed, ",(0,i.yg)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet-framework/net48"},"please install the Dev Pack"),".")),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(7471).A,width:"800",height:"478"})),(0,i.yg)("p",null,"As a result, the ",(0,i.yg)("strong",{parentName:"p"},"package.config")," should look like the following. This sample uses version 20, which should work on all available versions. You may adjust to a specific version."),(0,i.yg)("p",null,"The project should contain a ",(0,i.yg)("inlineCode",{parentName:"p"},"Class1.cs")," class, let's rename the file to ",(0,i.yg)("inlineCode",{parentName:"p"},"Commands.cs")," (for consistency)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs",metastring:"title=Commands.cs",title:"Commands.cs"},'using Autodesk.AutoCAD.ApplicationServices.Core;\nusing Autodesk.AutoCAD.DatabaseServices;\nusing Autodesk.AutoCAD.Runtime;\nusing Newtonsoft.Json;\nusing System.IO;\n\n[assembly: CommandClass(typeof(UpdateDWGParam.Commands))]\n[assembly: ExtensionApplication(null)]\n\nnamespace UpdateDWGParam\n{\n    public class Commands\n    {\n        [CommandMethod("UpdateParam", CommandFlags.Modal)]\n        public static void UpdateParam()\n        {\n            //Get active document of drawing with Dynamic block\n            var doc = Application.DocumentManager.MdiActiveDocument;\n            var db = doc.Database;\n\n            // read input parameters from JSON file\n            InputParams inputParams = JsonConvert.DeserializeObject<InputParams>(File.ReadAllText("params.json"));\n\n            using (Transaction t = db.TransactionManager.StartTransaction())\n            {\n                var bt = t.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;\n\n                foreach (ObjectId btrId in bt)\n                {\n                    //get the blockDef and check if is anonymous\n                    BlockTableRecord btr = (BlockTableRecord)t.GetObject(btrId, OpenMode.ForRead);\n                    if (btr.IsDynamicBlock)\n                    {\n                        //get all anonymous blocks from this dynamic block\n                        ObjectIdCollection anonymousIds = btr.GetAnonymousBlockIds();\n                        ObjectIdCollection dynBlockRefs = new ObjectIdCollection();\n                        foreach (ObjectId anonymousBtrId in anonymousIds)\n                        {\n                            //get the anonymous block\n                            BlockTableRecord anonymousBtr = (BlockTableRecord)t.GetObject(anonymousBtrId, OpenMode.ForRead);\n                            //and all references to this block\n                            ObjectIdCollection blockRefIds = anonymousBtr.GetBlockReferenceIds(true, true);\n                            foreach (ObjectId id in blockRefIds)\n                            {\n                                dynBlockRefs.Add(id);\n                            }\n                        }\n                        if (dynBlockRefs.Count > 0)\n                        {\n                            //Get the first dynamic block reference, we have only one Dyanmic Block reference in Drawing\n                            var dBref = t.GetObject(dynBlockRefs[0], OpenMode.ForWrite) as BlockReference;\n                            UpdateDynamicProperties(dBref, inputParams);\n                        }\n                    }\n                }\n                t.Commit();\n            }\n            LogTrace("Saving file...");\n            db.SaveAs("outputFile.dwg", DwgVersion.Current);\n        }\n\n        /// <summary>\n        /// This updates the Dyanmic Blockreference with given Width and Height\n        /// The initial parameters of Dynamic Blockrefence, Width =20.00 and Height =40.00\n        /// </summary>\n        /// <param Editor="ed"></param>\n        /// <param BlockReference="br"></param>\n        /// <param String="name"></param>\n        private static void UpdateDynamicProperties(BlockReference br, InputParams inputParams)\n        {\n            // Only continue is we have a valid dynamic block\n            if (br != null && br.IsDynamicBlock)\n            {\n                // Get the dynamic block\'s property collection\n                DynamicBlockReferencePropertyCollection pc = br.DynamicBlockReferencePropertyCollection;\n                foreach (DynamicBlockReferenceProperty prop in pc)\n                {\n                    switch (prop.PropertyName)\n                    {\n                        case "Width":\n                            prop.Value = inputParams.Width;\n                            break;\n                        case "Height":\n                            prop.Value = inputParams.Height;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n\n        /// <summary>\n        /// This will appear on the Design Automation output\n        /// </summary>\n        private static void LogTrace(string format, params object[] args) { Application.DocumentManager.MdiActiveDocument.Editor.WriteMessage(format, args); }\n    }\n\n    public class InputParams\n    {\n        public double Width { get; set; }\n        public double Height { get; set; }\n    }\n}\n\n')),(0,i.yg)("p",null,"This is the main code that will run with AutoCAD. Copy the following content into ",(0,i.yg)("inlineCode",{parentName:"p"},"Commands.cs"),". The class contains one custom AutoCAD command, ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateParam"),", defined as a method with the same name. This command is called by Design Automation engine, as will be specified on the ",(0,i.yg)("strong",{parentName:"p"},"Activity")," (next step of this tutorial)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-xml",metastring:"title=PackageContents.xml",title:"PackageContents.xml"},'<?xml version="1.0" encoding="utf-8" ?>\n<ApplicationPackage SchemaVersion="1.0" Version="1.0" ProductCode="{F11EA57A-1E7E-4B6D-8E81-986B071E3E07}" Name="AutoCADDesignAutomation" Description="Sample Plugin for AutoCAD" Author="tutorials.autodesk.io>">\n  <CompanyDetails Name="Autodesk, Inc" Url="http://tutorials.autodesk.io" Email="forge.help@autodesk.com"/>\n  <Components>\n    <RuntimeRequirements OS="Win64" Platform="AutoCAD"/>\n    <ComponentEntry AppName="UpdateWindowParameters" ModuleName="./Contents/UpdateDWGParam.dll" AppDescription="AutoCAD .NET App to update parameters of Dynamic blockreference in AutoCAD Drawing" LoadOnCommandInvocation="True" LoadOnAutoCADStartup="True">\n      <Commands GroupName="FPDCommands">\n        <Command Global="UpdateParam" Local="UpdateParam"/>\n      </Commands>\n    </ComponentEntry>\n  </Components>\n</ApplicationPackage>\n')),(0,i.yg)("p",null,"Create a folder named ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateDWGParam.bundle")," and, inside, a file named ",(0,i.yg)("inlineCode",{parentName:"p"},"PackageContents.xml"),", then copy the following content to it. Learn more at the ",(0,i.yg)("a",{parentName:"p",href:"https://help.autodesk.com/view/ACD/2023/ENU/?guid=GUID-BC76355D-682B-46ED-B9B7-66C95EEF2BD0"},"PackageContents.xml Format Reference"),". This file defines the new AutoCAD custom command ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateParam")," that will be called when Design Automation executes."),(0,i.yg)("p",null,"Finally, create a subfolder named ",(0,i.yg)("inlineCode",{parentName:"p"},"Contents")," and leave it empty. At this point, the project should look like:"),(0,i.yg)("h2",{id:"post-build-event"},"Post-build event"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"For Node.js it is required to adjust the AppBundle ZIP output folder.")),(0,i.yg)("p",null,"Now we need to ZIP the .bundle folder. Right-click on the project, select ",(0,i.yg)("strong",{parentName:"p"},"Properties"),", then open ",(0,i.yg)("strong",{parentName:"p"},"Build Events")," and copy the following into ",(0,i.yg)("strong",{parentName:"p"},"Post-build event command line")," field, as shown on the image below."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'xcopy /Y /F "$(TargetDir)*.dll" "$(ProjectDir)UpdateDWGParam.bundle\\Contents\\"\ndel /F "$(ProjectDir)..\\designAutomationSample\\wwwroot\\bundles\\UpdateDWGParam.zip"\n"C:\\Program Files\\7-Zip\\7z.exe" a -tzip "$(ProjectDir)../designAutomationSample/wwwroot/bundles/UpdateDWGParam.zip" "$(ProjectDir)UpdateDWGParam.bundle\\" -xr0!*.pdb\n')),(0,i.yg)("p",null,"This will copy the DLL from ",(0,i.yg)("inlineCode",{parentName:"p"},"/bin/debug/")," into ",(0,i.yg)("inlineCode",{parentName:"p"},".bundle/Contents")," folder, then use ",(0,i.yg)("a",{parentName:"p",href:"https://www.7-zip.org/"},"7zip")," to create a zip, then finally copy the ZIP into ",(0,i.yg)("inlineCode",{parentName:"p"},"/bundles")," folders of the webapp.\n",(0,i.yg)("img",{src:t(5785).A,width:"724",height:"449"})),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Note how the ",(0,i.yg)("strong",{parentName:"p"},"Post-build event")," uses the project and folder names, so make sure you're using this names.")),(0,i.yg)("p",null,"If you build the ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateDWGParam")," project now you should see something like this on the ",(0,i.yg)("strong",{parentName:"p"},"Output")," window. Note the 2 folders and 3 files zipped. The zip file is created directly at the ",(0,i.yg)("inlineCode",{parentName:"p"},"/wwwroot/bundles")," folder. This means you're doing great!"),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(4618).A,width:"1013",height:"345"})))}y.isMDXComponent=!0;const f={toc:[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create a new project",id:"create-a-new-project",level:2},{value:"SampleAutomation.cs",id:"sampleautomationcs",level:2},{value:"Post-build event",id:"post-build-event",level:2}]},b="wrapper";function w(e){let{components:n,...o}=e;return(0,i.yg)(b,(0,a.A)({},f,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This step will help you create a basic Inventor plugin. For more information, please visit ",(0,i.yg)("a",{parentName:"p",href:"https://knowledge.autodesk.com/support/inventor-products/learn-explore/caas/simplecontent/content/my-first-inventor-plug-overview.html"},"My First Inventor Plugin")," tutorial."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"You may ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/autodesk-platform-services/aps-design-automation-nodejs/tree/nodejs/bundles/UpdateIPTParam.zip"},"download the Bundle ZIP")," into the ",(0,i.yg)("inlineCode",{parentName:"p"},"bundles/")," (Node.js) or ",(0,i.yg)("inlineCode",{parentName:"p"},"/designAutomationSample/wwwroot/bundles")," (.NET Core) folder and ",(0,i.yg)("a",{parentName:"p",href:"#upload-plugin-bundle"},"skip to ",(0,i.yg)("strong",{parentName:"a"},"Upload Plugin Bundle")," section"),".")),(0,i.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Design Automation for Inventor")," template: go to the Visual Studio Market Place, download and open it from ",(0,i.yg)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=Autodesk.DesignAutomation"},"this link"),", then follow the steps to install.")),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(7677).A,width:"800",height:"461"})),(0,i.yg)("h2",{id:"create-a-new-project"},"Create a new project"),(0,i.yg)("p",null,"Right-click on the solution, the ",(0,i.yg)("strong",{parentName:"p"},"Add")," >> ",(0,i.yg)("strong",{parentName:"p"},"New Project"),". Search for ",(0,i.yg)("strong",{parentName:"p"},"Inventor")," templates, then ",(0,i.yg)("strong",{parentName:"p"},"Plugin project")," and, finally, name it ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateIPTParam"),". Right-click on the project, go to ",(0,i.yg)("strong",{parentName:"p"},"Manage NuGet Packages..."),", under ",(0,i.yg)("strong",{parentName:"p"},"Browse")," you can select ",(0,i.yg)("inlineCode",{parentName:"p"},"Newtonsoft.Json")," and update (this package is already in the solution, if not, install)"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Please select .NET Framework 4.7. If not listed, ",(0,i.yg)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet-framework/net47"},"please install the Dev Pack"),".")),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(8241).A,width:"800",height:"568"})),(0,i.yg)("h2",{id:"sampleautomationcs"},"SampleAutomation.cs"),(0,i.yg)("p",null,"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},"SampleAutomation.cs")," file and copy the following content to it. This is where the parameters are updated under the ",(0,i.yg)("inlineCode",{parentName:"p"},"Run")," method."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-dotnet",metastring:"title=SampleAutomation.cs",title:"SampleAutomation.cs"},'using Inventor;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Threading;\n\nnamespace UpdateIPTParam\n{\n    [ComVisible(true)]\n    public class SampleAutomation\n    {\n        private InventorServer m_server;\n        public SampleAutomation(InventorServer app) { m_server = app; }\n\n        public void Run(Document doc)\n        {\n            try\n            {\n                // update parameters in the doc\n                ChangeParameters(doc);\n\n                // generate outputs\n                var docDir = System.IO.Path.GetDirectoryName(doc.FullFileName);\n\n                // save output file\n                var documentType = doc.DocumentType;\n                if (documentType == DocumentTypeEnum.kPartDocumentObject)\n                {\n                    // the name must be in sync with OutputIpt localName in Activity\n                    var fileName = System.IO.Path.Combine(docDir, "outputFile.ipt");\n\n                    // save file\n                    doc.SaveAs(fileName, false);\n                }\n            }\n            catch (Exception e) { LogTrace("Processing failed: {0}", e.ToString()); }\n        }\n\n        /// <summary>\n        /// Change parameters in Inventor document.\n        /// </summary>\n        /// <param name="doc">The Inventor document.</param>\n        /// <param name="json">JSON with changed parameters.</param>\n        public void ChangeParameters(Document doc)\n        {\n            var theParams = GetParameters(doc);\n\n            Dictionary<string, string> parameters = JsonConvert.DeserializeObject<Dictionary<string, string>>(System.IO.File.ReadAllText("params.json"));\n            foreach (KeyValuePair<string, string> entry in parameters)\n            {\n                try\n                {\n                    Parameter param = theParams[entry.Key.ToLower()];\n                    param.Expression = entry.Value;\n                }\n                catch (Exception e) { LogTrace("Cannot update {0}: {1}", entry.Key, e.Message); }\n            }\n            doc.Update();\n        }\n\n        /// <summary>\n        /// Get parameters for the document.\n        /// </summary>\n        /// <returns>Parameters. Throws exception if parameters are not found.</returns>\n        private static Parameters GetParameters(Document doc)\n        {\n            var docType = doc.DocumentType;\n            switch (docType)\n            {\n                case DocumentTypeEnum.kAssemblyDocumentObject:\n                    var asm = doc as AssemblyDocument;\n                    return asm.ComponentDefinition.Parameters;\n                case DocumentTypeEnum.kPartDocumentObject:\n                    var ipt = doc as PartDocument;\n                    return ipt.ComponentDefinition.Parameters;\n                default:\n                    throw new ApplicationException(string.Format("Unexpected document type ({0})", docType));\n            }\n        }\n\n        /// <summary>\n        /// This will appear on the Design Automation output\n        /// </summary>\n        private static void LogTrace(string format, params object[] args) { Trace.TraceInformation(format, args); }\n    }\n}\n\n')),(0,i.yg)("h2",{id:"post-build-event"},"Post-build event"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"For Node.js it is required to adjust the AppBundle ZIP output folder.")),(0,i.yg)("p",null,"Now we need to ZIP the ",(0,i.yg)("inlineCode",{parentName:"p"},".bundle")," folder. Right-click on the project, select ",(0,i.yg)("strong",{parentName:"p"},"Properties"),", then open ",(0,i.yg)("strong",{parentName:"p"},"Build Events")," and copy the following into ",(0,i.yg)("strong",{parentName:"p"},"Post-build event command line")," field, as shown on the image below."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'xcopy /Y /F "$(ProjectDir)PackageContents.xml" "$(TargetDir)\\Bundle\\$(MSBuildProjectName).bundle\\"\nxcopy /Y /F "$(TargetDir)*.*" "$(TargetDir)\\Bundle\\$(MSBuildProjectName).bundle\\Contents\\"\ndel /F "$(ProjectDir)..\\designAutomationSample\\wwwroot\\bundles\\UpdateIPTParam.zip"\n"C:\\Program Files\\7-Zip\\7z.exe" a -tzip "$(ProjectDir)../designAutomationSample/wwwroot/bundles/UpdateIPTParam.zip" "$(TargetDir)\\bundle\\$(MSBuildProjectName).bundle\\" -xr0!*.pdb\n')),(0,i.yg)("p",null,"This will copy the DLL from ",(0,i.yg)("inlineCode",{parentName:"p"},"/bin/debug/")," into ",(0,i.yg)("inlineCode",{parentName:"p"},".bundle/Contents")," folder, then use ",(0,i.yg)("a",{parentName:"p",href:"https://www.7-zip.org/"},"7zip")," to create a zip, then finally copy the ZIP into ",(0,i.yg)("inlineCode",{parentName:"p"},"/bundles")," folders of the webapp."),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(4715).A,width:"709",height:"541"})),(0,i.yg)("p",null,"If you build the ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateIPTParam")," project now you should see something like this on the ",(0,i.yg)("strong",{parentName:"p"},"Output")," window. Note the 2 folders and several files zipped. The zip file is created directly at the ",(0,i.yg)("inlineCode",{parentName:"p"},"/wwwroot/bundles")," folder. This means you're doing great!"),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(9904).A,width:"1016",height:"326"})))}w.isMDXComponent=!0;const A={toc:[{value:"Create a new project",id:"create-a-new-project",level:3},{value:"Autodesk.Forge.Sample.DesignAutomation.Revit.addin",id:"autodeskforgesampledesignautomationrevitaddin",level:4},{value:"Post-build event",id:"post-build-event",level:4}]},N="wrapper";function v(e){let{components:n,...o}=e;return(0,i.yg)(N,(0,a.A)({},A,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This step will help you create a basic Revit plugin for Design Automation. For more information, please visit ",(0,i.yg)("a",{parentName:"p",href:"https://knowledge.autodesk.com/support/revit-products/learn-explore/caas/simplecontent/content/my-first-revit-plug-overview.html"},"My First Revit Plugin")," tutorial."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"You may ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/autodesk-platform-services/aps-design-automation-nodejs/tree/nodejs/bundles/UpdateRVTParam.zip"},"download the Bundle ZIP")," into the ",(0,i.yg)("inlineCode",{parentName:"p"},"bundles/")," (Node.js) or ",(0,i.yg)("inlineCode",{parentName:"p"},"/designAutomationSample/wwwroot/bundles")," (.NET 6) folder and ",(0,i.yg)("a",{parentName:"p",href:"#upload-plugin-bundle"},"skip to ",(0,i.yg)("strong",{parentName:"a"},"Upload Plugin Bundle")," section"),".")),(0,i.yg)("h3",{id:"create-a-new-project"},"Create a new project"),(0,i.yg)("p",null,"ight-click on the solution, the ",(0,i.yg)("strong",{parentName:"p"},"Add")," >> ",(0,i.yg)("strong",{parentName:"p"},"New Project"),". Select ",(0,i.yg)("strong",{parentName:"p"},"Windows Desktop"),", then ",(0,i.yg)("strong",{parentName:"p"},"Class Library")," and, finally, name it ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateRVTParam"),"."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Please select .NET Framework 4.8. If not listed, ",(0,i.yg)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet-framework/net48"},"please install the Dev Pack"),".")),(0,i.yg)("p",null,"Right-click on ",(0,i.yg)("strong",{parentName:"p"},"References"),", then ",(0,i.yg)("strong",{parentName:"p"},"Add Reference")," and ",(0,i.yg)("strong",{parentName:"p"},"Browse")," for ",(0,i.yg)("inlineCode",{parentName:"p"},"RevitAPI.dll")," (by default under ",(0,i.yg)("inlineCode",{parentName:"p"},"C:\\Program Files\\Autodesk\\Revit 201x")," folder). Then right-click on this ",(0,i.yg)("strong",{parentName:"p"},"RevitAPI")," reference, go to ",(0,i.yg)("strong",{parentName:"p"},"Properties"),", then set ",(0,i.yg)("strong",{parentName:"p"},"Copy Local")," to ",(0,i.yg)("strong",{parentName:"p"},"False"),"."),(0,i.yg)("p",null,"Then right-click on the project, go to ",(0,i.yg)("strong",{parentName:"p"},"Manage NuGet Packages..."),", under ",(0,i.yg)("strong",{parentName:"p"},"Browser")," you can search for ",(0,i.yg)("strong",{parentName:"p"},"DesignAutomation.Revit")," and install ",(0,i.yg)("inlineCode",{parentName:"p"},"Autodesk.Forge.DesignAutomation.Revit")," (choose the appropriate Revit version you need). Then search and install ",(0,i.yg)("inlineCode",{parentName:"p"},"Newtonsoft.Json")," (which is used to parse input data in JSON format)."),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(9484).A,width:"800",height:"475"})),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-xml",metastring:"title=package.config",title:"package.config"},'<?xml version="1.0" encoding="utf-8"?>\n<packages>\n  <package id="Autodesk.Forge.DesignAutomation.Revit" version="2021.0.0" targetFramework="net48" />\n  <package id="Microsoft.CSharp" version="4.5.0" targetFramework="net48" />\n  <package id="Newtonsoft.Json" version="12.0.1" targetFramework="net48" />\n</packages>\n\n')),(0,i.yg)("p",null,"The project should contain a ",(0,i.yg)("inlineCode",{parentName:"p"},"Class1.cs")," class, let's rename the file to Commands.cs (for consistency)."),(0,i.yg)("p",null,"At this point, the project should look like the following"),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(7500).A,width:"303",height:"400"})),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs",metastring:"title=Commands.cs",title:"Commands.cs"},'using Autodesk.Revit.ApplicationServices;\nusing Autodesk.Revit.Attributes;\nusing Autodesk.Revit.DB;\nusing DesignAutomationFramework;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.IO;\n\nnamespace Autodesk.Forge.Sample.DesignAutomation.Revit\n{\n    [Transaction(TransactionMode.Manual)]\n    [Regeneration(RegenerationOption.Manual)]\n    public class Commands : IExternalDBApplication\n    {\n        //Path of the project(i.e)project where your Window family files are present\n        string OUTPUT_FILE = "OutputFile.rvt";\n\n        public ExternalDBApplicationResult OnStartup(ControlledApplication application)\n        {\n            DesignAutomationBridge.DesignAutomationReadyEvent += HandleDesignAutomationReadyEvent;\n            return ExternalDBApplicationResult.Succeeded;\n        }\n\n        private void HandleDesignAutomationReadyEvent(object sender, DesignAutomationReadyEventArgs e)\n        {\n            LogTrace("Design Automation Ready event triggered...");\n            e.Succeeded = true;\n            EditWindowParametersMethod(e.DesignAutomationData.RevitDoc);\n        }\n\n        private void EditWindowParametersMethod(Document doc)\n        {\n            InputParams inputParameters = JsonConvert.DeserializeObject<InputParams>(File.ReadAllText("params.json"));\n\n            //Modifying the window parameters\n            //Open transaction\n            using (Transaction trans = new Transaction(doc))\n            {\n                trans.Start("Update window parameters");\n\n                //Filter for windows\n                FilteredElementCollector WindowCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType();\n                IList<ElementId> windowIds = WindowCollector.ToElementIds() as IList<ElementId>;\n\n                foreach (ElementId windowId in windowIds)\n                {\n                    Element Window = doc.GetElement(windowId);\n                    FamilyInstance FamInst = Window as FamilyInstance;\n                    FamilySymbol FamSym = FamInst.Symbol;\n                    SetElementParameter(FamSym, BuiltInParameter.WINDOW_HEIGHT, inputParameters.Height);\n                    SetElementParameter(FamSym, BuiltInParameter.WINDOW_WIDTH, inputParameters.Width);\n                }\n\n                //To save all the changes commit the transaction\n                trans.Commit();\n            }\n\n            //Save the updated file by overwriting the existing file\n            ModelPath ProjectModelPath = ModelPathUtils.ConvertUserVisiblePathToModelPath(OUTPUT_FILE);\n            SaveAsOptions SAO = new SaveAsOptions();\n            SAO.OverwriteExistingFile = true;\n\n            //Save the project file with updated window\'s parameters\n            LogTrace("Saving file...");\n            doc.SaveAs(ProjectModelPath, SAO);\n        }\n\n        public ExternalDBApplicationResult OnShutdown(ControlledApplication application)\n        {\n            return ExternalDBApplicationResult.Succeeded;\n        }\n\n        private void SetElementParameter(FamilySymbol FamSym, BuiltInParameter paraMeter, double parameterValue)\n        {\n            FamSym.get_Parameter(paraMeter).Set(parameterValue);\n        }\n\n        public class InputParams\n        {\n            public double Width { get; set; }\n            public double Height { get; set; }\n        }\n\n        /// <summary>\n        /// This will appear on the Design Automation output\n        /// </summary>\n        private static void LogTrace(string format, params object[] args) { System.Console.WriteLine(format, args); }\n    }\n}\n\n')),(0,i.yg)("p",null,"Create a folder named UpdateRVTParam.bundle and, inside, a file named PackageContents.xml, then copy the following content to it. Learn more at the PackageContents.xml Format Reference. This file tells Revit to load our .addin plugin."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-xml",metastring:"title=PackageContents.xml",title:"PackageContents.xml"},'<?xml version="1.0" encoding="utf-8" ?>\n<ApplicationPackage Name="RevitDesignAutomation" Description="Sample Plugin for Revit" Author="tutorials.autodesk.io">\n  <CompanyDetails Name="Autodesk, Inc" Url="http://tutorials.autodesk.io" Email="forge.help@autodesk.com"/>\n  <Components Description="Modify window parameters">\n    <RuntimeRequirements SeriesMax="R2021" SeriesMin="R2019" Platform="Revit" OS="Win64"/>\n    <ComponentEntry LoadOnRevitStartup="True" LoadOnCommandInvocation="False" AppDescription="Modify Window Parameters" ModuleName="./Contents/Autodesk.Forge.Sample.DesignAutomation.Revit.addin" Version="1.0.0" AppName="Modify Window Parameters"/>\n  </Components>\n</ApplicationPackage>\n\n')),(0,i.yg)("h4",{id:"autodeskforgesampledesignautomationrevitaddin"},"Autodesk.Forge.Sample.DesignAutomation.Revit.addin"),(0,i.yg)("p",null,"Under ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateRVTParam.bundle")," folder create a subfolder named ",(0,i.yg)("inlineCode",{parentName:"p"},"Contents")," and, inside this folder, a new file called ",(0,i.yg)("inlineCode",{parentName:"p"},"Autodesk.Forge.Sample.DesignAutomation.Revit.addin"),". This tells Revit how to load the plugin."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8" standalone="no"?>\n<RevitAddIns>\n  <AddIn Type="DBApplication">\n    <Name>Modify Window Parameters</Name>\n    <FullClassName>Autodesk.Forge.Sample.DesignAutomation.Revit.Commands</FullClassName>\n    <Text>Revit for Design Automation</Text>\n    <Description>Revit for Design Automation</Description>\n    <VisibilityMode>AlwaysVisible</VisibilityMode>\n    <Assembly>.\\UpdateRVTParam.dll</Assembly>\n    <AddInId>000BD853-36E4-461f-9171-C5ACEDA4E723</AddInId>\n    <VendorId>ADSK</VendorId>\n    <VendorDescription>Autodesk, Inc, www.autodesk.com</VendorDescription>\n  </AddIn>\n</RevitAddIns>\n')),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(2417).A,width:"596",height:"245"})),(0,i.yg)("h4",{id:"post-build-event"},"Post-build event"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"For Node.js it is required to adjust the AppBundle ZIP output folder.")),(0,i.yg)("p",null,"Now we need to ZIP the .bundle folder. Right-click on the project, select ",(0,i.yg)("strong",{parentName:"p"},"Properties"),", then open ",(0,i.yg)("strong",{parentName:"p"},"Build Events")," and copy the following into ",(0,i.yg)("strong",{parentName:"p"},"Post-build event command line")," field, as shown on the image below."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'xcopy /Y /F "$(TargetDir)*.dll" "$(ProjectDir)UpdateRVTParam.bundle\\Contents\\"\ndel /F "$(ProjectDir)..\\designAutomationSample\\wwwroot\\bundles\\UpdateRVTParam.zip"\n"C:\\Program Files\\7-Zip\\7z.exe" a -tzip "$(ProjectDir)../designAutomationSample/wwwroot/bundles/UpdateRVTParam.zip" "$(ProjectDir)UpdateRVTParam.bundle\\" -xr0!*.pdb\n')),(0,i.yg)("p",null,"This will copy the DLL from ",(0,i.yg)("inlineCode",{parentName:"p"},"/bin/debug/")," into ",(0,i.yg)("inlineCode",{parentName:"p"},".bundle/Contents")," folder, then use ",(0,i.yg)("a",{parentName:"p",href:"https://www.7-zip.org/"},"7zip")," to create a zip, then finally copy the ZIP into ",(0,i.yg)("inlineCode",{parentName:"p"},"/bundles")," folders of the webapp."),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(8688).A,width:"720",height:"465"})),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Note how the ",(0,i.yg)("strong",{parentName:"p"},"Post-build event")," uses the project and folder names, so make sure you're using this names.")),(0,i.yg)("p",null,"If you build the ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateRVTParam")," project now you should see something like this on the ",(0,i.yg)("strong",{parentName:"p"},"Output")," window. Note the 2 folders and 3 files zipped. The zip file is created directly at the /wwwroot/bundles folder. This means you're doing great!"),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(4683).A,width:"1035",height:"368"})),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"If the build output shows more than ",(0,i.yg)("strong",{parentName:"p"},"2 folder, 5 files")," copied, please go back and ensure ",(0,i.yg)("strong",{parentName:"p"},"RevitAPI")," reference is set to ",(0,i.yg)("strong",{parentName:"p"},"Copy Local"),":",(0,i.yg)("strong",{parentName:"p"},"False"),". You may need to remove all DLLs from ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateRVTParam.bundle/Contents/")," folder")))}v.isMDXComponent=!0;const C={toc:[{value:"Create a new .NET project",id:"create-a-new-net-project",level:3},{value:"Post-build event",id:"post-build-event",level:2}]},k="wrapper";function P(e){let{components:n,...o}=e;return(0,i.yg)(k,(0,a.A)({},C,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This step will help you create a basic 3ds Max plugin for Design Automation. The entire tutorial uses the Microsoft .NET framework, including the plugin for 3ds Max. Note that 3ds Max can be automated by MAXScript, Python, NET API, and C++. The 3ds Max .NET API is probably not the most used for plugins, however, for other Design Automatiuon products it is the typical API. 3ds Max resources for .NET API can be found here (2019 links, but .NET API is supported for all available versions of the 3ds Max Design Automation engines):"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max_sdk___the_learning_path_lesson_7_writing__net_plug_ins_html"},"Writing 3ds Max .NET plugins")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max__net_sdk_html"},"The 3ds Max .NET SDK")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://getcoreinterface.typepad.com/blog/2017/10/updated-net-api-samples-for-3ds-max-2018.html"},"GetCOREInterface Blog .NET Samples"))),(0,i.yg)("p",null,"Remember that for Design Automation, there should be no UI or prompts that cannot be automated. To automate the 3ds Max DA engine, you must provide some MAXScript. This is usually very easy as most customization can be exposed quickly to MAXScript (see ",(0,i.yg)("a",{parentName:"p",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max_sdk_features_function_publishing_html"},"function publishing for C++")," and ",(0,i.yg)("a",{parentName:"p",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=GUID-779FD7AC-953D-4567-B2A8-60B1D8695B95"},"MAXScript .NET handling"),")"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"You may ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/autodesk-platform-services/aps-design-automation-nodejs/tree/nodejs/bundles/UpdateMAXParam.zip"},"download the Bundle ZIP")," into the ",(0,i.yg)("inlineCode",{parentName:"p"},"bundles/")," (Node.js) or ",(0,i.yg)("inlineCode",{parentName:"p"},"/designAutomationSample/wwwroot/bundles")," (.NET 6) folder and ",(0,i.yg)("a",{parentName:"p",href:"#upload-plugin-bundle"},"skip to ",(0,i.yg)("strong",{parentName:"a"},"Upload Plugin Bundle")," section"),".")),(0,i.yg)("h3",{id:"create-a-new-net-project"},"Create a new .NET project"),(0,i.yg)("p",null,"Right-click on the solution, the ",(0,i.yg)("strong",{parentName:"p"},"Add")," >> ",(0,i.yg)("strong",{parentName:"p"},"New Project"),". Select ",(0,i.yg)("strong",{parentName:"p"},"Windows Desktop"),", then ",(0,i.yg)("strong",{parentName:"p"},"Class Library")," and, finally, name it ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateMAXParam"),". You will then need to reference the ",(0,i.yg)("inlineCode",{parentName:"p"},"Autodesk.Max.Dll")," managed assembly (3ds Max .NET API core module). This module is found in the ",(0,i.yg)("inlineCode",{parentName:"p"},"3dsmax.exe"),' folder and when referencing, make sure to turn off the "Copy Local" flag. There are a few other modules used for .NET API support (see ',(0,i.yg)("a",{parentName:"p",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max__net_sdk_html"},"The 3ds Max .NET SDK"),"), but for this tutorial we will use only Autodesk.Max.dll. Then search and install ",(0,i.yg)("inlineCode",{parentName:"p"},"Newtonsoft.Json")," (which is used to parse input data in JSON format)."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Please select .NET Framework 4.8. If not listed, ",(0,i.yg)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet-framework/net48"},"please install the Dev Pack"),".")),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(3622).A,width:"800",height:"450"})),(0,i.yg)("p",null,"As a result, the ",(0,i.yg)("strong",{parentName:"p"},"package.config")," should look like the following for the Newtonsoft.Json module."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-xml",metastring:"title=package.config",title:"package.config"},'<?xml version="1.0" encoding="utf-8"?>\n<packages>\n    <package id="Newtonsoft.Json" version="12.0.1" targetFramework="net47" />\n</packages>\n')),(0,i.yg)("p",null,"This is the main code that will run with 3ds Max. Copy the following content into ",(0,i.yg)("inlineCode",{parentName:"p"},"Command.cs"),". There are three classes to handle the Design Automation porcessing. First is the ",(0,i.yg)("inlineCode",{parentName:"p"},"InputParams")," that will be used to interface with the JSON input data. Next is ",(0,i.yg)("inlineCode",{parentName:"p"},"ParameterChanger")," class that is used to iterate the scene, and find all Casement Windows (but could be any object types as identified by the class ids). Finally the ",(0,i.yg)("inlineCode",{parentName:"p"},"RuntimeExecute")," is used to take the input and drive the automation. Also note there is a specialized logging that will output information to the Design Automation console. See the LogTrace function. Note that the ",(0,i.yg)("inlineCode",{parentName:"p"},"ILogSys")," 3ds Max managed class is used for this, and the flags used with the ",(0,i.yg)("inlineCode",{parentName:"p"},"LogEntry")," API indicated are necessary for the output to show in the Design Automation console."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs",metastring:"title=Commands.cs",title:"Commands.cs"},'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.IO;\n\nusing Newtonsoft.Json;\n\nusing Autodesk.Max;\n\nnamespace Autodesk.Forge.Sample.DesignAutomation.Max\n{\n    /// <summary>\n    /// Used to hold the parameters to change\n    /// </summary>\n    public class InputParams\n    {\n        public float Width { get; set; }\n        public float Height { get; set; }\n    }\n    /// <summary>\n    /// Changes parameters in automated way.\n    /// Iterate entire scene to get all nodes\n    /// In this example we specifically find Casement Windows by object class ID\n    /// Then modify the width and height based on inputs.\n    ///\n    /// Could be expanded to find other window types, other objects, etc.\n    /// </summary>\n    static public class ParameterChanger\n    {\n        static List<IINode> m_sceneNodes = new List<IINode> { };\n\n        /// <summary>\n        /// Recursively go through the scene and get all nodes\n        /// Use the Autodesk.Max APIs to get the children nodes\n        /// </summary>\n        static private void GetSceneNodes(IINode node)\n        {\n            m_sceneNodes.Add(node);\n\n            for (int i = 0; i < node.NumberOfChildren; i++)\n                GetSceneNodes(node.GetChildNode(i));\n        }\n\n        /// <summary>\n        /// Function to specifically update Case Windows with input wedth and height parameters\n        /// </summary>\n        /// <param name="width">The new Width to set the Window</param>\n        /// <param name="height">The new Height to set the Window</param>\n        /// <returns>window count</returns>\n        static public int UpdateWindowNodes(float width, float height)\n        {\n            IGlobal globalInterface = Autodesk.Max.GlobalInterface.Instance;\n            IInterface14 coreInterface = globalInterface.COREInterface14;\n\n            IINode nodeRoot = coreInterface.RootNode;\n            m_sceneNodes.Clear();\n            GetSceneNodes(nodeRoot);\n\n            // 3ds Max uses a class ID for all object types. This is easiest way to find specific type.\n            // ClassID (1902665597L, 1593788199L) == 0x71685F7D, 0x5EFF4727 for casement window\n            IClass_ID cidCasementWindow = globalInterface.Class_ID.Create(0x71685F7D, 0x5EFF4727);\n\n            // Use LINQ to filter for windows only - in case scene has more than one,\n            // but this should still give us at least one for single window scene!\n            var sceneWindows = from node in m_sceneNodes\n                               where ((node.ObjectRef != null) && // In some cases the ObjectRef can be null for certain node types.\n                                      (node.ObjectRef.ClassID.PartA == cidCasementWindow.PartA) &&\n                                      (node.ObjectRef.ClassID.PartB == cidCasementWindow.PartB))\n                               select node;\n\n            // Iterate the casement windws and update the hight and width parameters.\n            foreach (IINode item in sceneWindows)\n            {\n                // window is using old-style ParamArray rather than newer ParamBlk2\n                IIParamArray pb = item.ObjectRef.ParamBlock;\n                pb.SetValue(0, coreInterface.Time, height); // window height is at index zero.\n                pb.SetValue(1, coreInterface.Time, width); // window width is at index one.\n            }\n\n            // If there are windows, save the window updates\n            int status;\n            if (sceneWindows.Count() > 0)\n            {\n                // The output file name must match what the Design Automation work item is specifying as output file.\n                string full_filename = coreInterface.CurFilePath;\n                string filename = coreInterface.CurFileName;\n                string new_filename = full_filename.Replace(filename, "outputFile.max");\n                status = coreInterface.SaveToFile(new_filename, true, false);\n                if (status == 0) //error\n                    return -1;\n            }\n\n            // return how many windows were modified.\n            return sceneWindows.Count();\n        }\n\n    }\n\n    /// <summary>\n    /// This class is used to execute the automation. Above class could be connected to UI elements, or run by scripts directly.\n    /// This class takes the input from JSON input and uses those values. This way it is more cohesive to web development.\n    /// </summary>\n    static public class RuntimeExecute\n    {\n        static public int ModifyWindowWidthHeight()\n        {\n            int count = 0;\n\n            // Run entire code block with try/catch to help determine errors\n            try\n            {\n\n                // read input parameters from JSON file\n                InputParams inputParams = JsonConvert.DeserializeObject<InputParams>(File.ReadAllText("params.json"));\n\n                count = ParameterChanger.UpdateWindowNodes(inputParams.Width, inputParams.Height);\n\n            }\n            catch (Exception e)\n            {\n                LogTrace("Exception Error: " + e.Message);\n                return -1; //fail\n            }\n\n            LogTrace("Changed {0} Window objects.", count);\n            return count; // 0+ means success, and how many objects were changed.\n        }\n        /// <summary>\n        /// Information sent to this LogTrace will appear on the Design Automation output\n        /// </summary>\n        private static void LogTrace(string format, params object[] args)\n        {\n            System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly();\n            string output_msg = string.Format("DLL {0} compiled on {1}; {2}",\n                System.IO.Path.GetFileName(a.Location),\n                File.GetLastWriteTime(a.Location),\n                string.Format(format, args));\n\n            IGlobal globalInterface = Autodesk.Max.GlobalInterface.Instance;\n            IInterface14 coreInterface = globalInterface.COREInterface14;\n            ILogSys log = coreInterface.Log;\n            // Note flags are necessary to produce Design Automation output. This is same as C++:\n            // SYSLOG_INFO | SYSLOG_IGNORE_VERBOSITY | SYSLOG_BROADCAST\n            log.LogEntry(0x00000004 | 0x00040000 | 0x00010000, false, "", output_msg);\n        }\n    }\n}\n\n')),(0,i.yg)("p",null,"Create a folder named ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateMAXParam.bundle")," and inside this folder add a file named ",(0,i.yg)("inlineCode",{parentName:"p"},"PackageContents.xml"),". Copy the content listed below in the XML section into the PackageContents.xml file. Learn more at the ",(0,i.yg)("a",{parentName:"p",href:"https://help.autodesk.com/view/ACD/2023/ENU/?guid=GUID-BC76355D-682B-46ED-B9B7-66C95EEF2BD0"},"PackageContents.xml Format Reference"),". For more 3ds Max specific information for packaging your 3ds Max plugins see here ",(0,i.yg)("a",{parentName:"p",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_writing_plug_ins_packaging_plugins_html"},"Packaging Plugins")),(0,i.yg)("p",null,"This file will tell 3ds Max the modules to load (in this case the .NET API plugin assembly we are creating, but can also include MAXScripts, Python, and/or C++ plugins.) Because the plugin is being loaded through this feature, you only need to worry about the instructions to trigger your automation job. Please note that a unique ID for both ProductCode and UpgradeCode are required for 3ds Max to correctly load your code. See above mentioned documentation for details."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-xml",metastring:"tilte=PackageContents.xml",tilte:"PackageContents.xml"},'<?xml version="1.0" encoding="utf-8"?>\n<ApplicationPackage\n    SchemaVersion="1.0"\n    AutodeskProduct="3ds Max"\n    Name="Sample Design Automation Plugin for 3ds Max"\n    Description="A sample package to update parameters of a 3ds Max scene file containing a casement window"\n    AppVersion="2019.0.0"\n    FriendlyVersion="2019.0.0"\n    ProductType="Application"\n    SupportedLocales="Enu"\n    AppNameSpace="apps.autodesk.com"\n    Author="Autodesk Forge"\n    ProductCode="{6A8D06F4-C3DD-42DD-A69E-9B9617A7ABC0}"\n    UpgradeCode="{CE88CEA5-47F6-423E-B9EC-E9FA683B5228}"\n    >\n\n    <CompanyDetails Name="Autodesk"\n        Phone=" "\n        Url="http://forge.autodesk.com"\n        Email="noreply@autodesk.com" />\n\n    <RuntimeRequirements OS="Win64" Platform="3ds Max" SeriesMin="2019" SeriesMax="2021" />\n\n    <Components Description="assemblies parts">\n        <RuntimeRequirements OS="Win64" Platform="3ds Max" SeriesMin="2019" SeriesMax="2021" />\n        <ComponentEntry AppName="UpdateMAXParam" Version="2019.0.0" ModuleName="./Contents/UpdateMAXParam.dll" AppDescription="The Sample Design Automation Plugin managed assembly module" />\n    </Components>\n\n</ApplicationPackage>\n\n')),(0,i.yg)("p",null,"Finally, create a subfolder named ",(0,i.yg)("inlineCode",{parentName:"p"},"Contents")," and leave it empty. At this point, the project should look like.\n",(0,i.yg)("img",{src:t(7047).A,width:"305",height:"182"})),(0,i.yg)("h2",{id:"post-build-event"},"Post-build event"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"For Node.js it is required to adjust the AppBundle ZIP output folder.")),(0,i.yg)("p",null,"Now we need to ZIP the ",(0,i.yg)("inlineCode",{parentName:"p"},".bundle")," folder. Right-click on the project, select ",(0,i.yg)("strong",{parentName:"p"},"Properties"),", then open ",(0,i.yg)("strong",{parentName:"p"},"Build Events")," and copy the following into ",(0,i.yg)("strong",{parentName:"p"},"Post-build event command line")," field, as shown on the image below."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'xcopy /Y /F "$(TargetDir)*.dll" "$(ProjectDir)UpdateMAXParam.bundle\\Contents\\"\ndel /F "$(ProjectDir)..\\designAutomationSample\\wwwroot\\bundles\\UpdateMAXParam.zip"\n"C:\\Program Files\\7-Zip\\7z.exe" a -tzip "$(ProjectDir)../designAutomationSample/wwwroot/bundles/UpdateMAXParam.zip" "$(ProjectDir)UpdateMAXParam.bundle\\" -xr0!*.pdb\n')),(0,i.yg)("p",null,"This will copy the DLL from ",(0,i.yg)("inlineCode",{parentName:"p"},"/bin/debug/")," into ",(0,i.yg)("inlineCode",{parentName:"p"},".bundle/Contents")," folder, then use ",(0,i.yg)("a",{parentName:"p",href:"https://www.7-zip.org/"},"7zip")," to create a zip, then finally copy the ZIP into /bundles folders of the webapp."),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(9106).A,width:"838",height:"606"})),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Note how the ",(0,i.yg)("strong",{parentName:"p"},"Post-build event")," uses the project and folder names, so make sure you're using these names.")),(0,i.yg)("p",null,"If you build the ",(0,i.yg)("inlineCode",{parentName:"p"},"UpdateMAXParam")," project now you should see something like below in the ",(0,i.yg)("strong",{parentName:"p"},"Output")," window. Note that 2 folders and 3 files zipped. The zip file is created directly at the /wwwroot/bundles folder. This means you're doing great!"),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(8633).A,width:"1161",height:"487"})),(0,i.yg)("p",null,"At this point, you could test the functionality using the 3ds Max batch tool. It works similarly to the 3ds Max Design Automation engine and is a good way to test all your automation locally before sending the job to the Forge DA cloud services. For .NET Classes to be instantiated in MAXScript environment, we can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"dotNetClass")," MAXScript function. For this sample project, the MAXScript code would look like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ms",metastring:"title=MAXScript",title:"MAXScript"},'fn UpdateParam =\n(\n    da = dotNetClass("Autodesk.Forge.Sample.DesignAutomation.Max.RuntimeExecute")\n    da.ModifyWindowWidthHeight()\n)\n\nUpdateParam()\n')),(0,i.yg)("p",null,"To execute this locally, we could do test a a command-line prompt with something like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-CommandLine"},'"%ADSK_3DSMAX_x64_2019%\\3dsmaxbatch.exe" -sceneFile <myTestScene>.max da_script.ms\n')),(0,i.yg)("p",null,"Later in this tutorial you will see these same instructions being sent to the 3ds Max Design Automation engine."))}P.isMDXComponent=!0;var D=t(9489),I=t(7227);function S(e){let{AutoCAD:n,Inventor:t,Revit:a,Max:i}=e;return o.createElement(D.A,{groupId:"Engine"},o.createElement(I.A,{value:"AutoCAD",label:"AutoCAD Plugin",default:!0},o.createElement(n,null)),o.createElement(I.A,{value:"Inventor",label:"Inventor Plugin"},o.createElement(t,null)),o.createElement(I.A,{value:"Revit",label:"Revit Plugin"},o.createElement(a,null)),o.createElement(I.A,{value:"Max",label:"3ds Max Plugin"},o.createElement(i,null)))}var T=t(4472);const x={},E="Create Plugin",F={unversionedId:"tutorials/design-automation/prepare-plugin",id:"tutorials/design-automation/prepare-plugin",title:"Create Plugin",description:"Design Automation uses .bundle just like the Autodesk App Store, meaning you need to create a PackageContents.xml and a ZIP with the DLL (and other required files). For detailed information on how to create them, please visit Autodesk App Store Developer Center.",source:"@site/docs/03-tutorials/04-design-automation/02-prepare-plugin.mdx",sourceDirName:"03-tutorials/04-design-automation",slug:"/tutorials/design-automation/prepare-plugin",permalink:"/tutorials/design-automation/prepare-plugin",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/04-design-automation/02-prepare-plugin.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic UI",permalink:"/tutorials/design-automation/basic-app-ui"},next:{title:"Define Activity",permalink:"/tutorials/design-automation/define-activity"}},j={},B=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Additional prerequisites",id:"additional-prerequisites",level:3},{value:"Choose the engine",id:"choose-the-engine",level:3},{value:"Upload Plugin Bundle",id:"upload-plugin-bundle",level:3}],M={toc:B},R="wrapper";function _(e){let{components:n,...t}=e;return(0,i.yg)(R,(0,a.A)({},M,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"create-plugin"},"Create Plugin"),(0,i.yg)("p",null,"Design Automation uses ",(0,i.yg)("inlineCode",{parentName:"p"},".bundle")," just like the ",(0,i.yg)("a",{parentName:"p",href:"https://www.autodesk.com/developer-network/app-store"},"Autodesk App Store"),", meaning you need to create a PackageContents.xml and a ZIP with the DLL (and other required files). For detailed information on how to create them, please visit Autodesk App Store Developer Center."),(0,i.yg)("p",null,"At this section we will create a basic plugin that update width and height parameter and save the resulting file. Also the supporting files (PackageContents.xml) and the folder structure to place them. Finally create a .ZIP file ready to upload to Design Automation."),(0,i.yg)("p",null,"In the root folder, create a ",(0,i.yg)("inlineCode",{parentName:"p"},"bundles")," folder."),(0,i.yg)("img",{src:s,style:{width:300}}),(0,i.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"7zip: use to create the .ZIP with bundle files, please install from here. This tutorial assumes 7zip is installed on the default folder: ",(0,i.yg)("inlineCode",{parentName:"li"},"C:\\Program Files\\7-Zip\\7z.exe"),".")),(0,i.yg)("h3",{id:"additional-prerequisites"},"Additional prerequisites"),(0,i.yg)("p",null,"For the next session you can use the pre-build plugin. Or if you decide to build it, you will need"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Visual Studio"),": Visual Studio 2019 or newer is required, please visit ",(0,i.yg)("a",{parentName:"p",href:"https://visualstudio.microsoft.com/vs/"},"this link"),".")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"AutoCAD, Inventor, Revit or 3ds Max"),": In order to develop, test and debug your Design Automation plugin: ",(0,i.yg)("a",{parentName:"p",href:"https://www.autodesk.com/products/autocad/overview"},"AutoCAD")," | ",(0,i.yg)("a",{parentName:"p",href:"https://www.autodesk.com/products/inventor/overview"},"Inventor")," | ",(0,i.yg)("a",{parentName:"p",href:"https://www.autodesk.com/products/revit/overview"},"Revit")," | ",(0,i.yg)("a",{parentName:"p",href:"https://www.autodesk.com/products/3ds-max/overview"},"3ds Max"),"."))),(0,i.yg)("hr",null),(0,i.yg)("p",null,"For the next step, choose the ",(0,i.yg)("strong",{parentName:"p"},"Engine"),", which is the Autodesk application where you plugin will run. You'll need the respective application installed in order to compile, debug and test locally."),(0,i.yg)("h3",{id:"choose-the-engine"},"Choose the engine"),(0,i.yg)(S,{AutoCAD:y,Inventor:w,Revit:v,Max:P,mdxType:"EngineTabs"}),(0,i.yg)("h3",{id:"upload-plugin-bundle"},"Upload Plugin Bundle"),(0,i.yg)("p",null,"Now the ZIP bundle is ready, let's upload to Design Automation."),(0,i.yg)(T.A,{NodeJsVsCode:m,DotNetVsCode:u,DotNetVs2022:u,mdxType:"EnvTabs"}),(0,i.yg)("p",null,"If you run the webapp now and click on Configure (top-right), you should see your AppBundle and a list of all available engines. Buttons do not work yet... let's move forward."),(0,i.yg)("img",{src:r,style:{width:800}}))}_.isMDXComponent=!0},9484:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/new_project-403a842ad8e357cf40a50b6362ec12ab.gif"},9489:(e,n,t)=>{t.d(n,{A:()=>N});var a=t(8168),o=t(6540),i=t(53),r=t(4245),s=t(6347),l=t(2814),p=t(5167),u=t(1269);function d(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:o}}=e;return{value:n,label:t,attributes:a,default:o}}))}function c(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,p.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(i),(0,o.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=c(e),[r,s]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[l,p]=g({queryString:t,groupId:a}),[d,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,u.Dv)(t);return[a,(0,o.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),y=(()=>{const e=l??d;return m({value:e,tabValues:i})?e:null})();(0,o.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),h(e)}),[p,h,i]),tabValues:i}}var y=t(1062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.a_)(),c=e=>{const n=e.currentTarget,t=u.indexOf(n),a=p[t].value;a!==s&&(d(n),l(a))},m=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:r}=e;return o.createElement("li",(0,a.A)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:c},r,{className:(0,i.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":s===n})}),t??n)})))}function w(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function A(e){const n=h(e);return o.createElement("div",{className:(0,i.A)("tabs-container",f.tabList)},o.createElement(b,(0,a.A)({},e,n)),o.createElement(w,(0,a.A)({},e,n)))}function N(e){const n=(0,y.A)();return o.createElement(A,(0,a.A)({key:String(n)},e))}},9904:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/build_output-bf11b609b2d0a6cf727ce6c8ec88ea41.png"}}]);