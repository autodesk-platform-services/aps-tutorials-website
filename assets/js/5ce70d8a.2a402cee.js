"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[9182],{5169:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/basic-extension-final-app-ba7448212e6bb1885cd82f20b8c1d2f3.webp"},5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),h=a,g=c["".concat(l,".").concat(h)]||c[h]||p[h]||i;return t?o.createElement(g,r(r({ref:n},u),{},{components:t})):o.createElement(g,r({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,r[1]=s;for(var d=2;d<i;d++)r[d]=t[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},7227:(e,n,t)=>{t.d(n,{A:()=>r});var o=t(6540),a=t(53);const i={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,r),hidden:t},n)}},8788:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/model-browser-6910550ba52b9cd1207d136223711883.webp"},9140:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var o=t(8168),a=(t(6540),t(5680)),i=t(9489),r=t(7227);const s={},l="Basic Extension",d={unversionedId:"tutorials/dashboard/basic",id:"tutorials/dashboard/basic",title:"Basic Extension",description:"The Viewer component in Autodesk Platform Services provides its own set of APIs",source:"@site/docs/03-tutorials/03-dashboard/01-basic.mdx",sourceDirName:"03-tutorials/03-dashboard",slug:"/tutorials/dashboard/basic",permalink:"/tutorials/dashboard/basic",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/03-dashboard/01-basic.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dashboard",permalink:"/tutorials/dashboard/"},next:{title:"Model Summary",permalink:"/tutorials/dashboard/panel"}},u={},c=[{value:"Extension skeleton",id:"extension-skeleton",level:2},{value:"Event handling",id:"event-handling",level:2},{value:"Metadata queries",id:"metadata-queries",level:2},{value:"Simple extension",id:"simple-extension",level:2},{value:"Try it out",id:"try-it-out",level:2}],p={toc:c},h="wrapper";function g(e){let{components:n,...s}=e;return(0,a.yg)(h,(0,o.A)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"basic-extension"},"Basic Extension"),(0,a.yg)("p",null,"The Viewer component in Autodesk Platform Services provides its own set of ",(0,a.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/Viewing/Viewer3D"},"APIs"),"\nthat you can use to customize its look and feel, behavior, and even the rendered content. While you ",(0,a.yg)("em",{parentName:"p"},"could"),"\nsimply sprinkle your custom viewer logic in random places of the client-side code, it is a good practice\nto encapsulate any viewer functionality into a ",(0,a.yg)("em",{parentName:"p"},"viewer extension"),". That way you can easily share the same\nfunctionality across different pages of your web application, and even across different projects entirely."),(0,a.yg)("p",null,"Let's start by implementing a simple viewer extension that will react to various viewer events, and output\ndifferent types of information about the currently loaded design."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"If you don't have an existing APS application to start with, you can use one of the apps from\nprevious tutorials. Here's a quick way to get the ",(0,a.yg)("a",{parentName:"p",href:"../simple-viewer"},"Simple Viewer")," application\nrunning locally using your preferred programming language:"),(0,a.yg)(i.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"nodejs",label:"Node.js",default:!0,mdxType:"TabItem"},(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"Create APS credentials if you don't have them already (see ",(0,a.yg)("a",{parentName:"li",href:"/"},"Getting Started")," for\nmore details)"),(0,a.yg)("li",{parentName:"ul"},"Make sure you have ",(0,a.yg)("a",{parentName:"li",href:"https://nodejs.org/en/download"},"Node.js"),", ",(0,a.yg)("a",{parentName:"li",href:"https://git-scm.com/"},"git"),",\nand a Unix-like terminal installed",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"On Windows systems, you can install ",(0,a.yg)("a",{parentName:"li",href:"https://gitforwindows.org"},"Git for Windows"),"\nwhich comes bundled with a ",(0,a.yg)("inlineCode",{parentName:"li"},"bash")," terminal"))),(0,a.yg)("li",{parentName:"ul"},"Open the terminal and run the following commands:")),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/autodesk-platform-services/aps-simple-viewer-nodejs\ncd aps-simple-viewer-nodejs\nnpm install\nAPS_CLIENT_ID="your client id" APS_CLIENT_SECRET="your client secret" npm start\n')),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"Open the browser and navigate to ",(0,a.yg)("a",{parentName:"li",href:"http://localhost:8080"},"http://localhost:8080")))),(0,a.yg)(r.A,{value:"dotnet",label:".NET 8",mdxType:"TabItem"},(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"Create APS credentials if you don't have them already (see ",(0,a.yg)("a",{parentName:"li",href:"/"},"Getting Started")," for\nmore details)"),(0,a.yg)("li",{parentName:"ul"},"Make sure you have ",(0,a.yg)("a",{parentName:"li",href:"https://dotnet.microsoft.com/en-us/download/dotnet/8.0"},".NET 8"),",\n",(0,a.yg)("a",{parentName:"li",href:"https://git-scm.com/"},"git"),", and a Unix-like terminal installed",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"On Windows systems, you can install ",(0,a.yg)("a",{parentName:"li",href:"https://gitforwindows.org"},"Git for Windows"),"\nwhich comes bundled with a ",(0,a.yg)("inlineCode",{parentName:"li"},"bash")," terminal"))),(0,a.yg)("li",{parentName:"ul"},"Open the terminal and run the following commands:")),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'git clone https://github.com/autodesk-platform-services/aps-simple-viewer-dotnet\ncd aps-simple-viewer-dotnet\ndotnet build\nAPS_CLIENT_ID="your client id" APS_CLIENT_SECRET="your client secret" dotnet run\n')),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"Open the browser and navigate to ",(0,a.yg)("a",{parentName:"li",href:"http://localhost:8080"},"http://localhost:8080")))))),(0,a.yg)("h2",{id:"extension-skeleton"},"Extension skeleton"),(0,a.yg)("p",null,"Later in this tutorial we will implement other extensions that may share similar functionality, so we will\nfirst implement a base class that all the extensions will be derived from."),(0,a.yg)("p",null,"Go to the folder that contains your client side assets such as the ",(0,a.yg)("inlineCode",{parentName:"p"},"index.html")," page (in our case it's\nthe ",(0,a.yg)("inlineCode",{parentName:"p"},"wwwroot")," folder), and create a new subfolder called ",(0,a.yg)("inlineCode",{parentName:"p"},"extensions"),". This is where we will store all\nour viewer extensions. Create a ",(0,a.yg)("inlineCode",{parentName:"p"},"BaseExtension.js")," file in the ",(0,a.yg)("inlineCode",{parentName:"p"},"extensions")," folder, and populate it with\nthe following content:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/BaseExtension.js"',title:'"wwwroot/extensions/BaseExtension.js"'},"export class BaseExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n\n    load() {\n        return true;\n    }\n\n    unload() {\n        return true;\n    }\n}\n")),(0,a.yg)("p",null,"As you can see, a viewer extension is basically a subclass of ",(0,a.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/Viewing/Extension"},"Autodesk.Viewing.Extension"),"\nthat overrides some of its lifecycle methods. For now we have overridden the following methods:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"load")," - called when the extension is loaded by the viewer, returning a boolean flag indicating whether the loading was successful"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"unload")," - called when the extension is unloaded by the viewer, returning a boolean flag indicating whether the unloading was successful")),(0,a.yg)("p",null,'In its constructor the extension always receives the instance of the viewer that "owns" this extension,\nand optionally another object with extension-specific inputs.'),(0,a.yg)("h2",{id:"event-handling"},"Event handling"),(0,a.yg)("p",null,'Now, let\'s update our extension so that it reacts to different kinds of events in the viewer, for example,\nwhen a new model is loaded, when the user selects one or more elements, or when one or more elements are\n"isolated". Update the ',(0,a.yg)("inlineCode",{parentName:"p"},"BaseExtension")," class with the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/BaseExtension.js"',title:'"wwwroot/extensions/BaseExtension.js"'},"export class BaseExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        // highlight-start\n        this._onObjectTreeCreated = (ev) => this.onModelLoaded(ev.model);\n        this._onSelectionChanged = (ev) => this.onSelectionChanged(ev.model, ev.dbIdArray);\n        this._onIsolationChanged = (ev) => this.onIsolationChanged(ev.model, ev.nodeIdArray);\n        // highlight-end\n    }\n\n    load() {\n        // highlight-start\n        this.viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.addEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        // highlight-end\n        return true;\n    }\n\n    unload() {\n        // highlight-start\n        this.viewer.removeEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.removeEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        // highlight-end\n        return true;\n    }\n\n    // highlight-start\n    onModelLoaded(model) {}\n\n    onSelectionChanged(model, dbids) {}\n\n    onIsolationChanged(model, dbids) {}\n    // highlight-end\n}\n")),(0,a.yg)("p",null,"As you can see, the viewer provides ",(0,a.yg)("inlineCode",{parentName:"p"},"addEventListener")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"removeEventListener")," methods that we can use\nto handle different viewer events. In this case we're handling the ",(0,a.yg)("inlineCode",{parentName:"p"},"OBJECT_TREE_CREATED_EVENT"),",\n",(0,a.yg)("inlineCode",{parentName:"p"},"SELECTION_CHANGED_EVENT"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"ISOLATE_EVENT")," events by calling the ",(0,a.yg)("inlineCode",{parentName:"p"},"onModelLoaded"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"onSelectionChanged"),",\nand ",(0,a.yg)("inlineCode",{parentName:"p"},"onIsolationChanged")," methods respectively. For now these methods don't do anything - we will override\nthem in other extensions derived from the ",(0,a.yg)("inlineCode",{parentName:"p"},"BaseExtension")," class."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Full list of viewer events can be found at\n",(0,a.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/Viewing/#events"},"https://aps.autodesk.com/en/docs/viewer/v7/reference/Viewing/#events"),".")),(0,a.yg)("h2",{id:"metadata-queries"},"Metadata queries"),(0,a.yg)("p",null,"Most of the extensions in this tutorial will need to access the metadata of the currently loaded design,\nfor example, to iterate through the design's logical hierarchy, or to query properties of elements."),(0,a.yg)("p",null,"In the viewer UI, logical hierarchy is what you see in the ",(0,a.yg)("em",{parentName:"p"},"Model")," panel:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Model browser",src:t(8788).A,width:"1500",height:"890"})),(0,a.yg)("p",null,"To navigate the logical hierarchy programatically, the viewer API provides a structure called\nan ",(0,a.yg)("em",{parentName:"p"},"instance tree")," (or an ",(0,a.yg)("em",{parentName:"p"},"object tree"),") that simply defines parent-child relationships between\ndifferent design elements, called ",(0,a.yg)("em",{parentName:"p"},"nodes"),". For example, you can use this structure to find\nall children of a specific node, to find a parent of a node, or to ",(0,a.yg)("em",{parentName:"p"},"recursively")," enumerate all\nchildren of a given node. Nodes without any children - we call them ",(0,a.yg)("em",{parentName:"p"},"leaf nodes")," - are usually\nmore interesting for us as they contain more metadata than the internal nodes."),(0,a.yg)("p",null,"Let's update our ",(0,a.yg)("inlineCode",{parentName:"p"},"BaseExtension")," class with a couple of helper methods:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/BaseExtension.js"',title:'"wwwroot/extensions/BaseExtension.js"'},"export class BaseExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._onObjectTreeCreated = (ev) => this.onModelLoaded(ev.model);\n        this._onSelectionChanged = (ev) => this.onSelectionChanged(ev.model, ev.dbIdArray);\n        this._onIsolationChanged = (ev) => this.onIsolationChanged(ev.model, ev.nodeIdArray);\n    }\n\n    load() {\n        this.viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.addEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        return true;\n    }\n\n    unload() {\n        this.viewer.removeEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.removeEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        return true;\n    }\n\n    onModelLoaded(model) {}\n\n    onSelectionChanged(model, dbids) {}\n\n    onIsolationChanged(model, dbids) {}\n\n    // highlight-start\n    findLeafNodes(model) {\n        return new Promise(function (resolve, reject) {\n            model.getObjectTree(function (tree) {\n                let leaves = [];\n                tree.enumNodeChildren(tree.getRootId(), function (dbid) {\n                    if (tree.getChildCount(dbid) === 0) {\n                        leaves.push(dbid);\n                    }\n                }, true /* recursively enumerate children's children as well */);\n                resolve(leaves);\n            }, reject);\n        });\n    }\n    // highlight-end\n\n    // highlight-start\n    async findPropertyNames(model) {\n        const dbids = await this.findLeafNodes(model);\n        return new Promise(function (resolve, reject) {\n            model.getBulkProperties(dbids, {}, function (results) {\n                let propNames = new Set();\n                for (const result of results) {\n                    for (const prop of result.properties) {\n                        propNames.add(prop.displayName);\n                    }\n                }\n                resolve(Array.from(propNames.values()));\n            }, reject);\n        });\n    }\n    // highlight-end\n}\n")),(0,a.yg)("p",null,"Here we're starting to use the ",(0,a.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/Viewing/Model"},"Model")," class\n(representing the currently loaded design) and some of its methods, for example:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/Viewing/Model/#getobjecttree-onsuccesscallback-onerrorcallback"},"Model#getObjectTree")," - used to\nretrieve the model's instance tree"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/Viewing/Model/#getbulkproperties-dbids-options-onsuccesscallback-onerrorcallback"},"Model#getBulkProperties")," - used to\nretrieve the metadata for one or more objects"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/Private/InstanceTree/#getrootid"},"InstanceTree#getRootId")," - returning the ID of the root object"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/Private/InstanceTree/#enumnodechildren-node-callback-recursive"},"InstanceTree#enumNodeChildren")," - used to\nrecursively enumerate all children of a specific object")),(0,a.yg)("h2",{id:"simple-extension"},"Simple extension"),(0,a.yg)("p",null,"Alright, now to try this new functionality in the viewer, let's create another extension\nderived from the ",(0,a.yg)("inlineCode",{parentName:"p"},"BaseExtension")," class, and load it in our viewer application. Create a\n",(0,a.yg)("inlineCode",{parentName:"p"},"LoggerExtension.js")," file in the same folder where ",(0,a.yg)("inlineCode",{parentName:"p"},"BaseExtension.js")," is located, and\npopulate it with the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/LoggerExtension.js"',title:'"wwwroot/extensions/LoggerExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\n\nclass LoggerExtension extends BaseExtension {\n    load() {\n        super.load();\n        console.log('LoggerExtension loaded.');\n        return true;\n    }\n\n    unload() {\n        super.unload();\n        console.log('LoggerExtension unloaded.');\n        return true;\n    }\n\n    async onModelLoaded(model) {\n        super.onModelLoaded(model);\n        const props = await this.findPropertyNames(this.viewer.model);\n        console.log('New model has been loaded. Its objects contain the following properties:', props);\n    }\n\n    async onSelectionChanged(model, dbids) {\n        super.onSelectionChanged(model, dbids);\n        console.log('Selection has changed', dbids);\n    }\n\n    onIsolationChanged(model, dbids) {\n        super.onIsolationChanged(model, dbids);\n        console.log('Isolation has changed', dbids);\n    }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('LoggerExtension', LoggerExtension);\n")),(0,a.yg)("p",null,"The new extension simply overrides methods of the ",(0,a.yg)("inlineCode",{parentName:"p"},"BaseExtension")," class, and outputs some\nuseful information to the browser console in reaction to different viewer events."),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Browser console is essential for web development and debugging. Learn more on how to use it for\n",(0,a.yg)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/console/"},"Chrome"),",\n",(0,a.yg)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console"},"Edge"),",\n",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console"},"Firefox"),",\nand ",(0,a.yg)("a",{parentName:"p",href:"https://developer.apple.com/safari/tools/"},"Safari"),".")),(0,a.yg)("p",null,"We also ",(0,a.yg)("strong",{parentName:"p"},"register")," the extension under a specific unique ID so that the viewer can later find it.\nThis is done via a singleton object called ",(0,a.yg)("inlineCode",{parentName:"p"},"Autodesk.Viewing.theExtensionManager")," and its\n",(0,a.yg)("inlineCode",{parentName:"p"},"registerExtension(extensionId, extensionClass)")," method."),(0,a.yg)("p",null,"Now, let's make sure the extension code is loaded by our web application. In our case we can simply\nadd the following ",(0,a.yg)("inlineCode",{parentName:"p"},"import")," statement to the top of the ",(0,a.yg)("inlineCode",{parentName:"p"},"wwwroot/viewer.js")," file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import './extensions/LoggerExtension.js';\n")),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"If you're working with a different application source code, you may need to include the file\nusing a ",(0,a.yg)("inlineCode",{parentName:"p"},"<script>")," tag in your ",(0,a.yg)("inlineCode",{parentName:"p"},"index.html")," page, for example, like so:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<script type="module" src="extensions/LoggerExtension.js"><\/script>\n'))),(0,a.yg)("p",null,"Finally, we need to tell the viewer to load this extension. Open the ",(0,a.yg)("inlineCode",{parentName:"p"},"wwwroot/viewer.js")," file,\nfind the line where the ",(0,a.yg)("inlineCode",{parentName:"p"},"GuiViewer3D")," class is instantiated, and pass in a custom configuration\nobject listed below as the second parameter to the constructor. If you are already passing a custom\nconfig to the constructor, simply include the ",(0,a.yg)("inlineCode",{parentName:"p"},"'LoggerExtension'")," string to its ",(0,a.yg)("inlineCode",{parentName:"p"},"extensions")," list."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"const config = {\n    extensions: [\n        'LoggerExtension'\n    ]\n};\nconst viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n")),(0,a.yg)("h2",{id:"try-it-out"},"Try it out"),(0,a.yg)("p",null,"And with that, our first extension is ready to use. It doesn't have any user interface\nbut we can test it out in the browser console. Start your application as usual, view it\nin the browser, open the browser console, and load one of your designs into the viewer.\nWhen the model finishes loading, our ",(0,a.yg)("inlineCode",{parentName:"p"},"LoggerExtension")," will list all properties used\nin this model to the console. And if we select one or more objects in the viewer,\nthe extension will list their IDs."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Summary Result",src:t(5169).A,width:"3465",height:"1736"})))}g.isMDXComponent=!0},9489:(e,n,t)=>{t.d(n,{A:()=>E});var o=t(8168),a=t(6540),i=t(53),r=t(4245),s=t(6347),l=t(2814),d=t(5167),u=t(1269);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:a}}=e;return{value:n,label:t,attributes:o,default:a}}))}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const o=(0,s.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace({...o.location,search:n.toString()})}),[i,o])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,i=p(e),[r,s]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:i}))),[l,d]=g({queryString:t,groupId:o}),[c,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,i]=(0,u.Dv)(t);return[o,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:o}),y=(()=>{const e=l??c;return h({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),m(e)}),[d,m,i]),tabValues:i}}var y=t(1062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:d}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),p=e=>{const n=e.currentTarget,t=u.indexOf(n),o=d[t].value;o!==s&&(c(n),l(o))},h=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n)},d.map((e=>{let{value:n,label:t,attributes:r}=e;return a.createElement("li",(0,o.A)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>u.push(e),onKeyDown:h,onClick:p},r,{className:(0,i.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":s===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:o}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==o}))))}function b(e){const n=m(e);return a.createElement("div",{className:(0,i.A)("tabs-container",f.tabList)},a.createElement(w,(0,o.A)({},e,n)),a.createElement(v,(0,o.A)({},e,n)))}function E(e){const n=(0,y.A)();return a.createElement(b,(0,o.A)({key:String(n)},e))}}}]);