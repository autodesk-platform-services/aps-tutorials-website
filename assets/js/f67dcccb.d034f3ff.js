"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[3927],{4472:(e,s,t)=>{t.d(s,{A:()=>o});var n=t(6540),r=t(9489),a=t(7227);function o(e){let{NodeJsVsCode:s,DotNetVsCode:t,DotNetVs2022:o}=e;return n.createElement(r.A,{groupId:"development-environment"},n.createElement(a.A,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},n.createElement(s,null)),n.createElement(a.A,{value:"dotnet-vscode",label:".NET & VSCode"},n.createElement(t,null)),n.createElement(a.A,{value:"dotnet-vs2022",label:".NET & VS2022"},n.createElement(o,null)))}},5178:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>E,contentTitle:()=>S,default:()=>O,frontMatter:()=>j,metadata:()=>P,toc:()=>R});var n=t(8168),r=(t(6540),t(5680)),a=t(4472);const o={toc:[]},i="wrapper";function u(e){let{components:s,...t}=e;return(0,r.yg)(i,(0,n.A)({},o,t,{components:s,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Next, let's expose the routings to extract and import issues to the client-side code through set of endpoints.\nCreate ",(0,r.yg)("inlineCode",{parentName:"p"},"issues.js")," file under the ",(0,r.yg)("strong",{parentName:"p"},"routes")," subfolder with the following content:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/issues.js"',title:'"routes/issues.js"'},"const express = require('express');\nvar bodyParser = require('body-parser');\n\nconst { authRefreshMiddleware,\n        getIssues,\n        createOrModifyIssues \n        } = require('../services/aps.js');\n\nlet router = express.Router();\n\nrouter.use(authRefreshMiddleware); \n\n//get issues\nrouter.get('/api/issues/issues', async function(req, res, next){\n    try {\n        const issues = await getIssues(req.query.projectId,req.internalOAuthToken.access_token);\n        res.json(issues);\n    } catch (err) {\n        next(err);\n    }\n});\n\n//create new issue or modify issue\nrouter.post('/api/issues/issues', bodyParser.json(), async function (req, res, next) {\n    const projectId = req.body.projectId;\n    const issues =  req.body.data;\n \n    try {\n        const importResults = await createOrModifyIssues(projectId,req.internalOAuthToken.access_token,issues);\n        res.json(importResults);\n\n    } catch (err) {\n        next(err);\n    }  \n});\n\nmodule.exports = router;\n")),(0,r.yg)("p",null,"And mount the router to our server application by modifying ",(0,r.yg)("inlineCode",{parentName:"p"},"server.js"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst session = require('cookie-session');\nconst { PORT, SERVER_SESSION_SECRET } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\napp.use(session({ secret: SERVER_SESSION_SECRET, maxAge: 24 * 60 * 60 * 1000 }));\napp.use(require('./routes/auth.js'));\napp.use(require('./routes/hubs.js'));\n// highlight-start\napp.use(require('./routes/issues.js'));\n// highlight-end\napp.listen(PORT, () => console.log(`Server listening on port ${PORT}...`));\n")))}u.isMDXComponent=!0;const l={toc:[]},c="wrapper";function p(e){let{components:s,...t}=e;return(0,r.yg)(c,(0,n.A)({},l,t,{components:s,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"// ACC Assue APIs\n\n//Extract Issue Data\nservice.getIssues = async (projectId, token) => {\n    let allIssues = [];\n    let offset = 0;\n    let totalResults = 0;\n    do{ \n        const resp = await issuesClient.getIssues(projectId, {accessToken:token,offset:offset});\n        allIssues = allIssues.concat(resp.results);\n        offset += resp.pagination.limit;\n        totalResults = resp.pagination.totalResults;\n    }while (offset < totalResults) \n    return allIssues;\n};\n")))}p.isMDXComponent=!0;const d={toc:[{value:"Extract Issues",id:"extract-issues",level:2}]},m="wrapper";function g(e){let{components:s,...t}=e;return(0,r.yg)(m,(0,n.A)({},d,t,{components:s,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Add the ",(0,r.yg)("inlineCode",{parentName:"p"},"@aps_sdk/construction-issues")," library, and also create an instance of\nSDK client of ",(0,r.yg)("inlineCode",{parentName:"p"},"IssuesClient")," at the beginning of ",(0,r.yg)("inlineCode",{parentName:"p"},"services/aps.js")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"const { SdkManagerBuilder } = require('@aps_sdk/autodesk-sdkmanager');\nconst { AuthenticationClient, Scopes, ResponseType } = require('@aps_sdk/authentication');\nconst { DataManagementClient } = require('@aps_sdk/data-management');\n// highlight-start\nconst { IssuesClient } = require('@aps_sdk/construction-issues');\n// highlight-end\nconst { APS_CLIENT_ID, APS_CLIENT_SECRET, APS_CALLBACK_URL, INTERNAL_TOKEN_SCOPES, PUBLIC_TOKEN_SCOPES } = require('../config.js');\n\nconst service = module.exports = {};\n\nconst sdk = SdkManagerBuilder.create().build();\nconst authenticationClient = new AuthenticationClient(sdk);\nconst dataManagementClient = new DataManagementClient(sdk);\n// highlight-start\nconst issuesClient = new IssuesClient(sdk);\n// highlight-end\n")),(0,r.yg)("h2",{id:"extract-issues"},"Extract Issues"),(0,r.yg)("p",null,"Next, we will add a couple of helper functions to extract issues. Append the following code to the end of the ",(0,r.yg)("inlineCode",{parentName:"p"},"services/aps.js")," file.\nWe will extract 100 issues in one call and move to the next 100 issues until all issues are fetched."),(0,r.yg)(p,{mdxType:"NodeJsVsCodeExtractIssues"}))}g.isMDXComponent=!0;const y={toc:[]},f="wrapper";function h(e){let{components:s,...t}=e;return(0,r.yg)(f,(0,n.A)({},y,t,{components:s,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Append the following code to the end of the services/aps.js file. "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"//import issues (create new issue or modify existing issue)\nservice.createOrModifyIssues = async (projectId,token,data) => {\n    \n    let results = {\n        created:[],\n        modified:[],\n        failed:[]\n    } \n\n    await Promise.all(\n        data.map(async (oneIssueData)=>{\n        try{\n            //remove unsupported fields and build the payload \n            const {id, csvRowNum, ...payload } = oneIssueData;\n            if(id == '' || id==undefined || id==null){\n                //create new issue\n                const resp = await issuesClient.createIssue(projectId,payload,{accessToken:token});\n                results.created.push({id:resp.id,csvRowNum:oneIssueData.csvRowNum}); \n            }else{\n                 //modify an issue\n                const resp = await issuesClient.patchIssueDetails(projectId,id,payload,{accessToken:token});\n                results.modified.push({id:resp.id,csvRowNum:oneIssueData.csvRowNum});\n            }\n        }catch(e){\n            results.failed.push({csvRowNum:oneIssueData.csvRowNum,reason:e.toString()}); \n        }\n    })); \n\n    return results;\n};\n\n")))}h.isMDXComponent=!0;const I={toc:[]},v="wrapper";function b(e){let{components:s,...t}=e;return(0,r.yg)(v,(0,n.A)({},I,t,{components:s,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Create a ",(0,r.yg)("inlineCode",{parentName:"p"},"IssuesController.cs")," file under the ",(0,r.yg)("inlineCode",{parentName:"p"},"Controllers")," subfolder with the following content:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="Controoler/IssuesController.cs"',title:'"Controoler/IssuesController.cs"'},'using System.Threading.Tasks;\nusing aps_acc_issues_dotnet.Models;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class IssuesController : ControllerBase\n{\n    private readonly ILogger<IssuesController> _logger;\n    private readonly APS _aps;\n\n     private JsonSerializerSettings settings = new JsonSerializerSettings\n    {\n         ContractResolver = new ForceIncludeNullsResolver(),\n         NullValueHandling = NullValueHandling.Include\n    };\n\n    public IssuesController(ILogger<IssuesController> logger, APS aps)\n    {\n        _logger = logger;\n        _aps = aps;\n    }\n\n    [HttpGet("issues")]\n    public async Task<ActionResult<string>> ListIssues(string projectId)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n\n        var issues = await _aps.GetIssues(Request.Query["projectId"], tokens);  \n        return JsonConvert.SerializeObject(issues,settings);\n    }\n  \n        //create new issue or modify issue\n    [HttpPost("issues")]\n    public async Task<ActionResult> CreateOrModifyIssues([FromBody] JObject content)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n\n        string projectId = content["projectId"].Value<string>();\n        dynamic issues = content["data"].Value<dynamic>();\n\n        var status = await _aps.CreateOrModifyACCIssues(projectId, tokens, issues);\n\n        return Ok(new { created = status.created, modified = status.modified, failed = status.failed });\n    }\n}\n    //include the fields whose value =null when  JsonConvert.SerializeObject\n    public class ForceIncludeNullsResolver : DefaultContractResolver\n    {\n        protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization)\n        {\n            var prop = base.CreateProperty(member, memberSerialization);\n\n            // Always include properties, even if they\'re null\n            prop.NullValueHandling = NullValueHandling.Include;\n            prop.DefaultValueHandling = DefaultValueHandling.Include;\n\n            return prop;\n        }\n    }\n')))}b.isMDXComponent=!0;const w={toc:[]},C="wrapper";function N(e){let{components:s,...t}=e;return(0,r.yg)(C,(0,n.A)({},w,t,{components:s,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Create a ",(0,r.yg)("inlineCode",{parentName:"p"},"APS.Issues.cs")," under the ",(0,r.yg)("inlineCode",{parentName:"p"},"Models")," subfolder with the following content:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="APS.Issues.cs"',title:'"APS.Issues.cs"'},"using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Autodesk.Construction.Issues;\nusing Autodesk.Construction.Issues.Model;\nusing Newtonsoft.Json.Linq;\n\npublic partial class APS\n{\n    //export issues list of the project\n    public async Task<IEnumerable<dynamic>> GetIssues(string projectId, Tokens tokens)\n    {\n        IssuesClient issueClient = new IssuesClient(_SDKManager);\n        var allIssues = new List<Autodesk.Construction.Issues.Model.Results>();\n        var offset = 0;\n        var totalResult = 0;\n        do\n        {\n            var issues = await issueClient.GetIssuesAsync(projectId, accessToken: tokens.InternalToken, offset: offset);\n            allIssues.AddRange(issues.Results);\n            offset += (int)issues.Pagination.Limit;\n            totalResult = (int)issues.Pagination.TotalResults;\n        } while (offset < totalResult);\n        return allIssues;\n    }\n}\n")))}N.isMDXComponent=!0;const T={toc:[]},A="wrapper";function k(e){let{components:s,...t}=e;return(0,r.yg)(A,(0,n.A)({},T,t,{components:s,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Add the following content to ",(0,r.yg)("inlineCode",{parentName:"p"},"APS.Issues.cs")," file"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="APS.Issues.cs"',title:'"APS.Issues.cs"'},' //import issues (create new issue or modify existing issue)\n public async Task<TaskRes> CreateOrModifyACCIssues(string projectId, Tokens tokens, JArray body)\n{\n    IssuesClient issueClient = new IssuesClient(_SDKManager);\n\n    var taskRes = new TaskRes()\n    {\n        created = new List<succeded>(),\n        modified = new List<succeded>(),\n        failed = new List<failed>()\n    };\n\n    foreach (JToken eachItem in body)\n    {\n        Autodesk.Construction.Issues.Model.Results issue =\n             eachItem.ToObject<Autodesk.Construction.Issues.Model.Results>();\n\n        try\n        {\n            //some attributes are enum with IssuePayload\n            //value of Autodesk.Construction.Issues.Model.Results  is string\n            //need to convert to enum.\n            Status status = (Status)Enum.Parse(typeof(Status), CapitalizeFirstLetter(issue.Status));\n            AssignedToType assignedToType = (AssignedToType)Enum.Parse(typeof(AssignedToType), CapitalizeFirstLetter(issue.AssignedToType));\n\n            IssuePayload issuePayload = new IssuePayload\n            {\n                Title = issue.Title,\n                Description = issue.Description,\n                Status = status,\n                IssueSubtypeId = issue.IssueSubtypeId,\n                DueDate = issue.DueDate,\n                AssignedTo = issue.AssignedTo,\n                AssignedToType = AssignedToType.User,\n                RootCauseId = issue.RootCauseId,\n                Published = issue.Published\n            };\n\n            if ((string)eachItem["id"] == null || (string)eachItem["id"] == "")\n            {\n                //create new issue\n                Issue res = await issueClient.CreateIssueAsync(projectId, issuePayload, accessToken: tokens.InternalToken);\n                taskRes.created.Add(new succeded { id = res.Id, csvRowNum = (string)eachItem["csvRowNum"] });\n            }\n            else\n            {\n                //modify issue\n                Issue res = await issueClient.PatchIssueDetailsAsync(projectId, issue.Id, issuePayload, accessToken: tokens.InternalToken);\n                taskRes.modified.Add(new succeded { id = res.Id, csvRowNum = (string)eachItem["csvRowNum"] });\n            }\n        }\n        catch (Exception e)\n        {\n            taskRes.failed.Add(new failed { csvRowNum = (string)eachItem["csvRowNum"], reason = e.ToString() });\n        }\n    }\n    return taskRes;\n}\n\n public class TaskRes\n {\n     public List<succeded> created { get; set; }\n     public List<succeded> modified { get; set; }\n     public List<failed> failed { get; set; }\n }\n\n public class succeded\n{\n    public string id { get; set; }\n    public string csvRowNum { get; set; }\n}\n\npublic class failed\n{\n    public string csvRowNum { get; set; }\n    public string reason { get; set; }\n}\npublic static string CapitalizeFirstLetter(string input)\n{\n    if (string.IsNullOrEmpty(input))\n    {\n        return input;  // Return the input if it\'s null or empty\n    }\n    // Capitalize the first letter and make the rest lowercase\n    return char.ToUpper(input[0]) + input.Substring(1).ToLower();\n}\n')))}k.isMDXComponent=!0;const j={},S="Project Issues",P={unversionedId:"tutorials/acc-issues/issues",id:"tutorials/acc-issues/issues",title:"Project Issues",description:"Now, we will implement our server to consume ACC Issues APIs to fetch project issues and create/modify issues.",source:"@site/docs/03-tutorials/06-acc-issues/04-issues.mdx",sourceDirName:"03-tutorials/06-acc-issues",slug:"/tutorials/acc-issues/issues",permalink:"/tutorials/acc-issues/issues",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/06-acc-issues/04-issues.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Project Browsing",permalink:"/tutorials/acc-issues/data"},next:{title:"Issue Settings",permalink:"/tutorials/acc-issues/settings"}},E={},R=[{value:"Work with Issues",id:"work-with-issues",level:2},{value:"Import Issues",id:"import-issues",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],x={toc:R},D="wrapper";function O(e){let{components:s,...o}=e;return(0,r.yg)(D,(0,n.A)({},x,o,{components:s,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"project-issues"},"Project Issues"),(0,r.yg)("p",null,"Now, we will implement our server to consume ",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/acc/v1/overview/field-guide/issues/"},"ACC Issues APIs")," to fetch project issues and create/modify issues."),(0,r.yg)("h2",{id:"work-with-issues"},"Work with Issues"),(0,r.yg)("p",null,"We shall be utilizing ACC Issue SDK in both NodeJs and .NET samples"),(0,r.yg)(a.A,{NodeJsVsCode:g,DotNetVsCode:N,DotNetVs2022:N,mdxType:"EnvTabs"}),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"The 'Issues' collection is managed in the APS cloud database. To ensure optimal performance, the API follows the web standard of ",(0,r.yg)("strong",{parentName:"p"},"pagination")," meaning each HTTP request returns only a portion of the records in the collection.\nWith current design, ACC Issue API returns 1-100 issues in one call by default. We also have chance to specify the ",(0,r.yg)("strong",{parentName:"p"},"limit")," parameter which indicates how many records in one page. The other parameter ",(0,r.yg)("strong",{parentName:"p"},"offset")," specifies from which index of issue to extract the records.\nCheck API reference of ",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/acc/v1/reference/http/issues-issues-GET/"},"GET:Issues")," for more information.")),(0,r.yg)("h2",{id:"import-issues"},"Import Issues"),(0,r.yg)("p",null,"Moving forward, we will add helper functions to create and modify issues. ",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/acc/v1/reference/http/issues-issues-POST/"},"POST Issues")," for creating a new issue,\n",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/acc/v1/reference/http/issues-issues-issueId-PATCH/"},"PATCH Issues/:IssueId")," for modifying an existing issue.\nWhen the server receives records imported from the client (via CSV), it checks whether a record contains an ID value. If not, it creates a new issue. If an ID exists, it updates the corresponding issue with the new data."),(0,r.yg)("p",null,"To track status, a JSON array is logged on console with the successfully created or modified issues, along with any failed API calls and their corresponding CSV row numbers."),(0,r.yg)(a.A,{NodeJsVsCode:h,DotNetVsCode:k,DotNetVs2022:k,mdxType:"EnvTabs"}),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"The issue creation and modification APIs only accept a limited set of fields in the request payload. This sample demonstrates how to just use some required fields from the CSV data."),(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"title"),(0,r.yg)("li",{parentName:"ul"},"description"),(0,r.yg)("li",{parentName:"ul"},"issueSubtypeId"),(0,r.yg)("li",{parentName:"ul"},"status"),(0,r.yg)("li",{parentName:"ul"},"dueDate"),(0,r.yg)("li",{parentName:"ul"},"assignedTo"),(0,r.yg)("li",{parentName:"ul"},"assignedToType"),(0,r.yg)("li",{parentName:"ul"},"rootCauseId"),(0,r.yg)("li",{parentName:"ul"},"published"))),(0,r.yg)("h2",{id:"server-endpoints"},"Server endpoints"),(0,r.yg)("p",null,"Next, let's expose the routings to extract issues and import issue to the client-side code through another\nset of endpoints. "),(0,r.yg)(a.A,{NodeJsVsCode:u,DotNetVsCode:b,DotNetVs2022:b,mdxType:"EnvTabs"}),(0,r.yg)("h2",{id:"try-it-out"},"Try it out"),(0,r.yg)("p",null,"And that's it for the server side. Time to try it out!"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Use same project ID in previous step (remove b.) and try to call the endpoint:\n",(0,r.yg)("a",{parentName:"li",href:"http://localhost:8080/api/issues/issues?projectId=%7Byour-project-id%7D"},"http://localhost:8080/api/issues/issues?projectId={your-project-id}"),", the server application should\nrespond with a JSON list of all the issues from this project. ")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Issues Response",src:t(8524).A,width:"3834",height:"905"})),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"It would take a bit long time if the volume of the issue records is large.\nThis sample extracts raw data of issue. "),(0,r.yg)("li",{parentName:"ul"},"Some fields are json object or array object. Their value will be dumped as string in this sample."),(0,r.yg)("li",{parentName:"ul"},"To test creating or modifying issues, use HTTP test tools or commandline scripts to perform the test with access token and request payload.Recommended HTTP test tools: ",(0,r.yg)("a",{parentName:"li",href:"https://www.postman.com/downloads/"},"Postman"),", ",(0,r.yg)("a",{parentName:"li",href:"https://insomnia.rest/"},"Insomnia")))))}O.isMDXComponent=!0},5680:(e,s,t)=>{t.d(s,{xA:()=>c,yg:()=>g});var n=t(6540);function r(e,s,t){return s in e?Object.defineProperty(e,s,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[s]=t,e}function a(e,s){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);s&&(n=n.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var s=1;s<arguments.length;s++){var t=null!=arguments[s]?arguments[s]:{};s%2?a(Object(t),!0).forEach((function(s){r(e,s,t[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(t,s))}))}return e}function i(e,s){if(null==e)return{};var t,n,r=function(e,s){if(null==e)return{};var t,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],s.indexOf(t)>=0||(r[t]=e[t]);return r}(e,s);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],s.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=n.createContext({}),l=function(e){var s=n.useContext(u),t=s;return e&&(t="function"==typeof e?e(s):o(o({},s),e)),t},c=function(e){var s=l(e.components);return n.createElement(u.Provider,{value:s},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var s=e.children;return n.createElement(n.Fragment,{},s)}},m=n.forwardRef((function(e,s){var t=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,g=p["".concat(u,".").concat(m)]||p[m]||d[m]||a;return t?n.createElement(g,o(o({ref:s},c),{},{components:t})):n.createElement(g,o({ref:s},c))}));function g(e,s){var t=arguments,r=s&&s.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var i={};for(var u in s)hasOwnProperty.call(s,u)&&(i[u]=s[u]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7227:(e,s,t)=>{t.d(s,{A:()=>o});var n=t(6540),r=t(53);const a={tabItem:"tabItem_Ymn6"};function o(e){let{children:s,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,o),hidden:t},s)}},8524:(e,s,t)=>{t.d(s,{A:()=>n});const n=t.p+"assets/images/project-issues-7b7ed6b89ccfd4925aa6472d95749dc0.webp"},9489:(e,s,t)=>{t.d(s,{A:()=>w});var n=t(8168),r=t(6540),a=t(53),o=t(4245),i=t(6347),u=t(2814),l=t(5167),c=t(1269);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:s,label:t,attributes:n,default:r}}=e;return{value:s,label:t,attributes:n,default:r}}))}function d(e){const{values:s,children:t}=e;return(0,r.useMemo)((()=>{const e=s??p(t);return function(e){const s=(0,l.X)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,t])}function m(e){let{value:s,tabValues:t}=e;return t.some((e=>e.value===s))}function g(e){let{queryString:s=!1,groupId:t}=e;const n=(0,i.W6)(),a=function(e){let{queryString:s=!1,groupId:t}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:s,groupId:t});return[(0,u.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const s=new URLSearchParams(n.location.search);s.set(a,e),n.replace({...n.location,search:s.toString()})}),[a,n])]}function y(e){const{defaultValue:s,queryString:t=!1,groupId:n}=e,a=d(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:s,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!m({value:s,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:s,tabValues:a}))),[u,l]=g({queryString:t,groupId:n}),[p,y]=function(e){let{groupId:s}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(s),[n,a]=(0,c.Dv)(t);return[n,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:n}),f=(()=>{const e=u??p;return m({value:e,tabValues:a})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),l(e),y(e)}),[l,y,a]),tabValues:a}}var f=t(1062);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function I(e){let{className:s,block:t,selectedValue:i,selectValue:u,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),d=e=>{const s=e.currentTarget,t=c.indexOf(s),n=l[t].value;n!==i&&(p(s),u(n))},m=e=>{let s=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;s=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;s=c[t]??c[c.length-1];break}}s?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},s)},l.map((e=>{let{value:s,label:t,attributes:o}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:i===s?0:-1,"aria-selected":i===s,key:s,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,a.A)("tabs__item",h.tabItem,o?.className,{"tabs__item--active":i===s})}),t??s)})))}function v(e){let{lazy:s,children:t,selectedValue:n}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(s){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,s)=>(0,r.cloneElement)(e,{key:s,hidden:e.props.value!==n}))))}function b(e){const s=y(e);return r.createElement("div",{className:(0,a.A)("tabs-container",h.tabList)},r.createElement(I,(0,n.A)({},e,s)),r.createElement(v,(0,n.A)({},e,s)))}function w(e){const s=(0,f.A)();return r.createElement(b,(0,n.A)({key:String(s)},e))}}}]);