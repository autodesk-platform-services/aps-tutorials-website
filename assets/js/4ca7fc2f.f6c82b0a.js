"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[203],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},425:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(7294),a=n(6010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,i),hidden:n},t)}},3992:(e,t,n)=>{n.d(t,{Z:()=>N});var o=n(7462),a=n(7294),r=n(6010),i=n(2957),l=n(6550),s=n(5238),c=n(3609),d=n(2560);function u(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const o=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function w(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=p(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:r}))),[s,c]=f({queryString:n,groupId:o}),[u,w]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,d.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),h=(()=>{const e=s??u;return m({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),w(e)}),[c,w,r]),tabValues:r}}var h=n(1048);const v="tabList__CuJ",g="tabItem_LNqP";function b(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),o=c[n].value;o!==l&&(u(t),s(o))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},i,{className:(0,r.Z)("tabs__item",g,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:o}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function k(e){const t=w(e);return a.createElement("div",{className:(0,r.Z)("tabs-container",v)},a.createElement(b,(0,o.Z)({},e,t)),a.createElement(y,(0,o.Z)({},e,t)))}function N(e){const t=(0,h.Z)();return a.createElement(k,(0,o.Z)({key:String(t)},e))}},415:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(7294),a=n(3992),r=n(425);function i(e){let{NodeJsVsCode:t,DotNetVsCode:n,DotNetVs2022:i}=e;return o.createElement(a.Z,{groupId:"development-environment"},o.createElement(r.Z,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},o.createElement(t,null)),o.createElement(r.Z,{value:"dotnet-vscode",label:".NET & VSCode"},o.createElement(n,null)),o.createElement(r.Z,{value:"dotnet-vs2022",label:".NET & VS2022"},o.createElement(i,null)))}},7344:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>w,contentTitle:()=>m,default:()=>g,frontMatter:()=>p,metadata:()=>f,toc:()=>h});var o=n(7462),a=(n(7294),n(4137)),r=n(415);const i={toc:[]};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Final folder structure",src:n(9783).Z,width:"1920",height:"1002"})))}l.isMDXComponent=!0;const s={toc:[]};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Final folder structure",src:n(5875).Z,width:"1200",height:"930"})))}c.isMDXComponent=!0;const d={toc:[]};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Final folder structure",src:n(6173).Z,width:"1107",height:"700"})))}u.isMDXComponent=!0;const p={},m="Viewer & UI",f={unversionedId:"tutorials/simple-viewer/viewer",id:"tutorials/simple-viewer/viewer",title:"Viewer & UI",description:"Finally, we're ready to build the client-side piece of our application.",source:"@site/docs/03-tutorials/01-simple-viewer/04-viewer.mdx",sourceDirName:"03-tutorials/01-simple-viewer",slug:"/tutorials/simple-viewer/viewer",permalink:"/tutorials/simple-viewer/viewer",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/01-simple-viewer/04-viewer.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data & Derivatives",permalink:"/tutorials/simple-viewer/data"},next:{title:"Hubs Browser",permalink:"/tutorials/hubs-browser/"}},w={},h=[{value:"Viewer logic",id:"viewer-logic",level:2},{value:"Application logic",id:"application-logic",level:2},{value:"User interface",id:"user-interface",level:2},{value:"Try it out",id:"try-it-out",level:2}],v={toc:h};function g(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,o.Z)({},v,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"viewer--ui"},"Viewer & UI"),(0,a.kt)("p",null,"Finally, we're ready to build the client-side piece of our application."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you're developing with Node.js, you can use TypeScript definitions for the Viewer API.\nRun"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --dev @types/forge-viewer\n")),(0,a.kt)("p",{parentName:"admonition"},"in your terminal to add the TypeScript definition file to your project.")),(0,a.kt)("h2",{id:"viewer-logic"},"Viewer logic"),(0,a.kt)("p",null,"Let's start by implementing the Viewer functionality for our application.\nCreate a ",(0,a.kt)("inlineCode",{parentName:"p"},"viewer.js")," file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder with the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/viewer.js"',title:'"wwwroot/viewer.js"'},"/// import * as Autodesk from \"@types/forge-viewer\";\n\nasync function getAccessToken(callback) {\n    try {\n        const resp = await fetch('/api/auth/token');\n        if (!resp.ok) {\n            throw new Error(await resp.text());\n        }\n        const { access_token, expires_in } = await resp.json();\n        callback(access_token, expires_in);\n    } catch (err) {\n        alert('Could not obtain access token. See the console for more details.');\n        console.error(err);\n    }\n}\n\nexport function initViewer(container) {\n    return new Promise(function (resolve, reject) {\n        Autodesk.Viewing.Initializer({ env: 'AutodeskProduction', getAccessToken }, function () {\n            const config = {\n                extensions: ['Autodesk.DocumentBrowser']\n            };\n            const viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n            viewer.start();\n            viewer.setTheme('light-theme');\n            resolve(viewer);\n        });\n    });\n}\n\nexport function loadModel(viewer, urn) {\n    return new Promise(function (resolve, reject) {\n        function onDocumentLoadSuccess(doc) {\n            resolve(viewer.loadDocumentNode(doc, doc.getRoot().getDefaultGeometry()));\n        }\n        function onDocumentLoadFailure(code, message, errors) {\n            reject({ code, message, errors });\n        }\n        viewer.setLightPreset(0);\n        Autodesk.Viewing.Document.load('urn:' + urn, onDocumentLoadSuccess, onDocumentLoadFailure);\n    });\n}\n")),(0,a.kt)("p",null,"The script is an ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"},"ES6 module"),"\nthat exports two functions, ",(0,a.kt)("inlineCode",{parentName:"p"},"initViewer")," that will create a new instance of the Viewer\nin the specified DOM container, and ",(0,a.kt)("inlineCode",{parentName:"p"},"loadModel")," which will load a specific model to the viewer.\nWhen initializing the viewer we include a small helper function (",(0,a.kt)("inlineCode",{parentName:"p"},"getAccessToken"),") that\nretrieves a public token from our server application. The viewer can then use this token\nto start loading assets from the Model Derivative service."),(0,a.kt)("h2",{id:"application-logic"},"Application logic"),(0,a.kt)("p",null,"Next, let's define the logic of the web application itself. We will need to populate\nthe UI with all models available for viewing, as well as add UI for uploading and\ntranslating new models. Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"main.js")," file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder with the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/main.js"',title:'"wwwroot/main.js"'},"import { initViewer, loadModel } from './viewer.js';\n\ninitViewer(document.getElementById('preview')).then(viewer => {\n    const urn = window.location.hash?.substring(1);\n    setupModelSelection(viewer, urn);\n    setupModelUpload(viewer);\n});\n\nasync function setupModelSelection(viewer, selectedUrn) {\n    const dropdown = document.getElementById('models');\n    dropdown.innerHTML = '';\n    try {\n        const resp = await fetch('/api/models');\n        if (!resp.ok) {\n            throw new Error(await resp.text());\n        }\n        const models = await resp.json();\n        dropdown.innerHTML = models.map(model => `<option value=${model.urn} ${model.urn === selectedUrn ? 'selected' : ''}>${model.name}</option>`).join('\\n');\n        dropdown.onchange = () => onModelSelected(viewer, dropdown.value);\n        if (dropdown.value) {\n            onModelSelected(viewer, dropdown.value);\n        }\n    } catch (err) {\n        alert('Could not list models. See the console for more details.');\n        console.error(err);\n    }\n}\n\nasync function setupModelUpload(viewer) {\n    const upload = document.getElementById('upload');\n    const input = document.getElementById('input');\n    const models = document.getElementById('models');\n    upload.onclick = () => input.click();\n    input.onchange = async () => {\n        const file = input.files[0];\n        let data = new FormData();\n        data.append('model-file', file);\n        if (file.name.endsWith('.zip')) { // When uploading a zip file, ask for the main design file in the archive\n            const entrypoint = window.prompt('Please enter the filename of the main design inside the archive.');\n            data.append('model-zip-entrypoint', entrypoint);\n        }\n        upload.setAttribute('disabled', 'true');\n        models.setAttribute('disabled', 'true');\n        showNotification(`Uploading model <em>${file.name}</em>. Do not reload the page.`);\n        try {\n            const resp = await fetch('/api/models', { method: 'POST', body: data });\n            if (!resp.ok) {\n                throw new Error(await resp.text());\n            }\n            const model = await resp.json();\n            setupModelSelection(viewer, model.urn);\n        } catch (err) {\n            alert(`Could not upload model ${file.name}. See the console for more details.`);\n            console.error(err);\n        } finally {\n            clearNotification();\n            upload.removeAttribute('disabled');\n            models.removeAttribute('disabled');\n            input.value = '';\n        }\n    };\n}\n\nasync function onModelSelected(viewer, urn) {\n    if (window.onModelSelectedTimeout) {\n        clearTimeout(window.onModelSelectedTimeout);\n        delete window.onModelSelectedTimeout;\n    }\n    window.location.hash = urn;\n    try {\n        const resp = await fetch(`/api/models/${urn}/status`);\n        if (!resp.ok) {\n            throw new Error(await resp.text());\n        }\n        const status = await resp.json();\n        switch (status.status) {\n            case 'n/a':\n                showNotification(`Model has not been translated.`);\n                break;\n            case 'inprogress':\n                showNotification(`Model is being translated (${status.progress})...`);\n                window.onModelSelectedTimeout = setTimeout(onModelSelected, 5000, viewer, urn);\n                break;\n            case 'failed':\n                showNotification(`Translation failed. <ul>${status.messages.map(msg => `<li>${JSON.stringify(msg)}</li>`).join('')}</ul>`);\n                break;\n            default:\n                clearNotification();\n                loadModel(viewer, urn);\n                break; \n        }\n    } catch (err) {\n        alert('Could not load model. See the console for more details.');\n        console.error(err);\n    }\n}\n\nfunction showNotification(message) {\n    const overlay = document.getElementById('overlay');\n    overlay.innerHTML = `<div class=\"notification\">${message}</div>`;\n    overlay.style.display = 'flex';\n}\n\nfunction clearNotification() {\n    const overlay = document.getElementById('overlay');\n    overlay.innerHTML = '';\n    overlay.style.display = 'none';\n}\n")),(0,a.kt)("p",null,"The scripts will initialize the viewer, populate a dropdown element in the UI with models\nretrieved from the ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/models")," endpoint, and setup the file upload. And when one of the models\nin the dropdown is selected, the app logic will check the status of the model in APS (for example,\nwhether it's still being translated, or whether the translation failed), and load the model when\nit's available."),(0,a.kt)("h2",{id:"user-interface"},"User interface"),(0,a.kt)("p",null,"Finally, let's define the UI of our application with a simple HTML markup and CSS."),(0,a.kt)("p",null,"Create an ",(0,a.kt)("inlineCode",{parentName:"p"},"index.html")," file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="wwwroot/index.html"',title:'"wwwroot/index.html"'},'<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <link rel="icon" type="image/x-icon" href="https://cdn.autodesk.io/favicon.ico">\n    <link rel="stylesheet" href="https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/style.css">\n    <link rel="stylesheet" href="/main.css">\n    <title>Autodesk Platform Services: Simple Viewer</title>\n</head>\n\n<body>\n    <div id="header">\n        <img class="logo" src="https://cdn.autodesk.io/logo/black/stacked.png" alt="Autodesk Platform Services">\n        <span class="title">Simple Viewer</span>\n        <select name="models" id="models"></select>\n        <button id="upload" title="Upload New Model">Upload</button>\n        <input style="display: none" type="file" id="input">\n    </div>\n    <div id="preview"></div>\n    <div id="overlay"></div>\n    <script src="https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/viewer3D.js"><\/script>\n    <script src="/main.js" type="module"><\/script>\n</body>\n\n</html>\n')),(0,a.kt)("p",null,"The HTML markup simply uses a ",(0,a.kt)("inlineCode",{parentName:"p"},"<select>")," element as the dropdown for listing the viewable models,\nand an ",(0,a.kt)("inlineCode",{parentName:"p"},'<input type="file">')," element with a ",(0,a.kt)("inlineCode",{parentName:"p"},"<button>")," to handle the uploading of a new model."),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"main.css")," file, also under the ",(0,a.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder, and populate it with these CSS rules:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="wwwroot/main.css"',title:'"wwwroot/main.css"'},"body, html {\n    margin: 0;\n    padding: 0;\n    height: 100vh;\n    font-family: ArtifaktElement;\n}\n\n#header, #preview, #overlay {\n    position: absolute;\n    width: 100%;\n}\n\n#header {\n    height: 3em;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: center;\n}\n\n#preview, #overlay {\n    top: 3em;\n    bottom: 0;\n}\n\n#overlay {\n    z-index: 1;\n    background-color: rgba(0, 0, 0, 0.5);\n    padding: 1em;\n    display: none;\n}\n\n#overlay > .notification {\n    margin: auto;\n    padding: 1em;\n    max-width: 50%;\n    background: white;\n}\n\n#header > * {\n    height: 2em;\n    margin: 0 0.5em;\n    font-size: 1em;\n    font-family: ArtifaktElement;\n}\n\n#header .title {\n    flex: 1 0 auto;\n    height: auto;\n}\n\n#models {\n    flex: 0 1 auto;\n    min-width: 2em;\n}\n")),(0,a.kt)("p",null,"The final folder structure of your application's source code should now look something like this:"),(0,a.kt)(r.Z,{NodeJsVsCode:l,DotNetVsCode:c,DotNetVs2022:u,mdxType:"EnvTabs"}),(0,a.kt)("h2",{id:"try-it-out"},"Try it out"),(0,a.kt)("p",null,"And that's it! Your application is now complete. Start (or restart) the app as usual, and navigate\nto ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080")," in your browser. You should be presented with\na simple UI, with a dropdown in the top-right corner that will eventually get populated with all models\navailable in your application's bucket, and with a button for uploading new models. As soon as you\nselect one of the names from the dropdown, the corresponding model will get loaded in the viewer occupying\nthe rest of the webpage."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you don't have any testing design files readily available, you can try some of these publicly\navailable ones:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://knowledge.autodesk.com/support/revit/getting-started/caas/CloudHelp/cloudhelp/2022/ENU/Revit-GetStarted/files/GUID-61EF2F22-3A1F-4317-B925-1E85F138BE88-htm.html"},"Revit 2022 sample project files")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://knowledge.autodesk.com/support/autocad-mechanical/downloads/caas/downloads/content/autocad-mechanical-2022-sample-files.html"},"AutoCAD Mechanical 2022 sample files")))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Final App",src:n(3328).Z,width:"3505",height:"1927"})))}g.isMDXComponent=!0},3328:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/aps-simple-viewer-final-app-aa57361349dcc0b630f23e326ab81d3c.webp"},6173:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/final-folder-structure-ad1d37f07000012ac0516442cf92dc0e.webp"},5875:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/final-folder-structure-56aada673c0426afd6d4f9efcfd10227.webp"},9783:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/final-folder-structure-b0fc85c5f1e7e2a0e72b81e257bffd80.png"}}]);