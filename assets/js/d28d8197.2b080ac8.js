"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[9944],{4167:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/account-admin-ad482cceb50c48905b5b8d6902ef303c.webp"},4472:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(6540),s=n(9489),o=n(7227);function a(e){let{NodeJsVsCode:t,DotNetVsCode:n,DotNetVs2022:a}=e;return r.createElement(s.A,{groupId:"development-environment"},r.createElement(o.A,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},r.createElement(t,null)),r.createElement(o.A,{value:"dotnet-vscode",label:".NET & VSCode"},r.createElement(n,null)),r.createElement(o.A,{value:"dotnet-vs2022",label:".NET & VS2022"},r.createElement(a,null)))}},5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(6540);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=s,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(g,a(a({ref:t},u),{},{components:n})):r.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:s,a[1]=i;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7227:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(6540),s=n(53);const o={tabItem:"tabItem_Ymn6"};function a(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,a),hidden:n},t)}},9489:(e,t,n)=>{n.d(t,{A:()=>b});var r=n(8168),s=n(6540),o=n(53),a=n(4245),i=n(6347),c=n(2814),l=n(5167),u=n(1269);function p(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}function d(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,l.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function j(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[a,i]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[c,l]=g({queryString:n,groupId:r}),[p,j]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),y=(()=>{const e=c??p;return m({value:e,tabValues:o})?e:null})();(0,s.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),l(e),j(e)}),[l,j,o]),tabValues:o}}var y=n(1062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:i,selectValue:c,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,a.a_)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=l[n].value;r!==i&&(p(t),c(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:a}=e;return s.createElement("li",(0,r.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},a,{className:(0,o.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":i===t})}),n??t)})))}function A(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function C(e){const t=j(e);return s.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},s.createElement(h,(0,r.A)({},e,t)),s.createElement(A,(0,r.A)({},e,t)))}function b(e){const t=(0,y.A)();return s.createElement(C,(0,r.A)({key:String(t)},e))}},9940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>A,default:()=>w,frontMatter:()=>h,metadata:()=>C,toc:()=>v});var r=n(8168),s=(n(6540),n(5680)),o=n(4472);const a={toc:[]},i="wrapper";function c(e){let{components:t,...n}=e;return(0,s.yg)(i,(0,r.A)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"First, let's include the Account Admin SDK, add the ",(0,s.yg)("inlineCode",{parentName:"p"},"@aps_sdk/account-admin")," library, and also create an instance of\nSDK client of ",(0,s.yg)("inlineCode",{parentName:"p"},"AdminClient")," at the beginning of ",(0,s.yg)("inlineCode",{parentName:"p"},"services/aps.js")," file:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"const { SdkManagerBuilder } = require('@aps_sdk/autodesk-sdkmanager');\nconst { AuthenticationClient, Scopes, ResponseType } = require('@aps_sdk/authentication');\nconst { DataManagementClient } = require('@aps_sdk/data-management');\n// highlight-start\nconst { AdminClient } = require('@aps_sdk/construction-account-admin');\n// highlight-end\nconst { APS_CLIENT_ID, APS_CLIENT_SECRET, APS_CALLBACK_URL } = require('../config.js');\n\nconst service = module.exports = {};\n\nconst sdk = SdkManagerBuilder.create().build();\nconst authenticationClient = new AuthenticationClient(sdk);\nconst dataManagementClient = new DataManagementClient(sdk);\n// highlight-start\nconst adminClient = new AdminClient(sdk);\n// highlight-end\n")),(0,s.yg)("p",null,"Now append the following code to the end of the ",(0,s.yg)("inlineCode",{parentName:"p"},"services/aps.js")," file to support export & import projects and users:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},'// ACC Admin APIs\nservice.getProjectsACC = async (accountId, token) => {\n    let allProjects = [];\n    let offset = 0;\n    let totalResults = 0;\n    do {\n        const resp = await adminClient.getProjects(accountId, { offset: offset, accessToken: token });\n        allProjects = allProjects.concat(resp.results);\n        offset += resp.pagination.limit;\n        totalResults = resp.pagination.totalResults;\n    } while (offset < totalResults)\n    return allProjects;\n};\n\nservice.createProjectACC = async (accountId, projectInfo, token) =>{\n    const resp = await adminClient.createProject(accountId, projectInfo, { accessToken: token});\n    return resp;\n}\n\nservice.getProjectACC = async (projectId, token) => {\n    const resp = await adminClient.getProject(projectId, { accessToken: token });\n    return resp;\n};\n\nservice.getProjectUsersACC = async (projectId, token) => {\n    let allUsers = [];\n    let offset = 0;\n    let totalResults = 0;\n    do{\n        const resp = await adminClient.getProjectUsers(projectId, { offset: offset, accessToken: token });\n        allUsers = allUsers.concat(resp.results);\n        offset += resp.pagination.limit;\n        totalResults = resp.pagination.totalResults;\n    }while (offset < totalResults) \n    return allUsers;\n};\n\nservice.addProjectAdminACC = async (projectId, email, token) => {\n    const userBody = {\n        "email": email,\n        "products": [{\n            "key": "projectAdministration",\n            "access": "administrator"\n        }, {\n            "key": "docs",\n            "access": "administrator"\n        }]\n    }\n    const resp = await adminClient.assignProjectUser(projectId, userBody, { accessToken: token });\n    return resp;\n}\n\nservice.importProjectUsersACC = async (projectId, projectUsers, token) => {\n    const resp = await adminClient.importProjectUsers(projectId, projectUsers, { accessToken: token });\n    return resp;\n}\n')),(0,s.yg)("admonition",{type:"tip"},(0,s.yg)("p",{parentName:"admonition"},"The method adminClient.getProjects() returns all the production projects within this hub,\nit's different from the Data Management GET Projects API which only returns these projects\nthe current user is involved.")))}c.isMDXComponent=!0;const l={toc:[]},u="wrapper";function p(e){let{components:t,...n}=e;return(0,s.yg)(u,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Create a ",(0,s.yg)("inlineCode",{parentName:"p"},"admin.js")," file under the ",(0,s.yg)("inlineCode",{parentName:"p"},"routes")," subfolder with the following content:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/admin.js"',title:'"routes/admin.js"'},"const express = require('express');\nvar bodyParser = require('body-parser');\n\nconst { authRefreshMiddleware, getProjectsACC, getProjectACC, getProjectUsersACC, createProjectACC, importProjectUsersACC, addProjectAdminACC, getUserProfile } = require('../services/aps.js');\n\nlet router = express.Router();\n\nrouter.use(authRefreshMiddleware);\n\nrouter.get('/api/admin/projects', async function(req, res, next){\n    try {\n        const projects = await getProjectsACC( req.query.accountId, req.oAuthToken.access_token);\n        res.json(projects);\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.get('/api/admin/project', async function(req, res, next){\n    let projectsList = [];\n    try {\n        const projectInfo = await getProjectACC( req.query.projectId, req.oAuthToken.access_token);\n        projectsList.push(projectInfo);\n        res.json(projectsList);\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.post('/api/admin/projects', bodyParser.json(), async function (req, res, next) {\n    const accountId = req.body.accountId;\n    const projects = req.body.data;\n    let projectsCreated = [];\n    let projectsFailed = [];\n    await Promise.all(\n        projects.map(async (project) => {\n            try{\n                let projectInfo = await createProjectACC(accountId, project, req.oAuthToken.access_token);\n                projectsCreated.push(projectInfo.name);\n                while( projectInfo.status != \"active\" ){\n                    function delay(time) {\n                        return new Promise(resolve => setTimeout(resolve, time));\n                    }\n                    await delay(1000);    \n                    projectInfo = await getProjectACC( projectInfo.id, req.oAuthToken.access_token);\n                }\n                const profile = await getUserProfile(req.oAuthToken);\n                await addProjectAdminACC( projectInfo.id, profile.email, req.oAuthToken.access_token )\n            }catch(err){\n                console.warn(\"Failed to create project for: \"+ project.name + \" due to: \"+ err.message )\n                projectsFailed.push( project.name )\n            }\n        })\n    )\n    res.json({'succeed':projectsCreated, 'failed': projectsFailed });\n});\n\nrouter.get('/api/admin/project/users', async function (req, res, next) {\n    try {\n        const users = await getProjectUsersACC(req.query.projectId, req.oAuthToken.access_token);\n        res.json(users);\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.post('/api/admin/project/users', bodyParser.json(), async function (req, res, next) {\n    const projectId = req.body.projectId;\n    const users = { \n        'users': req.body.data \n    };\n    try {\n        const usersRes = await importProjectUsersACC(projectId, users, req.oAuthToken.access_token);\n        res.json(usersRes);\n    } catch (err) {\n        next(err);\n    }\n});\n\nmodule.exports = router;\n")),(0,s.yg)("p",null,"And mount the router to our server application by modifying ",(0,s.yg)("inlineCode",{parentName:"p"},"server.js"),":"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst session = require('cookie-session');\nconst { PORT, SERVER_SESSION_SECRET } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\napp.use(session({ secret: SERVER_SESSION_SECRET, maxAge: 24 * 60 * 60 * 1000 }));\napp.use(require('./routes/auth.js'));\napp.use(require('./routes/hubs.js'));\n// highlight-start\napp.use(require('./routes/admin.js'));\n// highlight-end\napp.listen(PORT, () => console.log(`Server listening on port ${PORT}...`));\n")))}p.isMDXComponent=!0;const d={toc:[]},m="wrapper";function g(e){let{components:t,...n}=e;return(0,s.yg)(m,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Create a ",(0,s.yg)("inlineCode",{parentName:"p"},"APS.Admin.cs")," under the Models subfolder with the following content:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="Models/APS.Admin.cs"',title:'"Models/APS.Admin.cs"'},"using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Autodesk.Construction.AccountAdmin;\nusing Autodesk.Construction.AccountAdmin.Model;\nusing System;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\n\npublic partial class APS\n{\n    public async Task<IEnumerable<dynamic>> GetProjectsACC(string accountId, Tokens tokens)\n   {\n        AdminClient adminClient = new AdminClient(_SDKManager);\n        List<Project> allProjects = new List<Project>();\n        var offset = 0;\n        var totalResult = 0;\n        do\n        {\n            var projects = await adminClient.GetProjectsAsync(accountId,offset:offset,accessToken:tokens.AccessToken);\n            allProjects.AddRange(projects.Results);\n            offset += (int)projects.Pagination.Limit;\n            totalResult = (int)projects.Pagination.TotalResults;\n        } while (offset < totalResult);\n        return allProjects;\n    }\n\n    public async Task<dynamic> GetProjectACC(string projectId, Tokens tokens)\n    {\n        AdminClient adminClient = new AdminClient(_SDKManager);\n        var project = await adminClient.GetProjectAsync(projectId, accessToken: tokens.AccessToken);       \n        return project;\n    }\n\n\n    public async Task<IEnumerable<dynamic>> GetProjectUsersACC(string projectId, Tokens tokens)\n    {\n        AdminClient adminClient = new AdminClient(_SDKManager);\n        var allUsers = new List<ProjectUser>();\n        var offset = 0;\n        var totalResult = 0;\n        do\n        {\n            var users = await adminClient.GetProjectUsersAsync(projectId, offset: offset, accessToken: tokens.AccessToken );\n            allUsers.AddRange(users.Results);            \n            offset += (int)users.Pagination.Limit;\n            totalResult = (int)users.Pagination.TotalResults;\n        } while (offset < totalResult);\n        return allUsers;\n    }\n\n\n    public async Task<dynamic> CreateProjectACC(string accountId, JObject body, Tokens tokens)\n    {\n        AdminClient adminClient = new AdminClient(_SDKManager);\n        var projectPayload = body.ToObject<ProjectPayload>();\n        var newProject = await adminClient.CreateProjectAsync(accountId, projectPayload, accessToken: tokens.AccessToken);\n        return newProject;\n    }\n\n\n    public async Task<dynamic> AddProjectAdminACC(string projectId, string email, Tokens tokens)\n    {\n        AdminClient adminClient = new AdminClient(_SDKManager);\n        ProjectUserPayload adminUser = new ProjectUserPayload()\n        {\n            Email = email,\n            Products = new List<ProjectUserPayloadProducts>()\n            {\n                new ProjectUserPayloadProducts()\n                {\n                    Key = ProductKeys.ProjectAdministration,\n                    Access = ProductAccess.Administrator\n                },\n                new ProjectUserPayloadProducts()\n                {\n                    Key = ProductKeys.Docs,\n                    Access = ProductAccess.Administrator\n\n                }\n            }\n        };\n        var projectUser = await adminClient.AssignProjectUserAsync(projectId, adminUser, accessToken: tokens.AccessToken);\n        return projectUser;\n    }\n\n\n    public async Task<dynamic> ImportProjectUsersACC(string projectId, JObject body, Tokens tokens)\n    {\n        AdminClient adminClient = new AdminClient(_SDKManager);\n        var projectUsersPayload = body.ToObject<ProjectUsersImportPayload>();\n        var usersRes = await adminClient.ImportProjectUsersAsync(projectId, projectUsersPayload, accessToken: tokens.AccessToken);\n        return usersRes;\n    }\n}\n")),(0,s.yg)("admonition",{type:"tip"},(0,s.yg)("p",{parentName:"admonition"},"The method adminClient.GetProjectsAsync() returns all the production projects within this hub,\nit's different from the Data Management GET Projects API which only returns these projects\nthe current user is involved.")))}g.isMDXComponent=!0;const j={toc:[]},y="wrapper";function f(e){let{components:t,...n}=e;return(0,s.yg)(y,(0,r.A)({},j,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Create a AdminController.cs file under the Controllers subfolder with the following content:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="Controllers/AdminController.cs"',title:'"Controllers/AdminController.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System.Text.Json;\nusing Autodesk.Construction.AccountAdmin.Model;\nusing System.Linq;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class AdminController : ControllerBase\n{\n    private readonly ILogger<AdminController> _logger;\n    private readonly APS _aps;\n\n    public AdminController(ILogger<AdminController> logger, APS aps)\n    {\n        _logger = logger;\n        _aps = aps;\n    }\n\n    [HttpGet("projects")]\n    public async Task<ActionResult<string>> ListProjects()\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n        var projects = await _aps.GetProjectsACC(Request.Query["accountId"], tokens);\n        return JsonConvert.SerializeObject(projects);\n    }\n\n    [HttpGet("project")]\n    public async Task<ActionResult<string>> ListProject(string projectId)\n    {\n        IList<Project> projectList=new List<Project>();\n\n        var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n\n        var projectInfo = await _aps.GetProjectACC(Request.Query["projectId"], tokens);\n        projectList.Add(projectInfo);\n        return JsonConvert.SerializeObject(projectList);\n    }\n\n\n    [HttpGet("project/users")]\n    public async Task<ActionResult<string>> ListProjectUsers(string projectId)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n\n        var projects = await _aps.GetProjectUsersACC(Request.Query["projectId"], tokens);\n        return JsonConvert.SerializeObject(projects);\n    }\n\n    [HttpPost("projects")]\n    public async Task<IActionResult> CreateProjects([FromBody] JObject content)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n        List<string> projectsCreated = new List<string>();\n        List<string> projectsFailed = new List<string>();\n        string accountId = content["accountId"].Value<string>();\n        var projects = (content["data"] as JArray)?.Select(p => (JObject)p).ToList();\n        var tasks = projects.Select(async project =>\n        {\n            try\n            {\n                var projectInfo = await _aps.CreateProjectACC(accountId, project, tokens);\n                projectsCreated.Add(projectInfo.Name);\n                while (projectInfo.Status != "active")\n                {\n                    await Task.Delay(1000);\n                    projectInfo = await _aps.GetProjectACC(projectInfo.Id, tokens);\n                }\n                var profile = await _aps.GetUserProfile(tokens);\n                await _aps.AddProjectAdminACC(projectInfo.Id, profile.Email, tokens);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Exception when creating project: {ex.Message}");\n                projectsFailed.Add(project["name"].Value<string>());\n            }\n        });\n        await Task.WhenAll(tasks);\n        return Ok(new { succeed = projectsCreated, failed = projectsFailed });\n    }\n\n    [HttpPost("project/users")]\n    public async Task<IActionResult> CreateProjectUsers([FromBody] JObject content)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _aps);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n        string projectId = content["projectId"].Value<string>();\n        dynamic users = content["data"].Value<dynamic>();\n        dynamic body = new JObject();\n        body.users = users;\n        dynamic usersInfo = await _aps.ImportProjectUsersACC(projectId, body, tokens);\n        return Ok(new { UserInfo = usersInfo });\n    }\n}\n\n')))}f.isMDXComponent=!0;const h={},A="Account Admin",C={unversionedId:"tutorials/acc-admin/admin",id:"tutorials/acc-admin/admin",title:"Account Admin",description:"Now, it's time to implement our server to support Account Admin access, in this step, we'll",source:"@site/docs/03-tutorials/05-acc-admin/04-admin.mdx",sourceDirName:"03-tutorials/05-acc-admin",slug:"/tutorials/acc-admin/admin",permalink:"/tutorials/acc-admin/admin",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/05-acc-admin/04-admin.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Project Browsing",permalink:"/tutorials/acc-admin/data"},next:{title:"UI Framework",permalink:"/tutorials/acc-admin/ui"}},b={},v=[{value:"Projects &amp; Users",id:"projects--users",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],P={toc:v},k="wrapper";function w(e){let{components:t,...a}=e;return(0,s.yg)(k,(0,r.A)({},P,a,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"account-admin"},"Account Admin"),(0,s.yg)("p",null,"Now, it's time to implement our server to support Account Admin access, in this step, we'll\ncontinue extend our server based on ",(0,s.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/acc/v1/overview/field-guide/admin/"},"Account Admin APIs"),"\nto FETCH and CREATE the data of ACC Projects and Users:"),(0,s.yg)("h2",{id:"projects--users"},"Projects & Users"),(0,s.yg)("p",null,"First, let's add a couple of helper methods for getting and importing projects and users:"),(0,s.yg)(o.A,{NodeJsVsCode:c,DotNetVsCode:g,DotNetVs2022:g,mdxType:"EnvTabs"}),(0,s.yg)("h2",{id:"server-endpoints"},"Server endpoints"),(0,s.yg)("p",null,"Next, let's expose the new functionality to the client-side code through another\nset of endpoints."),(0,s.yg)(o.A,{NodeJsVsCode:p,DotNetVsCode:f,DotNetVs2022:f,mdxType:"EnvTabs"}),(0,s.yg)("h2",{id:"try-it-out"},"Try it out"),(0,s.yg)("p",null,"And that's it for the server side. Time to try it out!"),(0,s.yg)("p",null,"Start (or restart) the app from Visual Studio Code as usual, "),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Use the ID(removing ",(0,s.yg)("strong",{parentName:"li"},"b."),") of one ACC hub as you get in previous step in the address: http://localhost:8080/api/admin/projects?accountId={your-account-id}.\nIn this case the server application should respond with a JSON list of all projects\navailable under the specified hub."),(0,s.yg)("li",{parentName:"ul"},"Use the project ID as you get in previous step, try to call the address:\nhttp://localhost:8080/api/admin/project/users?projectId={your-project-id}, the server application should\nrespond with a JSON list of all the users from this project. ")),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("p",{parentName:"admonition"},"You may get different project list by the 2 differnt endpoints, here are the explain:"),(0,s.yg)("ul",{parentName:"admonition"},(0,s.yg)("li",{parentName:"ul"},"With Data Management API, it will return all the projects that the current user is involved."),(0,s.yg)("li",{parentName:"ul"},"With Account Admin API, it will return all the projects in the account if the current user is Account Admin."))),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"Account Admin Response",src:n(4167).A,width:"1921",height:"1054"})))}w.isMDXComponent=!0}}]);