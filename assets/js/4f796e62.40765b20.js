"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[4458],{4472:(e,t,n)=>{n.d(t,{A:()=>o});var a=n(6540),r=n(9489),s=n(7227);function o(e){let{NodeJsVsCode:t,DotNetVsCode:n,DotNetVs2022:o}=e;return a.createElement(r.A,{groupId:"development-environment"},a.createElement(s.A,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},a.createElement(t,null)),a.createElement(s.A,{value:"dotnet-vscode",label:".NET & VSCode"},a.createElement(n,null)),a.createElement(s.A,{value:"dotnet-vs2022",label:".NET & VS2022"},a.createElement(o,null)))}},5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6386:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/data-response-136a1ffb319991f74fc05f2b47c7fb39.webp"},7227:(e,t,n)=>{n.d(t,{A:()=>o});var a=n(6540),r=n(53);const s={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,o),hidden:n},t)}},7448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>A,contentTitle:()=>C,default:()=>x,frontMatter:()=>j,metadata:()=>S,toc:()=>O});var a=n(8168),r=(n(6540),n(5680)),s=n(4472);const o={toc:[]},i="wrapper";function l(e){let{components:t,...n}=e;return(0,r.yg)(i,(0,a.A)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Let's implement the OSS (",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/data/v2/developers_guide/basics/#object-storage-service-oss"},"Object Storage Service"),")\nlogic of our server application. Add the following code to the end of the ",(0,r.yg)("inlineCode",{parentName:"p"},"services/aps.js")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"service.ensureBucketExists = async (bucketKey) => {\n    const accessToken = await getInternalToken();\n    try {\n        await ossClient.getBucketDetails(bucketKey, { accessToken });\n    } catch (err) {\n        if (err.axiosError.response.status === 404) {\n            await ossClient.createBucket(Region.Us, { bucketKey: bucketKey, policyKey: PolicyKey.Persistent }, { accessToken});\n        } else {\n            throw err;\n        }\n    }\n};\n\nservice.listObjects = async () => {\n    await service.ensureBucketExists(APS_BUCKET);\n    const accessToken = await getInternalToken();\n    let resp = await ossClient.getObjects(APS_BUCKET, { limit: 64, accessToken });\n    let objects = resp.items;\n    while (resp.next) {\n        const startAt = new URL(resp.next).searchParams.get('startAt');\n        resp = await ossClient.getObjects(APS_BUCKET, { limit: 64, startAt, accessToken });\n        objects = objects.concat(resp.items);\n    }\n    return objects;\n};\n\nservice.uploadObject = async (objectName, filePath) => {\n    await service.ensureBucketExists(APS_BUCKET);\n    const accessToken = await getInternalToken();\n    const obj = await ossClient.uploadObject(APS_BUCKET, objectName, filePath, { accessToken });\n    return obj;\n};\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"ensureBucketExists")," function will simply try and request additional information\nabout a specific bucket using the APS SDK, and if the response\nfrom APS is ",(0,r.yg)("inlineCode",{parentName:"p"},"404 Not Found"),", it will attempt to create a new bucket with this name."),(0,r.yg)("p",null,"As you can see, the ",(0,r.yg)("inlineCode",{parentName:"p"},"getObjects")," method (responsible for listing files\nin a Data Management bucket) uses pagination. In our code we simply iterate through all the pages\nand return all files from our application's bucket in a single list."))}l.isMDXComponent=!0;const c={toc:[]},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Let's implement the logic for converting designs for viewing, and for checking the status of\nthe conversions. Add the following code to the end of the ",(0,r.yg)("inlineCode",{parentName:"p"},"services/aps.js")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"service.translateObject = async (urn, rootFilename) => {\n    const accessToken = await getInternalToken();\n    const job = await modelDerivativeClient.startJob({\n        input: {\n            urn,\n            compressedUrn: !!rootFilename,\n            rootFilename\n        },\n        output: {\n            formats: [{\n                views: [View._2d, View._3d],\n                type: OutputType.Svf2\n            }]\n        }\n    }, { accessToken });\n    return job.result;\n};\n\nservice.getManifest = async (urn) => {\n    const accessToken = await getInternalToken();\n    try {\n        const manifest = await modelDerivativeClient.getManifest(urn, { accessToken });\n        return manifest;\n    } catch (err) {\n        if (err.axiosError.response.status === 404) {\n            return null;\n        } else {\n            throw err;\n        }\n    }\n};\n\nservice.urnify = (id) => Buffer.from(id).toString('base64').replace(/=/g, '');\n")))}p.isMDXComponent=!0;const d={toc:[]},m="wrapper";function g(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Create a ",(0,r.yg)("inlineCode",{parentName:"p"},"models.js")," file under the ",(0,r.yg)("inlineCode",{parentName:"p"},"routes")," subfolder with the following code:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/models.js"',title:'"routes/models.js"'},"const express = require('express');\nconst formidable = require('express-formidable');\nconst { listObjects, uploadObject, translateObject, getManifest, urnify } = require('../services/aps.js');\n\nlet router = express.Router();\n\nrouter.get('/api/models', async function (req, res, next) {\n    try {\n        const objects = await listObjects();\n        res.json(objects.map(o => ({\n            name: o.objectKey,\n            urn: urnify(o.objectId)\n        })));\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.get('/api/models/:urn/status', async function (req, res, next) {\n    try {\n        const manifest = await getManifest(req.params.urn);\n        if (manifest) {\n            let messages = [];\n            if (manifest.derivatives) {\n                for (const derivative of manifest.derivatives) {\n                    messages = messages.concat(derivative.messages || []);\n                    if (derivative.children) {\n                        for (const child of derivative.children) {\n                            messages.concat(child.messages || []);\n                        }\n                    }\n                }\n            }\n            res.json({ status: manifest.status, progress: manifest.progress, messages });\n        } else {\n            res.json({ status: 'n/a' });\n        }\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.post('/api/models', formidable({ maxFileSize: Infinity }), async function (req, res, next) {\n    const file = req.files['model-file'];\n    if (!file) {\n        res.status(400).send('The required field (\"model-file\") is missing.');\n        return;\n    }\n    try {\n        const obj = await uploadObject(file.name, file.path);\n        await translateObject(urnify(obj.objectId), req.fields['model-zip-entrypoint']);\n        res.json({\n            name: obj.objectKey,\n            urn: urnify(obj.objectId)\n        });\n    } catch (err) {\n        next(err);\n    }\n});\n\nmodule.exports = router;\n")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"The ",(0,r.yg)("inlineCode",{parentName:"p"},"formidable()")," middleware used in the ",(0,r.yg)("inlineCode",{parentName:"p"},"POST")," request handler will make sure that any\n",(0,r.yg)("inlineCode",{parentName:"p"},"multipart/form-data")," content coming with the request is parsed and available in the ",(0,r.yg)("inlineCode",{parentName:"p"},"req.files"),"\nand ",(0,r.yg)("inlineCode",{parentName:"p"},"req.fields")," properties.")),(0,r.yg)("p",null,"And mount the router to our server application by modifying ",(0,r.yg)("inlineCode",{parentName:"p"},"server.js"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst { PORT } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\napp.use(require('./routes/auth.js'));\n// highlight-start\napp.use(require('./routes/models.js'));\n// highlight-end\napp.listen(PORT, function () { console.log(`Server listening on port ${PORT}...`); });\n")),(0,r.yg)("p",null,"The router will handle 3 types of requests:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"GET /api/models")," - when the client wants to get the list of all models available for viewing"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"GET /api/models/:urn/status")," - used to check the status of the conversion (incl. error messages if there are any)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"POST /api/models")," - when the client wants to upload a new model and start its translation")))}g.isMDXComponent=!0;const y={toc:[]},h="wrapper";function f(e){let{components:t,...n}=e;return(0,r.yg)(h,(0,a.A)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Create a ",(0,r.yg)("inlineCode",{parentName:"p"},"APS.Oss.cs")," file under the ",(0,r.yg)("inlineCode",{parentName:"p"},"Models")," folder. This is where will implement\nall the OSS (",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/data/v2/developers_guide/basics/#object-storage-service-oss"},"Object Storage Service"),")\nlogic of our server application. Populate the new file with the following code:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/APS.Oss.cs"',title:'"Models/APS.Oss.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Oss;\nusing Autodesk.Oss.Model;\n\npublic partial class APS\n{\n    private async Task EnsureBucketExists(string bucketKey)\n    {\n        var auth = await GetInternalToken();\n        var ossClient = new OssClient();\n        try\n        {\n            await ossClient.GetBucketDetailsAsync(bucketKey, accessToken: auth.AccessToken);\n        }\n        catch (OssApiException ex)\n        {\n            if (ex.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)\n            {\n                var payload = new CreateBucketsPayload\n                {\n                    BucketKey = bucketKey,\n                    PolicyKey = PolicyKey.Persistent\n                };\n                await ossClient.CreateBucketAsync(Region.US, payload, auth.AccessToken);\n            }\n            else\n            {\n                throw;\n            }\n        }\n    }\n\n    public async Task<ObjectDetails> UploadModel(string objectName, Stream stream)\n    {\n        await EnsureBucketExists(_bucket);\n        var auth = await GetInternalToken();\n        var ossClient = new OssClient();\n        var objectDetails = await ossClient.UploadObjectAsync(_bucket, objectName, stream, accessToken: auth.AccessToken);\n        return objectDetails;\n    }\n\n    public async Task<IEnumerable<ObjectDetails>> GetObjects()\n    {\n        await EnsureBucketExists(_bucket);\n        var auth = await GetInternalToken();\n        var ossClient = new OssClient();\n        const int PageSize = 64;\n        var results = new List<ObjectDetails>();\n        var response = await ossClient.GetObjectsAsync(_bucket, PageSize, accessToken: auth.AccessToken);\n        results.AddRange(response.Items);\n        while (!string.IsNullOrEmpty(response.Next))\n        {\n            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(response.Next).Query);\n            response = await ossClient.GetObjectsAsync(_bucket, PageSize, startAt: queryParams["startAt"], accessToken: auth.AccessToken);\n            results.AddRange(response.Items);\n        }\n        return results;\n    }\n}\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"EnsureBucketExists")," method will simply try and request additional information\nabout a specific bucket, and if the response from APS is ",(0,r.yg)("inlineCode",{parentName:"p"},"404 Not Found"),", it will\nattempt to create a new bucket with that name. If no bucket name is provided through\nenvironment variables, we generate one by appending the ",(0,r.yg)("inlineCode",{parentName:"p"},"-basic-app")," suffix to our\napplication's Client ID."),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"GetObjects")," method pages through all objects in the bucket, and returns their name and URN\n(the base64-encoded ID that will later be used when communicating with the Model Derivative service)."))}f.isMDXComponent=!0;const b={toc:[]},v="wrapper";function w(e){let{components:t,...n}=e;return(0,r.yg)(v,(0,a.A)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Create another file under the ",(0,r.yg)("inlineCode",{parentName:"p"},"Models")," subfolder, and call it ",(0,r.yg)("inlineCode",{parentName:"p"},"APS.Deriv.cs"),". This is where\nwill implement the logic for converting designs for viewing, and for checking the status of\nthe conversions. Populate the new file with the following code:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/APS.Deriv.cs"',title:'"Models/APS.Deriv.cs"'},'using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Autodesk.ModelDerivative;\nusing Autodesk.ModelDerivative.Model;\n\npublic record TranslationStatus(string Status, string Progress, IEnumerable<string> Messages);\n\npublic partial class APS\n{\n    public static string Base64Encode(string plainText)\n    {\n        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);\n        return System.Convert.ToBase64String(plainTextBytes).TrimEnd(\'=\');\n    }\n\n    public async Task<Job> TranslateModel(string objectId, string rootFilename)\n    {\n        var auth = await GetInternalToken();\n        var modelDerivativeClient = new ModelDerivativeClient();\n        var payload = new JobPayload\n        {\n            Input = new JobPayloadInput\n            {\n                Urn = Base64Encode(objectId)\n            },\n            Output = new JobPayloadOutput\n            {\n                Formats =\n                [\n                    new JobPayloadFormatSVF2\n                    {\n                        Views = [View._2d, View._3d]\n                    }\n                ]\n            }\n        };\n        if (!string.IsNullOrEmpty(rootFilename))\n        {\n            payload.Input.RootFilename = rootFilename;\n            payload.Input.CompressedUrn = true;\n        }\n        var job = await modelDerivativeClient.StartJobAsync(jobPayload: payload, region: Region.US, accessToken: auth.AccessToken);\n        return job;\n    }\n\n    public async Task<TranslationStatus> GetTranslationStatus(string urn)\n    {\n        var auth = await GetInternalToken();\n        var modelDerivativeClient = new ModelDerivativeClient();\n        try\n        {\n            var manifest = await modelDerivativeClient.GetManifestAsync(urn, accessToken: auth.AccessToken);\n            return new TranslationStatus(manifest.Status, manifest.Progress, []);\n        }\n        catch (ModelDerivativeApiException ex)\n        {\n            if (ex.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)\n            {\n                return new TranslationStatus("n/a", "", null);\n            }\n            else\n            {\n                throw;\n            }\n        }\n    }\n}\n')))}w.isMDXComponent=!0;const k={toc:[]},N="wrapper";function T(e){let{components:t,...n}=e;return(0,r.yg)(N,(0,a.A)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Create a ",(0,r.yg)("inlineCode",{parentName:"p"},"ModelsController.cs")," file under the ",(0,r.yg)("inlineCode",{parentName:"p"},"Controllers")," subfolder with the following content:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Controllers/ModelsController.cs"',title:'"Controllers/ModelsController.cs"'},'using System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class ModelsController : ControllerBase\n{\n    public record BucketObject(string name, string urn);\n\n    private readonly APS _aps;\n\n    public ModelsController(APS aps)\n    {\n        _aps = aps;\n    }\n\n    [HttpGet()]\n    public async Task<IEnumerable<BucketObject>> GetModels()\n    {\n        var objects = await _aps.GetObjects();\n        return from o in objects\n               select new BucketObject(o.ObjectKey, APS.Base64Encode(o.ObjectId));\n    }\n\n    [HttpGet("{urn}/status")]\n    public async Task<TranslationStatus> GetModelStatus(string urn)\n    {\n        var status = await _aps.GetTranslationStatus(urn);\n        return status;\n    }\n\n    public class UploadModelForm\n    {\n        [FromForm(Name = "model-zip-entrypoint")]\n        public string Entrypoint { get; set; }\n\n        [FromForm(Name = "model-file")]\n        public IFormFile File { get; set; }\n    }\n\n    [HttpPost(), DisableRequestSizeLimit]\n    public async Task<BucketObject> UploadAndTranslateModel([FromForm] UploadModelForm form)\n    {\n        using var stream = form.File.OpenReadStream();\n        var obj = await _aps.UploadModel(form.File.FileName, stream);\n        var job = await _aps.TranslateModel(obj.ObjectId, form.Entrypoint);\n        return new BucketObject(obj.ObjectKey, job.Urn);\n    }\n}\n')),(0,r.yg)("p",null,"The controller will handle 3 types of requests:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"GET /api/models")," - when the client wants to get the list of all models available for viewing"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"GET /api/models/:urn/status")," - used to check the status of the conversion (incl. error messages if there are any)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"POST /api/models")," - when the client wants to upload a new model and start its translation")))}T.isMDXComponent=!0;const j={},C="Data & Derivatives",S={unversionedId:"tutorials/simple-viewer/data",id:"tutorials/simple-viewer/data",title:"Data & Derivatives",description:"In this step we will extend our server so that we can list models, upload them,",source:"@site/docs/03-tutorials/01-simple-viewer/03-data.mdx",sourceDirName:"03-tutorials/01-simple-viewer",slug:"/tutorials/simple-viewer/data",permalink:"/tutorials/simple-viewer/data",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/01-simple-viewer/03-data.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/tutorials/simple-viewer/auth"},next:{title:"Viewer & UI",permalink:"/tutorials/simple-viewer/viewer"}},A={},O=[{value:"Data management",id:"data-management",level:2},{value:"Derivatives",id:"derivatives",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],D={toc:O},E="wrapper";function x(e){let{components:t,...o}=e;return(0,r.yg)(E,(0,a.A)({},D,o,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"data--derivatives"},"Data & Derivatives"),(0,r.yg)("p",null,"In this step we will extend our server so that we can list models, upload them,\nand prepare them for viewing."),(0,r.yg)("h2",{id:"data-management"},"Data management"),(0,r.yg)("p",null,"First, let's make sure that our application has a bucket in the Data Management service\nto store its files in. Typically the bucket would be created just once as part of a provisioning\nstep but in our sample we will implement a helper function that will make sure that the bucket\nis available, and use it in other parts of the server app."),(0,r.yg)("p",null,"When creating buckets, it is required that applications set a retention policy for objects stored in the bucket. This cannot be changed at a later time. The retention policy on the bucket applies to all objects stored within. When creating a bucket, specifically set the ",(0,r.yg)("strong",{parentName:"p"},"policyKey")," to ",(0,r.yg)("strong",{parentName:"p"},"transient"),", ",(0,r.yg)("strong",{parentName:"p"},"temporary"),", or ",(0,r.yg)("strong",{parentName:"p"},"persistent"),"."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("strong",{parentName:"p"},"Data Retention Policy")),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("strong",{parentName:"p"},"Transient")," - Objects older than 24 hours are removed automatically."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("strong",{parentName:"p"},"Temporary")," - When an object has reached 30 days of age, it is deleted."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("strong",{parentName:"p"},"Persistent")," - Available until a user deletes the object.")),(0,r.yg)(s.A,{NodeJsVsCode:l,DotNetVsCode:f,DotNetVs2022:f,mdxType:"EnvTabs"}),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Note that the Data Management service requires bucket names to be ",(0,r.yg)("strong",{parentName:"p"},"globally unique"),",\nand attempts to create a bucket with an already used name will fail with ",(0,r.yg)("inlineCode",{parentName:"p"},"409 Conflict"),".\nSee the ",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/data/v2/reference/http/buckets-POST"},"documentation"),"\nfor more details.")),(0,r.yg)("h2",{id:"derivatives"},"Derivatives"),(0,r.yg)("p",null,"Next, we will implement a couple of helper functions that will derive/extract various types of information\nfrom the uploaded files - for example, 2D drawings, 3D geometry, and metadata - that we can later load\ninto the Viewer in our webpage. To do so, we will need to start a new conversion job\nin the ",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/model-derivative/v2/developers_guide/overview"},"Model Derivative"),"\nservice, and checking the status of the conversion."),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Please note that the translation of designs using the Model Derivative service has a cost associated with it,\nsee the ",(0,r.yg)("a",{parentName:"p",href:"https://aps.autodesk.com/pricing"},"Pricing")," page for more details. We recommend that you use\na ",(0,r.yg)("em",{parentName:"p"},"non-expired")," trial subscription when following this tutorial.")),(0,r.yg)("p",null,"Model Derivative service requires all IDs we use in the API calls to be ",(0,r.yg)("a",{parentName:"p",href:"https://wikipedia.org/wiki/Base64"},"base64"),"-encoded,\nso we include a small utility function that will help with that."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Base64-encoded IDs are referred to as ",(0,r.yg)("em",{parentName:"p"},"URNs"),".")),(0,r.yg)(s.A,{NodeJsVsCode:p,DotNetVsCode:w,DotNetVs2022:w,mdxType:"EnvTabs"}),(0,r.yg)("h2",{id:"server-endpoints"},"Server endpoints"),(0,r.yg)("p",null,"Now let's make the new functionality available to the client through another\nset of endpoints."),(0,r.yg)(s.A,{NodeJsVsCode:g,DotNetVsCode:T,DotNetVs2022:T,mdxType:"EnvTabs"}),(0,r.yg)("h2",{id:"try-it-out"},"Try it out"),(0,r.yg)("p",null,"Start (or restart) the app as usual, and navigate to ",(0,r.yg)("a",{parentName:"p",href:"http://localhost:8080/api/models"},"http://localhost:8080/api/models"),"\nin the browser. The server should respond with a JSON list with names and URNs of all objects\navailable in your configured bucket."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"If this is your first time working with APS, you may get a JSON response\nwith an empty array (",(0,r.yg)("inlineCode",{parentName:"p"},"[]"),") which is expected. In the screenshot below we can\nalready see a couple of files that were uploaded to our bucket in the past.")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"If you are using Google Chrome, consider installing ",(0,r.yg)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"},"JSON Formatter"),"\nor a similar extension to automatically format JSON responses.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Server Response",src:n(6386).A,width:"1500",height:"929"})))}x.isMDXComponent=!0},9489:(e,t,n)=>{n.d(t,{A:()=>k});var a=n(8168),r=n(6540),s=n(53),o=n(4245),i=n(6347),l=n(2814),c=n(5167),u=n(1269);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=d(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[l,c]=g({queryString:n,groupId:a}),[p,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,u.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),h=(()=>{const e=l??p;return m({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),y(e)}),[c,y,s]),tabValues:s}}var h=n(1062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==i&&(p(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},o,{className:(0,s.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=y(e);return r.createElement("div",{className:(0,s.A)("tabs-container",f.tabList)},r.createElement(b,(0,a.A)({},e,t)),r.createElement(v,(0,a.A)({},e,t)))}function k(e){const t=(0,h.A)();return r.createElement(w,(0,a.A)({key:String(t)},e))}}}]);