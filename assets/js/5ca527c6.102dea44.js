"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[5983],{136:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/acc-issue-final-app-fcc1228629ace3052374cf1f15159a9f.webp"},2074:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/projects-status-e65101038bed31c3f9b47e7812fd4375.png"},5118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(8168),r=(n(6540),n(5680));const i={},o="Table",s={unversionedId:"tutorials/acc-issues/table",id:"tutorials/acc-issues/table",title:"Table",description:"Finally, we're ready to implement all the remaining logic of the class Table.",source:"@site/docs/03-tutorials/06-acc-issues/08-table.mdx",sourceDirName:"03-tutorials/06-acc-issues",slug:"/tutorials/acc-issues/table",permalink:"/tutorials/acc-issues/table",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/06-acc-issues/08-table.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"UI Framework",permalink:"/tutorials/acc-issues/ui"},next:{title:"Learn More",permalink:"/learn-more/"}},l={},c=[{value:"Export Issue Data",id:"export-issue-data",level:2},{value:"CSV File Prepare",id:"csv-file-prepare",level:2},{value:"Try it out",id:"try-it-out",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...i}=e;return(0,r.yg)(p,(0,a.A)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"table"},"Table"),(0,r.yg)("p",null,"Finally, we're ready to implement all the remaining logic of the class ",(0,r.yg)("inlineCode",{parentName:"p"},"Table"),".\nThe class ",(0,r.yg)("inlineCode",{parentName:"p"},"Table")," is responsible to render project issues, issue settings, project users and the information of this logged user."),(0,r.yg)("p",null,"This class also exposes functions to export the current data list into a csv file and import the issues data from a csv file."),(0,r.yg)("h2",{id:"export-issue-data"},"Export Issue Data"),(0,r.yg)("p",null,"Let's start by implementing the Table functionality.\nOpen ",(0,r.yg)("inlineCode",{parentName:"p"},"table.js")," file under the ",(0,r.yg)("inlineCode",{parentName:"p"},"wwwroot")," subfolder, add the implementation code into Class ",(0,r.yg)("inlineCode",{parentName:"p"},"Table"),":\nHere are the explanation of the main function:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"resetData"),": Fetch and setup the data based on the input accountId, projectId, and tabKey. "),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"drawTable"),": Draw the bootstrap table with the current data. "),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"exportToCSV"),": Export the current data into CSV file."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"importFromCSV"),": Import the information into ACC Issue sample from the prepared CSV file.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/table.js"',title:'"wwwroot/table.js"'},"//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//Table class wraps the specific data info\nclass Table {\n    #tableId;\n    #accountId;\n    #projectId;\n    #tabKey;\n    #dataSet;\n    #maxItem;\n\n    constructor(tableId, accountId = null, projectId = null, tabKey = 'PROJECTS') {\n        this.#tableId = tableId;\n        this.#accountId = accountId;\n        this.#projectId = projectId;\n        this.#tabKey = tabKey;\n        this.#dataSet = null;\n        this.#maxItem = 5;\n    };\n\n    get tabKey(){\n        return this.#tabKey;\n    }\n\n    set tabKey( tabKey){\n        this.#tabKey = tabKey;\n    }\n\n// highlight-start\n    \n    resetData = async (tabKey = null, accountId = null, projectId = null) => {\n        this.#tabKey = tabKey ? tabKey : this.#tabKey;\n        this.#accountId = accountId ? accountId : this.#accountId;\n        this.#projectId = accountId || projectId ? projectId : this.#projectId;\n        const url = TABLE_TABS[this.#tabKey].REQUEST_URL;\n        const data = {\n            'accountId': this.#accountId,\n            'projectId': this.#projectId\n        }\n        try {\n            const response = await axios.get(url, { params: data });\n            this.#dataSet = response.data;\n        } catch (err) {\n            console.error(err);\n            return;\n        }\n    }\n\n    drawTable = () => {\n        if (this.#dataSet == null || this.#dataSet.length == 0) {\n            console.warn('DataSet is not ready, please fetch your data first.');\n            return;\n        }\n\n        let columns = [];\n        for (var key in this.#dataSet[0]) {\n\n            if (Array.isArray(this.#dataSet[0][key] && this.#dataSet[0][key] != null)) {\n                //value is array \n                columns.push({\n                    field: key,\n                    title: key,\n                    align: \"center\",\n                    formatter: function (value) {\n                        return value.toString();\n                    }\n                })\n            } else if (typeof this.#dataSet[0][key] === 'object' && this.#dataSet[0][key] != null) {\n                //value is JSON object \n\n                columns.push({\n                    field: key,\n                    title: key,\n                    align: \"center\",\n                    formatter: function (value) {\n                        return JSON.stringify(value)\n                    }\n                })\n            } else {\n                //common value\n                columns.push({\n                    field: key,\n                    title: key,\n                    align: \"center\"\n                })\n            }\n        }\n        $(this.#tableId).bootstrapTable('destroy');\n        $(this.#tableId).bootstrapTable({\n            data: this.#dataSet,\n            customToolbarButtons: [\n                {\n                    name: \"grid-export\",\n                    title: \"Export\",\n                    icon: \"glyphicon-export\",\n                    callback: this.exportToCSV\n                },\n                {\n                    name: \"grid-import\",\n                    title: \"Import\",\n                    icon: \"glyphicon-import\",\n                    callback: this.importFromCSV\n                }\n            ],\n            editable: true,\n            clickToSelect: true,\n            cache: false,\n            showToggle: false,\n            pagination: true,\n            pageList: [5],\n            pageSize: 5,\n            pageNumber: 1,\n            uniqueId: 'id',\n            striped: true,\n            search: true,\n            showRefresh: true,\n            minimumCountColumns: 2,\n            smartDisplay: true,\n            columns: columns,\n            sortName:'displayId',\n            sortOrder:'desc'\n        });\n    }\n\n\n    exportToCSV = () => {\n        const separatorForColumns = ',';\n        const headers = Object.keys(this.#dataSet[0]).join(separatorForColumns);\n        const rows = this.#dataSet.map(row =>\n            Object.values(row)\n                .map(value => {\n                    if (value === null || value === undefined) {\n                        value = \"\";\n                    } else {\n                        //because array or json value includes comma\n                        //hard to parse the values from csv (for import workflow)\n                        //so set the value='Complicated Object' to csv.\n                        if (typeof value === 'object') {\n                            value = '<Complicated Object>';\n                        } else if (Array.isArray(value)) {\n                            value = '<Complicated Object>';\n                        }\n                    }\n                    return `\"${String(value).replace(/\"/g, '\"\"')}\"`\n                }) // Escape quotes\n                .join(separatorForColumns)\n        ).join('\\n');\n\n        const csvContent = `${headers}\\n${rows}`;\n        // Create a Blob and trigger download\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = this.#tabKey + (new Date()).getTime() + '.csv';\n        link.click();\n    } \n \n    formatDate(date, format = 'YYYY-MM-DD') {\n        const pad = (num) => String(num).padStart(2, '0');\n      \n        const replacements = {\n          YYYY: date.getFullYear(),\n          MM: pad(date.getMonth() + 1),\n          DD: pad(date.getDate()) \n        };\n      \n        return format.replace(/YYYY|MM|DD/g, (match) => replacements[match]);\n      }\n\n    importFromCSV = async () => {\n        if (TABLE_TABS[this.#tabKey].TAB_NAME != 'ISSUES') {\n            alert('only issue is supported to be created/modified!Please active ISSUES table firstly!');\n            return;\n        }\n        let input = document.createElement('input');\n        input.type = 'file';\n        input.onchange = _ => {\n            let fileUpload = Array.from(input.files);\n            var regex = /^([a-zA-Z0-9\\s_\\\\.\\-:\\(\\)])+(.csv|.txt)$/;\n            if (regex.test(fileUpload[0].name.toLowerCase())) {\n                if (typeof (FileReader) != \"undefined\") {\n                    var reader = new FileReader();\n                    reader.onload = async (e) => {\n                        function sleep(ms = 0) {\n                            return new Promise(resolve => setTimeout(resolve, ms));\n                        }\n                        $(\"#loadingoverlay\").fadeIn()\n                        const rows = e.target.result.replace(/\\r\\n/g, '\\n').split('\\n'); // First replace \\r\\n with \\n, then split by \\n\n                        const keys = rows[0].split(',');\n                        const import_attributes_keys = TABLE_TABS[this.#tabKey].IMPORT_ATTRIBUTES_KEYS;\n                        let requestDataList = []; \n                       \n                        for(let i=1;i<rows.length - 1;i++){\n                            // Split each row by commas to get each cell\n                            const cells = rows[i].split(',');\n                            let jsonItem = {};\n                            for(let k=0;k<cells.length;k++){\n                                let value =  cells[k].replace(/^\"(.*)\"$/, '$1')\n                                //only import those fields that are supported with create/modify\n                                if (import_attributes_keys.includes(keys[k]) && value != null && value != undefined) {\n                                    \n                                    //some special fields\n                                    switch(keys[k]){\n                                        case 'dueDate':\n                                            value = this.formatDate(new Date(value));\n                                            break;\n                                        case 'published':\n                                            value = value.toLowerCase() === \"true\";\n                                            break; \n                                    }\n  \n                                    jsonItem[keys[k]] = value;\n                                }\n                            }\n                            //record the csv row number for tracking error when\n                            //creating/modifying issues.\n                            jsonItem.csvRowNum = i;\n\n                            requestDataList.push(jsonItem);\n                        }\n                       \n\n                        const data = {\n                            'accountId': this.#accountId,\n                            'projectId': this.#projectId,\n                            'data': requestDataList\n                        }\n                        const url = TABLE_TABS[this.#tabKey].REQUEST_URL;\n                        try {\n                            const resp = await axios.post(url, data);\n                            resp.data.created && resp.data.created.forEach(item => console.log(`The row ${item.csvRowNum} is created with issue id ${item.id} `));\n                            resp.data.modified && resp.data.modified.forEach(item => console.log(`The row ${item.csvRowNum} is modified with issue id ${item.id} `));\n                            resp.data.failed && resp.data.failed.forEach(item => console.log(`The row ${item.csvRowNum} failed to be created/modified for the reason: ${item.reason} `));\n                            await sleep(3000);\n                            await this.resetData();\n                        } catch (err) {\n                            console.error(err);\n                        }\n                        this.drawTable();\n                        $(\"#loadingoverlay\").fadeOut()\n                    }\n                    reader.readAsText(fileUpload[0]);\n                } else {\n                    alert(\"This browser does not support HTML5.\");\n                }\n            } else {\n                alert(\"Please upload a valid CSV file.\");\n            }\n        };\n        input.click();\n    }\n// highlight-end\n}\n")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"The complicated properties (json or array) will be in string in the table, but will be a note only: ",(0,r.yg)("strong",{parentName:"li"},"Complicated Objects"),", when exporting to csv\nbecause the special char and comma in the complicated object will distort the csv. If you want to export the value, you may parse each key-value in the comluns."),(0,r.yg)("li",{parentName:"ul"},"During import, the code will parse the propery information from a csv file to build request payload."))),(0,r.yg)("h2",{id:"csv-file-prepare"},"CSV File Prepare"),(0,r.yg)("p",null,"Finally, let us implement the feature: batch import projects issues for creating new or modifying existing issue, this is achieved by using a CSV file,\nwe provided a sample template files for projects issues, you can add/modify your information based on the template,\nthen import the data from CSV file into ACC account."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/xiaodongliang/aps-acc-issues-tutorial-nodejs/blob/main/template/IssueTemplate.csv"},"IssueTemplate.csv")," ")),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"It is strongly recommended to use the same pattern of the csv that is exported in the previous function (Export Issue Records)."),(0,r.yg)("li",{parentName:"ul"},"To add new issue, leave the column id empty"),(0,r.yg)("li",{parentName:"ul"},"To modify the existing issue, keep the column id with the issue id, update other fields with new values."),(0,r.yg)("li",{parentName:"ul"},"A few fields are required when working with creating issues(POST). A few fields are supported when working with modifying issues (PATCH). Please check API references for more details. To make it clearer, this sample only demos some supported fields."),(0,r.yg)("li",{parentName:"ul"},"The row number of the CSV records is not used with API calls, but will be used when tracking the status."),(0,r.yg)("li",{parentName:"ul"},"The status of created/modified/failed are tracked and will be printed out in the browser console after the process."),(0,r.yg)("li",{parentName:"ul"},"If you open the CSV file with Microsoft Excel, some data type will be automatically changed by the setting, for example, the column of\n",(0,r.yg)("strong",{parentName:"li"},"startDate")," and ",(0,r.yg)("strong",{parentName:"li"},"duDate")," might be changed to the type as ",(0,r.yg)("strong",{parentName:"li"},'"2012/03/14"'),", please make sure to select another type like ",(0,r.yg)("strong",{parentName:"li"},'"2012-03-14"')," without ",(0,r.yg)("strong",{parentName:"li"},'"/"')," as shown in the screenshot,\notherwise the date will not be recognized correctly after exporting to CSV file."))),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Excel Data Format",src:n(9392).A,width:"3791",height:"1363"})),(0,r.yg)("h2",{id:"try-it-out"},"Try it out"),(0,r.yg)("p",null,"And that's it! Your application is now ready for action. Start it as usual, and when you go to\n",(0,r.yg)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080"),", you should be presented with a simple UI, with\na tree-view on the left side, you can do the following operation:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Select an ACC Hub. The tree will list all the ACC Projects within the hub that the logged in user has access to."),(0,r.yg)("li",{parentName:"ul"},"Select an ACC Project:  ",(0,r.yg)("inlineCode",{parentName:"li"},"ISSUES")," tab will list all the project issues, ",(0,r.yg)("inlineCode",{parentName:"li"},"USERS")," tab will list all the project users, ",(0,r.yg)("inlineCode",{parentName:"li"},"SUBTYPES"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"ROOT_CAUSES"),", and ",(0,r.yg)("inlineCode",{parentName:"li"},"CUSTOM_ATTRIBUTES_DEFS")," tabs will list the project subtypes, rootcauses and custom sttributes respectively."),(0,r.yg)("li",{parentName:"ul"},"Click the ",(0,r.yg)("inlineCode",{parentName:"li"},"Export")," button to export all the data of current active tab to a csv file"),(0,r.yg)("li",{parentName:"ul"},"Click ",(0,r.yg)("inlineCode",{parentName:"li"},"Import")," button to select a prepared CSV file with issue data as mentioned in #CSV File Prepare. The sample will create or modify issues. ")),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Please note that you can only import the issue data  while the ",(0,r.yg)("inlineCode",{parentName:"p"},"ISSUES")," tab is active.")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"When importing issues, you can always open the ",(0,r.yg)("strong",{parentName:"p"},"Developer Tools")," and check the console\nfor the status ofcreation/modifying the issue as picture shown below, be noted this only work for importing\nissues.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Projects Status",src:n(2074).A,width:"3812",height:"1837"})),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Final App",src:n(136).A,width:"3555",height:"1790"})))}d.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>h});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9392:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/excel-data-type-839441ddc544ea4df9c908f225322b95.png"}}]);